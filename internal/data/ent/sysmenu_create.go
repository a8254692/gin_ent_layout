// Code generated by ent, DO NOT EDIT.

package ent

import (
	"back-end/merchant/internal/data/ent/sysmenu"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SysMenuCreate is the builder for creating a SysMenu entity.
type SysMenuCreate struct {
	config
	mutation *SysMenuMutation
	hooks    []Hook
}

// SetParentID sets the "parent_id" field.
func (smc *SysMenuCreate) SetParentID(i int64) *SysMenuCreate {
	smc.mutation.SetParentID(i)
	return smc
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (smc *SysMenuCreate) SetNillableParentID(i *int64) *SysMenuCreate {
	if i != nil {
		smc.SetParentID(*i)
	}
	return smc
}

// SetTitle sets the "title" field.
func (smc *SysMenuCreate) SetTitle(s string) *SysMenuCreate {
	smc.mutation.SetTitle(s)
	return smc
}

// SetIcon sets the "icon" field.
func (smc *SysMenuCreate) SetIcon(s string) *SysMenuCreate {
	smc.mutation.SetIcon(s)
	return smc
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (smc *SysMenuCreate) SetNillableIcon(s *string) *SysMenuCreate {
	if s != nil {
		smc.SetIcon(*s)
	}
	return smc
}

// SetURI sets the "uri" field.
func (smc *SysMenuCreate) SetURI(s string) *SysMenuCreate {
	smc.mutation.SetURI(s)
	return smc
}

// SetNillableURI sets the "uri" field if the given value is not nil.
func (smc *SysMenuCreate) SetNillableURI(s *string) *SysMenuCreate {
	if s != nil {
		smc.SetURI(*s)
	}
	return smc
}

// SetShow sets the "show" field.
func (smc *SysMenuCreate) SetShow(i int8) *SysMenuCreate {
	smc.mutation.SetShow(i)
	return smc
}

// SetNillableShow sets the "show" field if the given value is not nil.
func (smc *SysMenuCreate) SetNillableShow(i *int8) *SysMenuCreate {
	if i != nil {
		smc.SetShow(*i)
	}
	return smc
}

// SetSort sets the "sort" field.
func (smc *SysMenuCreate) SetSort(i int32) *SysMenuCreate {
	smc.mutation.SetSort(i)
	return smc
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (smc *SysMenuCreate) SetNillableSort(i *int32) *SysMenuCreate {
	if i != nil {
		smc.SetSort(*i)
	}
	return smc
}

// SetCreateTime sets the "create_time" field.
func (smc *SysMenuCreate) SetCreateTime(i int32) *SysMenuCreate {
	smc.mutation.SetCreateTime(i)
	return smc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (smc *SysMenuCreate) SetNillableCreateTime(i *int32) *SysMenuCreate {
	if i != nil {
		smc.SetCreateTime(*i)
	}
	return smc
}

// SetUpdateTime sets the "update_time" field.
func (smc *SysMenuCreate) SetUpdateTime(i int32) *SysMenuCreate {
	smc.mutation.SetUpdateTime(i)
	return smc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (smc *SysMenuCreate) SetNillableUpdateTime(i *int32) *SysMenuCreate {
	if i != nil {
		smc.SetUpdateTime(*i)
	}
	return smc
}

// SetID sets the "id" field.
func (smc *SysMenuCreate) SetID(i int64) *SysMenuCreate {
	smc.mutation.SetID(i)
	return smc
}

// Mutation returns the SysMenuMutation object of the builder.
func (smc *SysMenuCreate) Mutation() *SysMenuMutation {
	return smc.mutation
}

// Save creates the SysMenu in the database.
func (smc *SysMenuCreate) Save(ctx context.Context) (*SysMenu, error) {
	smc.defaults()
	return withHooks(ctx, smc.sqlSave, smc.mutation, smc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (smc *SysMenuCreate) SaveX(ctx context.Context) *SysMenu {
	v, err := smc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (smc *SysMenuCreate) Exec(ctx context.Context) error {
	_, err := smc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (smc *SysMenuCreate) ExecX(ctx context.Context) {
	if err := smc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (smc *SysMenuCreate) defaults() {
	if _, ok := smc.mutation.ParentID(); !ok {
		v := sysmenu.DefaultParentID
		smc.mutation.SetParentID(v)
	}
	if _, ok := smc.mutation.Show(); !ok {
		v := sysmenu.DefaultShow
		smc.mutation.SetShow(v)
	}
	if _, ok := smc.mutation.Sort(); !ok {
		v := sysmenu.DefaultSort
		smc.mutation.SetSort(v)
	}
	if _, ok := smc.mutation.CreateTime(); !ok {
		v := sysmenu.DefaultCreateTime
		smc.mutation.SetCreateTime(v)
	}
	if _, ok := smc.mutation.UpdateTime(); !ok {
		v := sysmenu.DefaultUpdateTime
		smc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (smc *SysMenuCreate) check() error {
	if _, ok := smc.mutation.ParentID(); !ok {
		return &ValidationError{Name: "parent_id", err: errors.New(`ent: missing required field "SysMenu.parent_id"`)}
	}
	if _, ok := smc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "SysMenu.title"`)}
	}
	if _, ok := smc.mutation.Show(); !ok {
		return &ValidationError{Name: "show", err: errors.New(`ent: missing required field "SysMenu.show"`)}
	}
	if _, ok := smc.mutation.Sort(); !ok {
		return &ValidationError{Name: "sort", err: errors.New(`ent: missing required field "SysMenu.sort"`)}
	}
	if _, ok := smc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "SysMenu.create_time"`)}
	}
	if _, ok := smc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "SysMenu.update_time"`)}
	}
	return nil
}

func (smc *SysMenuCreate) sqlSave(ctx context.Context) (*SysMenu, error) {
	if err := smc.check(); err != nil {
		return nil, err
	}
	_node, _spec := smc.createSpec()
	if err := sqlgraph.CreateNode(ctx, smc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	smc.mutation.id = &_node.ID
	smc.mutation.done = true
	return _node, nil
}

func (smc *SysMenuCreate) createSpec() (*SysMenu, *sqlgraph.CreateSpec) {
	var (
		_node = &SysMenu{config: smc.config}
		_spec = sqlgraph.NewCreateSpec(sysmenu.Table, sqlgraph.NewFieldSpec(sysmenu.FieldID, field.TypeInt64))
	)
	if id, ok := smc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := smc.mutation.ParentID(); ok {
		_spec.SetField(sysmenu.FieldParentID, field.TypeInt64, value)
		_node.ParentID = value
	}
	if value, ok := smc.mutation.Title(); ok {
		_spec.SetField(sysmenu.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := smc.mutation.Icon(); ok {
		_spec.SetField(sysmenu.FieldIcon, field.TypeString, value)
		_node.Icon = value
	}
	if value, ok := smc.mutation.URI(); ok {
		_spec.SetField(sysmenu.FieldURI, field.TypeString, value)
		_node.URI = value
	}
	if value, ok := smc.mutation.Show(); ok {
		_spec.SetField(sysmenu.FieldShow, field.TypeInt8, value)
		_node.Show = value
	}
	if value, ok := smc.mutation.Sort(); ok {
		_spec.SetField(sysmenu.FieldSort, field.TypeInt32, value)
		_node.Sort = value
	}
	if value, ok := smc.mutation.CreateTime(); ok {
		_spec.SetField(sysmenu.FieldCreateTime, field.TypeInt32, value)
		_node.CreateTime = value
	}
	if value, ok := smc.mutation.UpdateTime(); ok {
		_spec.SetField(sysmenu.FieldUpdateTime, field.TypeInt32, value)
		_node.UpdateTime = value
	}
	return _node, _spec
}

// SysMenuCreateBulk is the builder for creating many SysMenu entities in bulk.
type SysMenuCreateBulk struct {
	config
	err      error
	builders []*SysMenuCreate
}

// Save creates the SysMenu entities in the database.
func (smcb *SysMenuCreateBulk) Save(ctx context.Context) ([]*SysMenu, error) {
	if smcb.err != nil {
		return nil, smcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(smcb.builders))
	nodes := make([]*SysMenu, len(smcb.builders))
	mutators := make([]Mutator, len(smcb.builders))
	for i := range smcb.builders {
		func(i int, root context.Context) {
			builder := smcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SysMenuMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, smcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, smcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, smcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (smcb *SysMenuCreateBulk) SaveX(ctx context.Context) []*SysMenu {
	v, err := smcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (smcb *SysMenuCreateBulk) Exec(ctx context.Context) error {
	_, err := smcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (smcb *SysMenuCreateBulk) ExecX(ctx context.Context) {
	if err := smcb.Exec(ctx); err != nil {
		panic(err)
	}
}
