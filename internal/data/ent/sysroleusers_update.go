// Code generated by ent, DO NOT EDIT.

package ent

import (
	"back-end/merchant/internal/data/ent/predicate"
	"back-end/merchant/internal/data/ent/sysroleusers"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SysRoleUsersUpdate is the builder for updating SysRoleUsers entities.
type SysRoleUsersUpdate struct {
	config
	hooks    []Hook
	mutation *SysRoleUsersMutation
}

// Where appends a list predicates to the SysRoleUsersUpdate builder.
func (sruu *SysRoleUsersUpdate) Where(ps ...predicate.SysRoleUsers) *SysRoleUsersUpdate {
	sruu.mutation.Where(ps...)
	return sruu
}

// SetRoleID sets the "role_id" field.
func (sruu *SysRoleUsersUpdate) SetRoleID(i int64) *SysRoleUsersUpdate {
	sruu.mutation.ResetRoleID()
	sruu.mutation.SetRoleID(i)
	return sruu
}

// SetNillableRoleID sets the "role_id" field if the given value is not nil.
func (sruu *SysRoleUsersUpdate) SetNillableRoleID(i *int64) *SysRoleUsersUpdate {
	if i != nil {
		sruu.SetRoleID(*i)
	}
	return sruu
}

// AddRoleID adds i to the "role_id" field.
func (sruu *SysRoleUsersUpdate) AddRoleID(i int64) *SysRoleUsersUpdate {
	sruu.mutation.AddRoleID(i)
	return sruu
}

// SetUserID sets the "user_id" field.
func (sruu *SysRoleUsersUpdate) SetUserID(i int64) *SysRoleUsersUpdate {
	sruu.mutation.ResetUserID()
	sruu.mutation.SetUserID(i)
	return sruu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (sruu *SysRoleUsersUpdate) SetNillableUserID(i *int64) *SysRoleUsersUpdate {
	if i != nil {
		sruu.SetUserID(*i)
	}
	return sruu
}

// AddUserID adds i to the "user_id" field.
func (sruu *SysRoleUsersUpdate) AddUserID(i int64) *SysRoleUsersUpdate {
	sruu.mutation.AddUserID(i)
	return sruu
}

// SetCreateTime sets the "create_time" field.
func (sruu *SysRoleUsersUpdate) SetCreateTime(i int32) *SysRoleUsersUpdate {
	sruu.mutation.ResetCreateTime()
	sruu.mutation.SetCreateTime(i)
	return sruu
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (sruu *SysRoleUsersUpdate) SetNillableCreateTime(i *int32) *SysRoleUsersUpdate {
	if i != nil {
		sruu.SetCreateTime(*i)
	}
	return sruu
}

// AddCreateTime adds i to the "create_time" field.
func (sruu *SysRoleUsersUpdate) AddCreateTime(i int32) *SysRoleUsersUpdate {
	sruu.mutation.AddCreateTime(i)
	return sruu
}

// SetUpdateTime sets the "update_time" field.
func (sruu *SysRoleUsersUpdate) SetUpdateTime(i int32) *SysRoleUsersUpdate {
	sruu.mutation.ResetUpdateTime()
	sruu.mutation.SetUpdateTime(i)
	return sruu
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (sruu *SysRoleUsersUpdate) SetNillableUpdateTime(i *int32) *SysRoleUsersUpdate {
	if i != nil {
		sruu.SetUpdateTime(*i)
	}
	return sruu
}

// AddUpdateTime adds i to the "update_time" field.
func (sruu *SysRoleUsersUpdate) AddUpdateTime(i int32) *SysRoleUsersUpdate {
	sruu.mutation.AddUpdateTime(i)
	return sruu
}

// Mutation returns the SysRoleUsersMutation object of the builder.
func (sruu *SysRoleUsersUpdate) Mutation() *SysRoleUsersMutation {
	return sruu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sruu *SysRoleUsersUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, sruu.sqlSave, sruu.mutation, sruu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sruu *SysRoleUsersUpdate) SaveX(ctx context.Context) int {
	affected, err := sruu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sruu *SysRoleUsersUpdate) Exec(ctx context.Context) error {
	_, err := sruu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sruu *SysRoleUsersUpdate) ExecX(ctx context.Context) {
	if err := sruu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (sruu *SysRoleUsersUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(sysroleusers.Table, sysroleusers.Columns, sqlgraph.NewFieldSpec(sysroleusers.FieldID, field.TypeInt32))
	if ps := sruu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sruu.mutation.RoleID(); ok {
		_spec.SetField(sysroleusers.FieldRoleID, field.TypeInt64, value)
	}
	if value, ok := sruu.mutation.AddedRoleID(); ok {
		_spec.AddField(sysroleusers.FieldRoleID, field.TypeInt64, value)
	}
	if value, ok := sruu.mutation.UserID(); ok {
		_spec.SetField(sysroleusers.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := sruu.mutation.AddedUserID(); ok {
		_spec.AddField(sysroleusers.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := sruu.mutation.CreateTime(); ok {
		_spec.SetField(sysroleusers.FieldCreateTime, field.TypeInt32, value)
	}
	if value, ok := sruu.mutation.AddedCreateTime(); ok {
		_spec.AddField(sysroleusers.FieldCreateTime, field.TypeInt32, value)
	}
	if value, ok := sruu.mutation.UpdateTime(); ok {
		_spec.SetField(sysroleusers.FieldUpdateTime, field.TypeInt32, value)
	}
	if value, ok := sruu.mutation.AddedUpdateTime(); ok {
		_spec.AddField(sysroleusers.FieldUpdateTime, field.TypeInt32, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, sruu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sysroleusers.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	sruu.mutation.done = true
	return n, nil
}

// SysRoleUsersUpdateOne is the builder for updating a single SysRoleUsers entity.
type SysRoleUsersUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SysRoleUsersMutation
}

// SetRoleID sets the "role_id" field.
func (sruuo *SysRoleUsersUpdateOne) SetRoleID(i int64) *SysRoleUsersUpdateOne {
	sruuo.mutation.ResetRoleID()
	sruuo.mutation.SetRoleID(i)
	return sruuo
}

// SetNillableRoleID sets the "role_id" field if the given value is not nil.
func (sruuo *SysRoleUsersUpdateOne) SetNillableRoleID(i *int64) *SysRoleUsersUpdateOne {
	if i != nil {
		sruuo.SetRoleID(*i)
	}
	return sruuo
}

// AddRoleID adds i to the "role_id" field.
func (sruuo *SysRoleUsersUpdateOne) AddRoleID(i int64) *SysRoleUsersUpdateOne {
	sruuo.mutation.AddRoleID(i)
	return sruuo
}

// SetUserID sets the "user_id" field.
func (sruuo *SysRoleUsersUpdateOne) SetUserID(i int64) *SysRoleUsersUpdateOne {
	sruuo.mutation.ResetUserID()
	sruuo.mutation.SetUserID(i)
	return sruuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (sruuo *SysRoleUsersUpdateOne) SetNillableUserID(i *int64) *SysRoleUsersUpdateOne {
	if i != nil {
		sruuo.SetUserID(*i)
	}
	return sruuo
}

// AddUserID adds i to the "user_id" field.
func (sruuo *SysRoleUsersUpdateOne) AddUserID(i int64) *SysRoleUsersUpdateOne {
	sruuo.mutation.AddUserID(i)
	return sruuo
}

// SetCreateTime sets the "create_time" field.
func (sruuo *SysRoleUsersUpdateOne) SetCreateTime(i int32) *SysRoleUsersUpdateOne {
	sruuo.mutation.ResetCreateTime()
	sruuo.mutation.SetCreateTime(i)
	return sruuo
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (sruuo *SysRoleUsersUpdateOne) SetNillableCreateTime(i *int32) *SysRoleUsersUpdateOne {
	if i != nil {
		sruuo.SetCreateTime(*i)
	}
	return sruuo
}

// AddCreateTime adds i to the "create_time" field.
func (sruuo *SysRoleUsersUpdateOne) AddCreateTime(i int32) *SysRoleUsersUpdateOne {
	sruuo.mutation.AddCreateTime(i)
	return sruuo
}

// SetUpdateTime sets the "update_time" field.
func (sruuo *SysRoleUsersUpdateOne) SetUpdateTime(i int32) *SysRoleUsersUpdateOne {
	sruuo.mutation.ResetUpdateTime()
	sruuo.mutation.SetUpdateTime(i)
	return sruuo
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (sruuo *SysRoleUsersUpdateOne) SetNillableUpdateTime(i *int32) *SysRoleUsersUpdateOne {
	if i != nil {
		sruuo.SetUpdateTime(*i)
	}
	return sruuo
}

// AddUpdateTime adds i to the "update_time" field.
func (sruuo *SysRoleUsersUpdateOne) AddUpdateTime(i int32) *SysRoleUsersUpdateOne {
	sruuo.mutation.AddUpdateTime(i)
	return sruuo
}

// Mutation returns the SysRoleUsersMutation object of the builder.
func (sruuo *SysRoleUsersUpdateOne) Mutation() *SysRoleUsersMutation {
	return sruuo.mutation
}

// Where appends a list predicates to the SysRoleUsersUpdate builder.
func (sruuo *SysRoleUsersUpdateOne) Where(ps ...predicate.SysRoleUsers) *SysRoleUsersUpdateOne {
	sruuo.mutation.Where(ps...)
	return sruuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sruuo *SysRoleUsersUpdateOne) Select(field string, fields ...string) *SysRoleUsersUpdateOne {
	sruuo.fields = append([]string{field}, fields...)
	return sruuo
}

// Save executes the query and returns the updated SysRoleUsers entity.
func (sruuo *SysRoleUsersUpdateOne) Save(ctx context.Context) (*SysRoleUsers, error) {
	return withHooks(ctx, sruuo.sqlSave, sruuo.mutation, sruuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sruuo *SysRoleUsersUpdateOne) SaveX(ctx context.Context) *SysRoleUsers {
	node, err := sruuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sruuo *SysRoleUsersUpdateOne) Exec(ctx context.Context) error {
	_, err := sruuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sruuo *SysRoleUsersUpdateOne) ExecX(ctx context.Context) {
	if err := sruuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (sruuo *SysRoleUsersUpdateOne) sqlSave(ctx context.Context) (_node *SysRoleUsers, err error) {
	_spec := sqlgraph.NewUpdateSpec(sysroleusers.Table, sysroleusers.Columns, sqlgraph.NewFieldSpec(sysroleusers.FieldID, field.TypeInt32))
	id, ok := sruuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SysRoleUsers.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sruuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sysroleusers.FieldID)
		for _, f := range fields {
			if !sysroleusers.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != sysroleusers.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sruuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sruuo.mutation.RoleID(); ok {
		_spec.SetField(sysroleusers.FieldRoleID, field.TypeInt64, value)
	}
	if value, ok := sruuo.mutation.AddedRoleID(); ok {
		_spec.AddField(sysroleusers.FieldRoleID, field.TypeInt64, value)
	}
	if value, ok := sruuo.mutation.UserID(); ok {
		_spec.SetField(sysroleusers.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := sruuo.mutation.AddedUserID(); ok {
		_spec.AddField(sysroleusers.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := sruuo.mutation.CreateTime(); ok {
		_spec.SetField(sysroleusers.FieldCreateTime, field.TypeInt32, value)
	}
	if value, ok := sruuo.mutation.AddedCreateTime(); ok {
		_spec.AddField(sysroleusers.FieldCreateTime, field.TypeInt32, value)
	}
	if value, ok := sruuo.mutation.UpdateTime(); ok {
		_spec.SetField(sysroleusers.FieldUpdateTime, field.TypeInt32, value)
	}
	if value, ok := sruuo.mutation.AddedUpdateTime(); ok {
		_spec.AddField(sysroleusers.FieldUpdateTime, field.TypeInt32, value)
	}
	_node = &SysRoleUsers{config: sruuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sruuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sysroleusers.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	sruuo.mutation.done = true
	return _node, nil
}
