// Code generated by ent, DO NOT EDIT.

package ent

import (
	"back-end/merchant/internal/data/ent/predicate"
	"back-end/merchant/internal/data/ent/syspermissions"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SysPermissionsUpdate is the builder for updating SysPermissions entities.
type SysPermissionsUpdate struct {
	config
	hooks    []Hook
	mutation *SysPermissionsMutation
}

// Where appends a list predicates to the SysPermissionsUpdate builder.
func (spu *SysPermissionsUpdate) Where(ps ...predicate.SysPermissions) *SysPermissionsUpdate {
	spu.mutation.Where(ps...)
	return spu
}

// SetMenuID sets the "menu_id" field.
func (spu *SysPermissionsUpdate) SetMenuID(i int64) *SysPermissionsUpdate {
	spu.mutation.ResetMenuID()
	spu.mutation.SetMenuID(i)
	return spu
}

// SetNillableMenuID sets the "menu_id" field if the given value is not nil.
func (spu *SysPermissionsUpdate) SetNillableMenuID(i *int64) *SysPermissionsUpdate {
	if i != nil {
		spu.SetMenuID(*i)
	}
	return spu
}

// AddMenuID adds i to the "menu_id" field.
func (spu *SysPermissionsUpdate) AddMenuID(i int64) *SysPermissionsUpdate {
	spu.mutation.AddMenuID(i)
	return spu
}

// SetName sets the "name" field.
func (spu *SysPermissionsUpdate) SetName(s string) *SysPermissionsUpdate {
	spu.mutation.SetName(s)
	return spu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (spu *SysPermissionsUpdate) SetNillableName(s *string) *SysPermissionsUpdate {
	if s != nil {
		spu.SetName(*s)
	}
	return spu
}

// SetCode sets the "code" field.
func (spu *SysPermissionsUpdate) SetCode(s string) *SysPermissionsUpdate {
	spu.mutation.SetCode(s)
	return spu
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (spu *SysPermissionsUpdate) SetNillableCode(s *string) *SysPermissionsUpdate {
	if s != nil {
		spu.SetCode(*s)
	}
	return spu
}

// SetPath sets the "path" field.
func (spu *SysPermissionsUpdate) SetPath(s string) *SysPermissionsUpdate {
	spu.mutation.SetPath(s)
	return spu
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (spu *SysPermissionsUpdate) SetNillablePath(s *string) *SysPermissionsUpdate {
	if s != nil {
		spu.SetPath(*s)
	}
	return spu
}

// SetCommand sets the "command" field.
func (spu *SysPermissionsUpdate) SetCommand(s string) *SysPermissionsUpdate {
	spu.mutation.SetCommand(s)
	return spu
}

// SetNillableCommand sets the "command" field if the given value is not nil.
func (spu *SysPermissionsUpdate) SetNillableCommand(s *string) *SysPermissionsUpdate {
	if s != nil {
		spu.SetCommand(*s)
	}
	return spu
}

// SetCreateTime sets the "create_time" field.
func (spu *SysPermissionsUpdate) SetCreateTime(i int32) *SysPermissionsUpdate {
	spu.mutation.ResetCreateTime()
	spu.mutation.SetCreateTime(i)
	return spu
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (spu *SysPermissionsUpdate) SetNillableCreateTime(i *int32) *SysPermissionsUpdate {
	if i != nil {
		spu.SetCreateTime(*i)
	}
	return spu
}

// AddCreateTime adds i to the "create_time" field.
func (spu *SysPermissionsUpdate) AddCreateTime(i int32) *SysPermissionsUpdate {
	spu.mutation.AddCreateTime(i)
	return spu
}

// SetUpdateTime sets the "update_time" field.
func (spu *SysPermissionsUpdate) SetUpdateTime(i int32) *SysPermissionsUpdate {
	spu.mutation.ResetUpdateTime()
	spu.mutation.SetUpdateTime(i)
	return spu
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (spu *SysPermissionsUpdate) SetNillableUpdateTime(i *int32) *SysPermissionsUpdate {
	if i != nil {
		spu.SetUpdateTime(*i)
	}
	return spu
}

// AddUpdateTime adds i to the "update_time" field.
func (spu *SysPermissionsUpdate) AddUpdateTime(i int32) *SysPermissionsUpdate {
	spu.mutation.AddUpdateTime(i)
	return spu
}

// Mutation returns the SysPermissionsMutation object of the builder.
func (spu *SysPermissionsUpdate) Mutation() *SysPermissionsMutation {
	return spu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (spu *SysPermissionsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, spu.sqlSave, spu.mutation, spu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (spu *SysPermissionsUpdate) SaveX(ctx context.Context) int {
	affected, err := spu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (spu *SysPermissionsUpdate) Exec(ctx context.Context) error {
	_, err := spu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spu *SysPermissionsUpdate) ExecX(ctx context.Context) {
	if err := spu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (spu *SysPermissionsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(syspermissions.Table, syspermissions.Columns, sqlgraph.NewFieldSpec(syspermissions.FieldID, field.TypeInt64))
	if ps := spu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := spu.mutation.MenuID(); ok {
		_spec.SetField(syspermissions.FieldMenuID, field.TypeInt64, value)
	}
	if value, ok := spu.mutation.AddedMenuID(); ok {
		_spec.AddField(syspermissions.FieldMenuID, field.TypeInt64, value)
	}
	if value, ok := spu.mutation.Name(); ok {
		_spec.SetField(syspermissions.FieldName, field.TypeString, value)
	}
	if value, ok := spu.mutation.Code(); ok {
		_spec.SetField(syspermissions.FieldCode, field.TypeString, value)
	}
	if value, ok := spu.mutation.Path(); ok {
		_spec.SetField(syspermissions.FieldPath, field.TypeString, value)
	}
	if value, ok := spu.mutation.Command(); ok {
		_spec.SetField(syspermissions.FieldCommand, field.TypeString, value)
	}
	if value, ok := spu.mutation.CreateTime(); ok {
		_spec.SetField(syspermissions.FieldCreateTime, field.TypeInt32, value)
	}
	if value, ok := spu.mutation.AddedCreateTime(); ok {
		_spec.AddField(syspermissions.FieldCreateTime, field.TypeInt32, value)
	}
	if value, ok := spu.mutation.UpdateTime(); ok {
		_spec.SetField(syspermissions.FieldUpdateTime, field.TypeInt32, value)
	}
	if value, ok := spu.mutation.AddedUpdateTime(); ok {
		_spec.AddField(syspermissions.FieldUpdateTime, field.TypeInt32, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, spu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{syspermissions.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	spu.mutation.done = true
	return n, nil
}

// SysPermissionsUpdateOne is the builder for updating a single SysPermissions entity.
type SysPermissionsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SysPermissionsMutation
}

// SetMenuID sets the "menu_id" field.
func (spuo *SysPermissionsUpdateOne) SetMenuID(i int64) *SysPermissionsUpdateOne {
	spuo.mutation.ResetMenuID()
	spuo.mutation.SetMenuID(i)
	return spuo
}

// SetNillableMenuID sets the "menu_id" field if the given value is not nil.
func (spuo *SysPermissionsUpdateOne) SetNillableMenuID(i *int64) *SysPermissionsUpdateOne {
	if i != nil {
		spuo.SetMenuID(*i)
	}
	return spuo
}

// AddMenuID adds i to the "menu_id" field.
func (spuo *SysPermissionsUpdateOne) AddMenuID(i int64) *SysPermissionsUpdateOne {
	spuo.mutation.AddMenuID(i)
	return spuo
}

// SetName sets the "name" field.
func (spuo *SysPermissionsUpdateOne) SetName(s string) *SysPermissionsUpdateOne {
	spuo.mutation.SetName(s)
	return spuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (spuo *SysPermissionsUpdateOne) SetNillableName(s *string) *SysPermissionsUpdateOne {
	if s != nil {
		spuo.SetName(*s)
	}
	return spuo
}

// SetCode sets the "code" field.
func (spuo *SysPermissionsUpdateOne) SetCode(s string) *SysPermissionsUpdateOne {
	spuo.mutation.SetCode(s)
	return spuo
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (spuo *SysPermissionsUpdateOne) SetNillableCode(s *string) *SysPermissionsUpdateOne {
	if s != nil {
		spuo.SetCode(*s)
	}
	return spuo
}

// SetPath sets the "path" field.
func (spuo *SysPermissionsUpdateOne) SetPath(s string) *SysPermissionsUpdateOne {
	spuo.mutation.SetPath(s)
	return spuo
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (spuo *SysPermissionsUpdateOne) SetNillablePath(s *string) *SysPermissionsUpdateOne {
	if s != nil {
		spuo.SetPath(*s)
	}
	return spuo
}

// SetCommand sets the "command" field.
func (spuo *SysPermissionsUpdateOne) SetCommand(s string) *SysPermissionsUpdateOne {
	spuo.mutation.SetCommand(s)
	return spuo
}

// SetNillableCommand sets the "command" field if the given value is not nil.
func (spuo *SysPermissionsUpdateOne) SetNillableCommand(s *string) *SysPermissionsUpdateOne {
	if s != nil {
		spuo.SetCommand(*s)
	}
	return spuo
}

// SetCreateTime sets the "create_time" field.
func (spuo *SysPermissionsUpdateOne) SetCreateTime(i int32) *SysPermissionsUpdateOne {
	spuo.mutation.ResetCreateTime()
	spuo.mutation.SetCreateTime(i)
	return spuo
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (spuo *SysPermissionsUpdateOne) SetNillableCreateTime(i *int32) *SysPermissionsUpdateOne {
	if i != nil {
		spuo.SetCreateTime(*i)
	}
	return spuo
}

// AddCreateTime adds i to the "create_time" field.
func (spuo *SysPermissionsUpdateOne) AddCreateTime(i int32) *SysPermissionsUpdateOne {
	spuo.mutation.AddCreateTime(i)
	return spuo
}

// SetUpdateTime sets the "update_time" field.
func (spuo *SysPermissionsUpdateOne) SetUpdateTime(i int32) *SysPermissionsUpdateOne {
	spuo.mutation.ResetUpdateTime()
	spuo.mutation.SetUpdateTime(i)
	return spuo
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (spuo *SysPermissionsUpdateOne) SetNillableUpdateTime(i *int32) *SysPermissionsUpdateOne {
	if i != nil {
		spuo.SetUpdateTime(*i)
	}
	return spuo
}

// AddUpdateTime adds i to the "update_time" field.
func (spuo *SysPermissionsUpdateOne) AddUpdateTime(i int32) *SysPermissionsUpdateOne {
	spuo.mutation.AddUpdateTime(i)
	return spuo
}

// Mutation returns the SysPermissionsMutation object of the builder.
func (spuo *SysPermissionsUpdateOne) Mutation() *SysPermissionsMutation {
	return spuo.mutation
}

// Where appends a list predicates to the SysPermissionsUpdate builder.
func (spuo *SysPermissionsUpdateOne) Where(ps ...predicate.SysPermissions) *SysPermissionsUpdateOne {
	spuo.mutation.Where(ps...)
	return spuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (spuo *SysPermissionsUpdateOne) Select(field string, fields ...string) *SysPermissionsUpdateOne {
	spuo.fields = append([]string{field}, fields...)
	return spuo
}

// Save executes the query and returns the updated SysPermissions entity.
func (spuo *SysPermissionsUpdateOne) Save(ctx context.Context) (*SysPermissions, error) {
	return withHooks(ctx, spuo.sqlSave, spuo.mutation, spuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (spuo *SysPermissionsUpdateOne) SaveX(ctx context.Context) *SysPermissions {
	node, err := spuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (spuo *SysPermissionsUpdateOne) Exec(ctx context.Context) error {
	_, err := spuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spuo *SysPermissionsUpdateOne) ExecX(ctx context.Context) {
	if err := spuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (spuo *SysPermissionsUpdateOne) sqlSave(ctx context.Context) (_node *SysPermissions, err error) {
	_spec := sqlgraph.NewUpdateSpec(syspermissions.Table, syspermissions.Columns, sqlgraph.NewFieldSpec(syspermissions.FieldID, field.TypeInt64))
	id, ok := spuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SysPermissions.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := spuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, syspermissions.FieldID)
		for _, f := range fields {
			if !syspermissions.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != syspermissions.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := spuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := spuo.mutation.MenuID(); ok {
		_spec.SetField(syspermissions.FieldMenuID, field.TypeInt64, value)
	}
	if value, ok := spuo.mutation.AddedMenuID(); ok {
		_spec.AddField(syspermissions.FieldMenuID, field.TypeInt64, value)
	}
	if value, ok := spuo.mutation.Name(); ok {
		_spec.SetField(syspermissions.FieldName, field.TypeString, value)
	}
	if value, ok := spuo.mutation.Code(); ok {
		_spec.SetField(syspermissions.FieldCode, field.TypeString, value)
	}
	if value, ok := spuo.mutation.Path(); ok {
		_spec.SetField(syspermissions.FieldPath, field.TypeString, value)
	}
	if value, ok := spuo.mutation.Command(); ok {
		_spec.SetField(syspermissions.FieldCommand, field.TypeString, value)
	}
	if value, ok := spuo.mutation.CreateTime(); ok {
		_spec.SetField(syspermissions.FieldCreateTime, field.TypeInt32, value)
	}
	if value, ok := spuo.mutation.AddedCreateTime(); ok {
		_spec.AddField(syspermissions.FieldCreateTime, field.TypeInt32, value)
	}
	if value, ok := spuo.mutation.UpdateTime(); ok {
		_spec.SetField(syspermissions.FieldUpdateTime, field.TypeInt32, value)
	}
	if value, ok := spuo.mutation.AddedUpdateTime(); ok {
		_spec.AddField(syspermissions.FieldUpdateTime, field.TypeInt32, value)
	}
	_node = &SysPermissions{config: spuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, spuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{syspermissions.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	spuo.mutation.done = true
	return _node, nil
}
