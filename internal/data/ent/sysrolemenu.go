// Code generated by ent, DO NOT EDIT.

package ent

import (
	"back-end/merchant/internal/data/ent/sysrolemenu"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// SysRoleMenu is the model entity for the SysRoleMenu schema.
type SysRoleMenu struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// RoleID holds the value of the "role_id" field.
	RoleID int64 `json:"role_id,omitempty"`
	// MenuID holds the value of the "menu_id" field.
	MenuID int64 `json:"menu_id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime int32 `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime   int32 `json:"update_time,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SysRoleMenu) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case sysrolemenu.FieldID, sysrolemenu.FieldRoleID, sysrolemenu.FieldMenuID, sysrolemenu.FieldCreateTime, sysrolemenu.FieldUpdateTime:
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SysRoleMenu fields.
func (srm *SysRoleMenu) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case sysrolemenu.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			srm.ID = int64(value.Int64)
		case sysrolemenu.FieldRoleID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field role_id", values[i])
			} else if value.Valid {
				srm.RoleID = value.Int64
			}
		case sysrolemenu.FieldMenuID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field menu_id", values[i])
			} else if value.Valid {
				srm.MenuID = value.Int64
			}
		case sysrolemenu.FieldCreateTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				srm.CreateTime = int32(value.Int64)
			}
		case sysrolemenu.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				srm.UpdateTime = int32(value.Int64)
			}
		default:
			srm.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SysRoleMenu.
// This includes values selected through modifiers, order, etc.
func (srm *SysRoleMenu) Value(name string) (ent.Value, error) {
	return srm.selectValues.Get(name)
}

// Update returns a builder for updating this SysRoleMenu.
// Note that you need to call SysRoleMenu.Unwrap() before calling this method if this SysRoleMenu
// was returned from a transaction, and the transaction was committed or rolled back.
func (srm *SysRoleMenu) Update() *SysRoleMenuUpdateOne {
	return NewSysRoleMenuClient(srm.config).UpdateOne(srm)
}

// Unwrap unwraps the SysRoleMenu entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (srm *SysRoleMenu) Unwrap() *SysRoleMenu {
	_tx, ok := srm.config.driver.(*txDriver)
	if !ok {
		panic("ent: SysRoleMenu is not a transactional entity")
	}
	srm.config.driver = _tx.drv
	return srm
}

// String implements the fmt.Stringer.
func (srm *SysRoleMenu) String() string {
	var builder strings.Builder
	builder.WriteString("SysRoleMenu(")
	builder.WriteString(fmt.Sprintf("id=%v, ", srm.ID))
	builder.WriteString("role_id=")
	builder.WriteString(fmt.Sprintf("%v", srm.RoleID))
	builder.WriteString(", ")
	builder.WriteString("menu_id=")
	builder.WriteString(fmt.Sprintf("%v", srm.MenuID))
	builder.WriteString(", ")
	builder.WriteString("create_time=")
	builder.WriteString(fmt.Sprintf("%v", srm.CreateTime))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(fmt.Sprintf("%v", srm.UpdateTime))
	builder.WriteByte(')')
	return builder.String()
}

// SysRoleMenus is a parsable slice of SysRoleMenu.
type SysRoleMenus []*SysRoleMenu
