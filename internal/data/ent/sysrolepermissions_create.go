// Code generated by ent, DO NOT EDIT.

package ent

import (
	"back-end/merchant/internal/data/ent/sysrolepermissions"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SysRolePermissionsCreate is the builder for creating a SysRolePermissions entity.
type SysRolePermissionsCreate struct {
	config
	mutation *SysRolePermissionsMutation
	hooks    []Hook
}

// SetRoleID sets the "role_id" field.
func (srpc *SysRolePermissionsCreate) SetRoleID(i int64) *SysRolePermissionsCreate {
	srpc.mutation.SetRoleID(i)
	return srpc
}

// SetPermissionID sets the "permission_id" field.
func (srpc *SysRolePermissionsCreate) SetPermissionID(i int64) *SysRolePermissionsCreate {
	srpc.mutation.SetPermissionID(i)
	return srpc
}

// SetCreateTime sets the "create_time" field.
func (srpc *SysRolePermissionsCreate) SetCreateTime(i int32) *SysRolePermissionsCreate {
	srpc.mutation.SetCreateTime(i)
	return srpc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (srpc *SysRolePermissionsCreate) SetNillableCreateTime(i *int32) *SysRolePermissionsCreate {
	if i != nil {
		srpc.SetCreateTime(*i)
	}
	return srpc
}

// SetUpdateTime sets the "update_time" field.
func (srpc *SysRolePermissionsCreate) SetUpdateTime(i int32) *SysRolePermissionsCreate {
	srpc.mutation.SetUpdateTime(i)
	return srpc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (srpc *SysRolePermissionsCreate) SetNillableUpdateTime(i *int32) *SysRolePermissionsCreate {
	if i != nil {
		srpc.SetUpdateTime(*i)
	}
	return srpc
}

// SetID sets the "id" field.
func (srpc *SysRolePermissionsCreate) SetID(i int64) *SysRolePermissionsCreate {
	srpc.mutation.SetID(i)
	return srpc
}

// Mutation returns the SysRolePermissionsMutation object of the builder.
func (srpc *SysRolePermissionsCreate) Mutation() *SysRolePermissionsMutation {
	return srpc.mutation
}

// Save creates the SysRolePermissions in the database.
func (srpc *SysRolePermissionsCreate) Save(ctx context.Context) (*SysRolePermissions, error) {
	srpc.defaults()
	return withHooks(ctx, srpc.sqlSave, srpc.mutation, srpc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (srpc *SysRolePermissionsCreate) SaveX(ctx context.Context) *SysRolePermissions {
	v, err := srpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (srpc *SysRolePermissionsCreate) Exec(ctx context.Context) error {
	_, err := srpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (srpc *SysRolePermissionsCreate) ExecX(ctx context.Context) {
	if err := srpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (srpc *SysRolePermissionsCreate) defaults() {
	if _, ok := srpc.mutation.CreateTime(); !ok {
		v := sysrolepermissions.DefaultCreateTime
		srpc.mutation.SetCreateTime(v)
	}
	if _, ok := srpc.mutation.UpdateTime(); !ok {
		v := sysrolepermissions.DefaultUpdateTime
		srpc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (srpc *SysRolePermissionsCreate) check() error {
	if _, ok := srpc.mutation.RoleID(); !ok {
		return &ValidationError{Name: "role_id", err: errors.New(`ent: missing required field "SysRolePermissions.role_id"`)}
	}
	if _, ok := srpc.mutation.PermissionID(); !ok {
		return &ValidationError{Name: "permission_id", err: errors.New(`ent: missing required field "SysRolePermissions.permission_id"`)}
	}
	if _, ok := srpc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "SysRolePermissions.create_time"`)}
	}
	if _, ok := srpc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "SysRolePermissions.update_time"`)}
	}
	return nil
}

func (srpc *SysRolePermissionsCreate) sqlSave(ctx context.Context) (*SysRolePermissions, error) {
	if err := srpc.check(); err != nil {
		return nil, err
	}
	_node, _spec := srpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, srpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	srpc.mutation.id = &_node.ID
	srpc.mutation.done = true
	return _node, nil
}

func (srpc *SysRolePermissionsCreate) createSpec() (*SysRolePermissions, *sqlgraph.CreateSpec) {
	var (
		_node = &SysRolePermissions{config: srpc.config}
		_spec = sqlgraph.NewCreateSpec(sysrolepermissions.Table, sqlgraph.NewFieldSpec(sysrolepermissions.FieldID, field.TypeInt64))
	)
	if id, ok := srpc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := srpc.mutation.RoleID(); ok {
		_spec.SetField(sysrolepermissions.FieldRoleID, field.TypeInt64, value)
		_node.RoleID = value
	}
	if value, ok := srpc.mutation.PermissionID(); ok {
		_spec.SetField(sysrolepermissions.FieldPermissionID, field.TypeInt64, value)
		_node.PermissionID = value
	}
	if value, ok := srpc.mutation.CreateTime(); ok {
		_spec.SetField(sysrolepermissions.FieldCreateTime, field.TypeInt32, value)
		_node.CreateTime = value
	}
	if value, ok := srpc.mutation.UpdateTime(); ok {
		_spec.SetField(sysrolepermissions.FieldUpdateTime, field.TypeInt32, value)
		_node.UpdateTime = value
	}
	return _node, _spec
}

// SysRolePermissionsCreateBulk is the builder for creating many SysRolePermissions entities in bulk.
type SysRolePermissionsCreateBulk struct {
	config
	err      error
	builders []*SysRolePermissionsCreate
}

// Save creates the SysRolePermissions entities in the database.
func (srpcb *SysRolePermissionsCreateBulk) Save(ctx context.Context) ([]*SysRolePermissions, error) {
	if srpcb.err != nil {
		return nil, srpcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(srpcb.builders))
	nodes := make([]*SysRolePermissions, len(srpcb.builders))
	mutators := make([]Mutator, len(srpcb.builders))
	for i := range srpcb.builders {
		func(i int, root context.Context) {
			builder := srpcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SysRolePermissionsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, srpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, srpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, srpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (srpcb *SysRolePermissionsCreateBulk) SaveX(ctx context.Context) []*SysRolePermissions {
	v, err := srpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (srpcb *SysRolePermissionsCreateBulk) Exec(ctx context.Context) error {
	_, err := srpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (srpcb *SysRolePermissionsCreateBulk) ExecX(ctx context.Context) {
	if err := srpcb.Exec(ctx); err != nil {
		panic(err)
	}
}
