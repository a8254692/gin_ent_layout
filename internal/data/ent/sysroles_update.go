// Code generated by ent, DO NOT EDIT.

package ent

import (
	"back-end/merchant/internal/data/ent/predicate"
	"back-end/merchant/internal/data/ent/sysroles"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SysRolesUpdate is the builder for updating SysRoles entities.
type SysRolesUpdate struct {
	config
	hooks    []Hook
	mutation *SysRolesMutation
}

// Where appends a list predicates to the SysRolesUpdate builder.
func (sru *SysRolesUpdate) Where(ps ...predicate.SysRoles) *SysRolesUpdate {
	sru.mutation.Where(ps...)
	return sru
}

// SetGUID sets the "guid" field.
func (sru *SysRolesUpdate) SetGUID(s string) *SysRolesUpdate {
	sru.mutation.SetGUID(s)
	return sru
}

// SetNillableGUID sets the "guid" field if the given value is not nil.
func (sru *SysRolesUpdate) SetNillableGUID(s *string) *SysRolesUpdate {
	if s != nil {
		sru.SetGUID(*s)
	}
	return sru
}

// SetMerchantID sets the "merchant_id" field.
func (sru *SysRolesUpdate) SetMerchantID(i int64) *SysRolesUpdate {
	sru.mutation.ResetMerchantID()
	sru.mutation.SetMerchantID(i)
	return sru
}

// SetNillableMerchantID sets the "merchant_id" field if the given value is not nil.
func (sru *SysRolesUpdate) SetNillableMerchantID(i *int64) *SysRolesUpdate {
	if i != nil {
		sru.SetMerchantID(*i)
	}
	return sru
}

// AddMerchantID adds i to the "merchant_id" field.
func (sru *SysRolesUpdate) AddMerchantID(i int64) *SysRolesUpdate {
	sru.mutation.AddMerchantID(i)
	return sru
}

// SetName sets the "name" field.
func (sru *SysRolesUpdate) SetName(s string) *SysRolesUpdate {
	sru.mutation.SetName(s)
	return sru
}

// SetNillableName sets the "name" field if the given value is not nil.
func (sru *SysRolesUpdate) SetNillableName(s *string) *SysRolesUpdate {
	if s != nil {
		sru.SetName(*s)
	}
	return sru
}

// SetCode sets the "code" field.
func (sru *SysRolesUpdate) SetCode(s string) *SysRolesUpdate {
	sru.mutation.SetCode(s)
	return sru
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (sru *SysRolesUpdate) SetNillableCode(s *string) *SysRolesUpdate {
	if s != nil {
		sru.SetCode(*s)
	}
	return sru
}

// SetCreateTime sets the "create_time" field.
func (sru *SysRolesUpdate) SetCreateTime(i int32) *SysRolesUpdate {
	sru.mutation.ResetCreateTime()
	sru.mutation.SetCreateTime(i)
	return sru
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (sru *SysRolesUpdate) SetNillableCreateTime(i *int32) *SysRolesUpdate {
	if i != nil {
		sru.SetCreateTime(*i)
	}
	return sru
}

// AddCreateTime adds i to the "create_time" field.
func (sru *SysRolesUpdate) AddCreateTime(i int32) *SysRolesUpdate {
	sru.mutation.AddCreateTime(i)
	return sru
}

// SetUpdateTime sets the "update_time" field.
func (sru *SysRolesUpdate) SetUpdateTime(i int32) *SysRolesUpdate {
	sru.mutation.ResetUpdateTime()
	sru.mutation.SetUpdateTime(i)
	return sru
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (sru *SysRolesUpdate) SetNillableUpdateTime(i *int32) *SysRolesUpdate {
	if i != nil {
		sru.SetUpdateTime(*i)
	}
	return sru
}

// AddUpdateTime adds i to the "update_time" field.
func (sru *SysRolesUpdate) AddUpdateTime(i int32) *SysRolesUpdate {
	sru.mutation.AddUpdateTime(i)
	return sru
}

// Mutation returns the SysRolesMutation object of the builder.
func (sru *SysRolesUpdate) Mutation() *SysRolesMutation {
	return sru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sru *SysRolesUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, sru.sqlSave, sru.mutation, sru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sru *SysRolesUpdate) SaveX(ctx context.Context) int {
	affected, err := sru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sru *SysRolesUpdate) Exec(ctx context.Context) error {
	_, err := sru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sru *SysRolesUpdate) ExecX(ctx context.Context) {
	if err := sru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (sru *SysRolesUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(sysroles.Table, sysroles.Columns, sqlgraph.NewFieldSpec(sysroles.FieldID, field.TypeInt64))
	if ps := sru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sru.mutation.GUID(); ok {
		_spec.SetField(sysroles.FieldGUID, field.TypeString, value)
	}
	if value, ok := sru.mutation.MerchantID(); ok {
		_spec.SetField(sysroles.FieldMerchantID, field.TypeInt64, value)
	}
	if value, ok := sru.mutation.AddedMerchantID(); ok {
		_spec.AddField(sysroles.FieldMerchantID, field.TypeInt64, value)
	}
	if value, ok := sru.mutation.Name(); ok {
		_spec.SetField(sysroles.FieldName, field.TypeString, value)
	}
	if value, ok := sru.mutation.Code(); ok {
		_spec.SetField(sysroles.FieldCode, field.TypeString, value)
	}
	if value, ok := sru.mutation.CreateTime(); ok {
		_spec.SetField(sysroles.FieldCreateTime, field.TypeInt32, value)
	}
	if value, ok := sru.mutation.AddedCreateTime(); ok {
		_spec.AddField(sysroles.FieldCreateTime, field.TypeInt32, value)
	}
	if value, ok := sru.mutation.UpdateTime(); ok {
		_spec.SetField(sysroles.FieldUpdateTime, field.TypeInt32, value)
	}
	if value, ok := sru.mutation.AddedUpdateTime(); ok {
		_spec.AddField(sysroles.FieldUpdateTime, field.TypeInt32, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, sru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sysroles.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	sru.mutation.done = true
	return n, nil
}

// SysRolesUpdateOne is the builder for updating a single SysRoles entity.
type SysRolesUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SysRolesMutation
}

// SetGUID sets the "guid" field.
func (sruo *SysRolesUpdateOne) SetGUID(s string) *SysRolesUpdateOne {
	sruo.mutation.SetGUID(s)
	return sruo
}

// SetNillableGUID sets the "guid" field if the given value is not nil.
func (sruo *SysRolesUpdateOne) SetNillableGUID(s *string) *SysRolesUpdateOne {
	if s != nil {
		sruo.SetGUID(*s)
	}
	return sruo
}

// SetMerchantID sets the "merchant_id" field.
func (sruo *SysRolesUpdateOne) SetMerchantID(i int64) *SysRolesUpdateOne {
	sruo.mutation.ResetMerchantID()
	sruo.mutation.SetMerchantID(i)
	return sruo
}

// SetNillableMerchantID sets the "merchant_id" field if the given value is not nil.
func (sruo *SysRolesUpdateOne) SetNillableMerchantID(i *int64) *SysRolesUpdateOne {
	if i != nil {
		sruo.SetMerchantID(*i)
	}
	return sruo
}

// AddMerchantID adds i to the "merchant_id" field.
func (sruo *SysRolesUpdateOne) AddMerchantID(i int64) *SysRolesUpdateOne {
	sruo.mutation.AddMerchantID(i)
	return sruo
}

// SetName sets the "name" field.
func (sruo *SysRolesUpdateOne) SetName(s string) *SysRolesUpdateOne {
	sruo.mutation.SetName(s)
	return sruo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (sruo *SysRolesUpdateOne) SetNillableName(s *string) *SysRolesUpdateOne {
	if s != nil {
		sruo.SetName(*s)
	}
	return sruo
}

// SetCode sets the "code" field.
func (sruo *SysRolesUpdateOne) SetCode(s string) *SysRolesUpdateOne {
	sruo.mutation.SetCode(s)
	return sruo
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (sruo *SysRolesUpdateOne) SetNillableCode(s *string) *SysRolesUpdateOne {
	if s != nil {
		sruo.SetCode(*s)
	}
	return sruo
}

// SetCreateTime sets the "create_time" field.
func (sruo *SysRolesUpdateOne) SetCreateTime(i int32) *SysRolesUpdateOne {
	sruo.mutation.ResetCreateTime()
	sruo.mutation.SetCreateTime(i)
	return sruo
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (sruo *SysRolesUpdateOne) SetNillableCreateTime(i *int32) *SysRolesUpdateOne {
	if i != nil {
		sruo.SetCreateTime(*i)
	}
	return sruo
}

// AddCreateTime adds i to the "create_time" field.
func (sruo *SysRolesUpdateOne) AddCreateTime(i int32) *SysRolesUpdateOne {
	sruo.mutation.AddCreateTime(i)
	return sruo
}

// SetUpdateTime sets the "update_time" field.
func (sruo *SysRolesUpdateOne) SetUpdateTime(i int32) *SysRolesUpdateOne {
	sruo.mutation.ResetUpdateTime()
	sruo.mutation.SetUpdateTime(i)
	return sruo
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (sruo *SysRolesUpdateOne) SetNillableUpdateTime(i *int32) *SysRolesUpdateOne {
	if i != nil {
		sruo.SetUpdateTime(*i)
	}
	return sruo
}

// AddUpdateTime adds i to the "update_time" field.
func (sruo *SysRolesUpdateOne) AddUpdateTime(i int32) *SysRolesUpdateOne {
	sruo.mutation.AddUpdateTime(i)
	return sruo
}

// Mutation returns the SysRolesMutation object of the builder.
func (sruo *SysRolesUpdateOne) Mutation() *SysRolesMutation {
	return sruo.mutation
}

// Where appends a list predicates to the SysRolesUpdate builder.
func (sruo *SysRolesUpdateOne) Where(ps ...predicate.SysRoles) *SysRolesUpdateOne {
	sruo.mutation.Where(ps...)
	return sruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sruo *SysRolesUpdateOne) Select(field string, fields ...string) *SysRolesUpdateOne {
	sruo.fields = append([]string{field}, fields...)
	return sruo
}

// Save executes the query and returns the updated SysRoles entity.
func (sruo *SysRolesUpdateOne) Save(ctx context.Context) (*SysRoles, error) {
	return withHooks(ctx, sruo.sqlSave, sruo.mutation, sruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sruo *SysRolesUpdateOne) SaveX(ctx context.Context) *SysRoles {
	node, err := sruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sruo *SysRolesUpdateOne) Exec(ctx context.Context) error {
	_, err := sruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sruo *SysRolesUpdateOne) ExecX(ctx context.Context) {
	if err := sruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (sruo *SysRolesUpdateOne) sqlSave(ctx context.Context) (_node *SysRoles, err error) {
	_spec := sqlgraph.NewUpdateSpec(sysroles.Table, sysroles.Columns, sqlgraph.NewFieldSpec(sysroles.FieldID, field.TypeInt64))
	id, ok := sruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SysRoles.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sysroles.FieldID)
		for _, f := range fields {
			if !sysroles.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != sysroles.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sruo.mutation.GUID(); ok {
		_spec.SetField(sysroles.FieldGUID, field.TypeString, value)
	}
	if value, ok := sruo.mutation.MerchantID(); ok {
		_spec.SetField(sysroles.FieldMerchantID, field.TypeInt64, value)
	}
	if value, ok := sruo.mutation.AddedMerchantID(); ok {
		_spec.AddField(sysroles.FieldMerchantID, field.TypeInt64, value)
	}
	if value, ok := sruo.mutation.Name(); ok {
		_spec.SetField(sysroles.FieldName, field.TypeString, value)
	}
	if value, ok := sruo.mutation.Code(); ok {
		_spec.SetField(sysroles.FieldCode, field.TypeString, value)
	}
	if value, ok := sruo.mutation.CreateTime(); ok {
		_spec.SetField(sysroles.FieldCreateTime, field.TypeInt32, value)
	}
	if value, ok := sruo.mutation.AddedCreateTime(); ok {
		_spec.AddField(sysroles.FieldCreateTime, field.TypeInt32, value)
	}
	if value, ok := sruo.mutation.UpdateTime(); ok {
		_spec.SetField(sysroles.FieldUpdateTime, field.TypeInt32, value)
	}
	if value, ok := sruo.mutation.AddedUpdateTime(); ok {
		_spec.AddField(sysroles.FieldUpdateTime, field.TypeInt32, value)
	}
	_node = &SysRoles{config: sruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sysroles.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	sruo.mutation.done = true
	return _node, nil
}
