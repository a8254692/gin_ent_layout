// Code generated by ent, DO NOT EDIT.

package ent

import (
	"back-end/merchant/internal/data/ent/merchantchannelbind"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// MerchantChannelBind is the model entity for the MerchantChannelBind schema.
type MerchantChannelBind struct {
	config `json:"-"`
	// ID of the ent.
	ID int32 `json:"id,omitempty"`
	// 商户 Id
	MerchantID int32 `json:"merchant_id,omitempty"`
	// 渠道 ID
	ChannelID int32 `json:"channel_id,omitempty"`
	// Status holds the value of the "status" field.
	Status int16 `json:"status,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime int32 `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime   int32 `json:"update_time,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MerchantChannelBind) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case merchantchannelbind.FieldID, merchantchannelbind.FieldMerchantID, merchantchannelbind.FieldChannelID, merchantchannelbind.FieldStatus, merchantchannelbind.FieldCreateTime, merchantchannelbind.FieldUpdateTime:
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MerchantChannelBind fields.
func (mcb *MerchantChannelBind) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case merchantchannelbind.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			mcb.ID = int32(value.Int64)
		case merchantchannelbind.FieldMerchantID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field merchant_id", values[i])
			} else if value.Valid {
				mcb.MerchantID = int32(value.Int64)
			}
		case merchantchannelbind.FieldChannelID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field channel_id", values[i])
			} else if value.Valid {
				mcb.ChannelID = int32(value.Int64)
			}
		case merchantchannelbind.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				mcb.Status = int16(value.Int64)
			}
		case merchantchannelbind.FieldCreateTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				mcb.CreateTime = int32(value.Int64)
			}
		case merchantchannelbind.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				mcb.UpdateTime = int32(value.Int64)
			}
		default:
			mcb.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the MerchantChannelBind.
// This includes values selected through modifiers, order, etc.
func (mcb *MerchantChannelBind) Value(name string) (ent.Value, error) {
	return mcb.selectValues.Get(name)
}

// Update returns a builder for updating this MerchantChannelBind.
// Note that you need to call MerchantChannelBind.Unwrap() before calling this method if this MerchantChannelBind
// was returned from a transaction, and the transaction was committed or rolled back.
func (mcb *MerchantChannelBind) Update() *MerchantChannelBindUpdateOne {
	return NewMerchantChannelBindClient(mcb.config).UpdateOne(mcb)
}

// Unwrap unwraps the MerchantChannelBind entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (mcb *MerchantChannelBind) Unwrap() *MerchantChannelBind {
	_tx, ok := mcb.config.driver.(*txDriver)
	if !ok {
		panic("ent: MerchantChannelBind is not a transactional entity")
	}
	mcb.config.driver = _tx.drv
	return mcb
}

// String implements the fmt.Stringer.
func (mcb *MerchantChannelBind) String() string {
	var builder strings.Builder
	builder.WriteString("MerchantChannelBind(")
	builder.WriteString(fmt.Sprintf("id=%v, ", mcb.ID))
	builder.WriteString("merchant_id=")
	builder.WriteString(fmt.Sprintf("%v", mcb.MerchantID))
	builder.WriteString(", ")
	builder.WriteString("channel_id=")
	builder.WriteString(fmt.Sprintf("%v", mcb.ChannelID))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", mcb.Status))
	builder.WriteString(", ")
	builder.WriteString("create_time=")
	builder.WriteString(fmt.Sprintf("%v", mcb.CreateTime))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(fmt.Sprintf("%v", mcb.UpdateTime))
	builder.WriteByte(')')
	return builder.String()
}

// MerchantChannelBinds is a parsable slice of MerchantChannelBind.
type MerchantChannelBinds []*MerchantChannelBind
