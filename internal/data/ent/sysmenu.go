// Code generated by ent, DO NOT EDIT.

package ent

import (
	"back-end/merchant/internal/data/ent/sysmenu"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// SysMenu is the model entity for the SysMenu schema.
type SysMenu struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// 上级菜单
	ParentID int64 `json:"parent_id,omitempty"`
	// 标题
	Title string `json:"title,omitempty"`
	// 图标
	Icon string `json:"icon,omitempty"`
	// 路径
	URI string `json:"uri,omitempty"`
	// 是否展示:1是,0否
	Show int8 `json:"show,omitempty"`
	// 排序
	Sort int32 `json:"sort,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime int32 `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime   int32 `json:"update_time,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SysMenu) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case sysmenu.FieldID, sysmenu.FieldParentID, sysmenu.FieldShow, sysmenu.FieldSort, sysmenu.FieldCreateTime, sysmenu.FieldUpdateTime:
			values[i] = new(sql.NullInt64)
		case sysmenu.FieldTitle, sysmenu.FieldIcon, sysmenu.FieldURI:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SysMenu fields.
func (sm *SysMenu) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case sysmenu.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sm.ID = int64(value.Int64)
		case sysmenu.FieldParentID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field parent_id", values[i])
			} else if value.Valid {
				sm.ParentID = value.Int64
			}
		case sysmenu.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				sm.Title = value.String
			}
		case sysmenu.FieldIcon:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field icon", values[i])
			} else if value.Valid {
				sm.Icon = value.String
			}
		case sysmenu.FieldURI:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field uri", values[i])
			} else if value.Valid {
				sm.URI = value.String
			}
		case sysmenu.FieldShow:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field show", values[i])
			} else if value.Valid {
				sm.Show = int8(value.Int64)
			}
		case sysmenu.FieldSort:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sort", values[i])
			} else if value.Valid {
				sm.Sort = int32(value.Int64)
			}
		case sysmenu.FieldCreateTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				sm.CreateTime = int32(value.Int64)
			}
		case sysmenu.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				sm.UpdateTime = int32(value.Int64)
			}
		default:
			sm.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SysMenu.
// This includes values selected through modifiers, order, etc.
func (sm *SysMenu) Value(name string) (ent.Value, error) {
	return sm.selectValues.Get(name)
}

// Update returns a builder for updating this SysMenu.
// Note that you need to call SysMenu.Unwrap() before calling this method if this SysMenu
// was returned from a transaction, and the transaction was committed or rolled back.
func (sm *SysMenu) Update() *SysMenuUpdateOne {
	return NewSysMenuClient(sm.config).UpdateOne(sm)
}

// Unwrap unwraps the SysMenu entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sm *SysMenu) Unwrap() *SysMenu {
	_tx, ok := sm.config.driver.(*txDriver)
	if !ok {
		panic("ent: SysMenu is not a transactional entity")
	}
	sm.config.driver = _tx.drv
	return sm
}

// String implements the fmt.Stringer.
func (sm *SysMenu) String() string {
	var builder strings.Builder
	builder.WriteString("SysMenu(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sm.ID))
	builder.WriteString("parent_id=")
	builder.WriteString(fmt.Sprintf("%v", sm.ParentID))
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(sm.Title)
	builder.WriteString(", ")
	builder.WriteString("icon=")
	builder.WriteString(sm.Icon)
	builder.WriteString(", ")
	builder.WriteString("uri=")
	builder.WriteString(sm.URI)
	builder.WriteString(", ")
	builder.WriteString("show=")
	builder.WriteString(fmt.Sprintf("%v", sm.Show))
	builder.WriteString(", ")
	builder.WriteString("sort=")
	builder.WriteString(fmt.Sprintf("%v", sm.Sort))
	builder.WriteString(", ")
	builder.WriteString("create_time=")
	builder.WriteString(fmt.Sprintf("%v", sm.CreateTime))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(fmt.Sprintf("%v", sm.UpdateTime))
	builder.WriteByte(')')
	return builder.String()
}

// SysMenus is a parsable slice of SysMenu.
type SysMenus []*SysMenu
