// Code generated by ent, DO NOT EDIT.

package ent

import (
	"back-end/merchant/internal/data/ent/merchantlist"
	"back-end/merchant/internal/data/ent/predicate"
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MerchantListQuery is the builder for querying MerchantList entities.
type MerchantListQuery struct {
	config
	ctx        *QueryContext
	order      []merchantlist.OrderOption
	inters     []Interceptor
	predicates []predicate.MerchantList
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the MerchantListQuery builder.
func (mlq *MerchantListQuery) Where(ps ...predicate.MerchantList) *MerchantListQuery {
	mlq.predicates = append(mlq.predicates, ps...)
	return mlq
}

// Limit the number of records to be returned by this query.
func (mlq *MerchantListQuery) Limit(limit int) *MerchantListQuery {
	mlq.ctx.Limit = &limit
	return mlq
}

// Offset to start from.
func (mlq *MerchantListQuery) Offset(offset int) *MerchantListQuery {
	mlq.ctx.Offset = &offset
	return mlq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (mlq *MerchantListQuery) Unique(unique bool) *MerchantListQuery {
	mlq.ctx.Unique = &unique
	return mlq
}

// Order specifies how the records should be ordered.
func (mlq *MerchantListQuery) Order(o ...merchantlist.OrderOption) *MerchantListQuery {
	mlq.order = append(mlq.order, o...)
	return mlq
}

// First returns the first MerchantList entity from the query.
// Returns a *NotFoundError when no MerchantList was found.
func (mlq *MerchantListQuery) First(ctx context.Context) (*MerchantList, error) {
	nodes, err := mlq.Limit(1).All(setContextOp(ctx, mlq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{merchantlist.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (mlq *MerchantListQuery) FirstX(ctx context.Context) *MerchantList {
	node, err := mlq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first MerchantList ID from the query.
// Returns a *NotFoundError when no MerchantList ID was found.
func (mlq *MerchantListQuery) FirstID(ctx context.Context) (id int32, err error) {
	var ids []int32
	if ids, err = mlq.Limit(1).IDs(setContextOp(ctx, mlq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{merchantlist.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (mlq *MerchantListQuery) FirstIDX(ctx context.Context) int32 {
	id, err := mlq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single MerchantList entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one MerchantList entity is found.
// Returns a *NotFoundError when no MerchantList entities are found.
func (mlq *MerchantListQuery) Only(ctx context.Context) (*MerchantList, error) {
	nodes, err := mlq.Limit(2).All(setContextOp(ctx, mlq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{merchantlist.Label}
	default:
		return nil, &NotSingularError{merchantlist.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (mlq *MerchantListQuery) OnlyX(ctx context.Context) *MerchantList {
	node, err := mlq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only MerchantList ID in the query.
// Returns a *NotSingularError when more than one MerchantList ID is found.
// Returns a *NotFoundError when no entities are found.
func (mlq *MerchantListQuery) OnlyID(ctx context.Context) (id int32, err error) {
	var ids []int32
	if ids, err = mlq.Limit(2).IDs(setContextOp(ctx, mlq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{merchantlist.Label}
	default:
		err = &NotSingularError{merchantlist.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (mlq *MerchantListQuery) OnlyIDX(ctx context.Context) int32 {
	id, err := mlq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of MerchantLists.
func (mlq *MerchantListQuery) All(ctx context.Context) ([]*MerchantList, error) {
	ctx = setContextOp(ctx, mlq.ctx, "All")
	if err := mlq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*MerchantList, *MerchantListQuery]()
	return withInterceptors[[]*MerchantList](ctx, mlq, qr, mlq.inters)
}

// AllX is like All, but panics if an error occurs.
func (mlq *MerchantListQuery) AllX(ctx context.Context) []*MerchantList {
	nodes, err := mlq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of MerchantList IDs.
func (mlq *MerchantListQuery) IDs(ctx context.Context) (ids []int32, err error) {
	if mlq.ctx.Unique == nil && mlq.path != nil {
		mlq.Unique(true)
	}
	ctx = setContextOp(ctx, mlq.ctx, "IDs")
	if err = mlq.Select(merchantlist.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (mlq *MerchantListQuery) IDsX(ctx context.Context) []int32 {
	ids, err := mlq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (mlq *MerchantListQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, mlq.ctx, "Count")
	if err := mlq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, mlq, querierCount[*MerchantListQuery](), mlq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (mlq *MerchantListQuery) CountX(ctx context.Context) int {
	count, err := mlq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (mlq *MerchantListQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, mlq.ctx, "Exist")
	switch _, err := mlq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (mlq *MerchantListQuery) ExistX(ctx context.Context) bool {
	exist, err := mlq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the MerchantListQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (mlq *MerchantListQuery) Clone() *MerchantListQuery {
	if mlq == nil {
		return nil
	}
	return &MerchantListQuery{
		config:     mlq.config,
		ctx:        mlq.ctx.Clone(),
		order:      append([]merchantlist.OrderOption{}, mlq.order...),
		inters:     append([]Interceptor{}, mlq.inters...),
		predicates: append([]predicate.MerchantList{}, mlq.predicates...),
		// clone intermediate query.
		sql:  mlq.sql.Clone(),
		path: mlq.path,
	}
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		GUID string `json:"guid,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.MerchantList.Query().
//		GroupBy(merchantlist.FieldGUID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (mlq *MerchantListQuery) GroupBy(field string, fields ...string) *MerchantListGroupBy {
	mlq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &MerchantListGroupBy{build: mlq}
	grbuild.flds = &mlq.ctx.Fields
	grbuild.label = merchantlist.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		GUID string `json:"guid,omitempty"`
//	}
//
//	client.MerchantList.Query().
//		Select(merchantlist.FieldGUID).
//		Scan(ctx, &v)
func (mlq *MerchantListQuery) Select(fields ...string) *MerchantListSelect {
	mlq.ctx.Fields = append(mlq.ctx.Fields, fields...)
	sbuild := &MerchantListSelect{MerchantListQuery: mlq}
	sbuild.label = merchantlist.Label
	sbuild.flds, sbuild.scan = &mlq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a MerchantListSelect configured with the given aggregations.
func (mlq *MerchantListQuery) Aggregate(fns ...AggregateFunc) *MerchantListSelect {
	return mlq.Select().Aggregate(fns...)
}

func (mlq *MerchantListQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range mlq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, mlq); err != nil {
				return err
			}
		}
	}
	for _, f := range mlq.ctx.Fields {
		if !merchantlist.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if mlq.path != nil {
		prev, err := mlq.path(ctx)
		if err != nil {
			return err
		}
		mlq.sql = prev
	}
	return nil
}

func (mlq *MerchantListQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*MerchantList, error) {
	var (
		nodes = []*MerchantList{}
		_spec = mlq.querySpec()
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*MerchantList).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &MerchantList{config: mlq.config}
		nodes = append(nodes, node)
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, mlq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	return nodes, nil
}

func (mlq *MerchantListQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := mlq.querySpec()
	_spec.Node.Columns = mlq.ctx.Fields
	if len(mlq.ctx.Fields) > 0 {
		_spec.Unique = mlq.ctx.Unique != nil && *mlq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, mlq.driver, _spec)
}

func (mlq *MerchantListQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(merchantlist.Table, merchantlist.Columns, sqlgraph.NewFieldSpec(merchantlist.FieldID, field.TypeInt32))
	_spec.From = mlq.sql
	if unique := mlq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if mlq.path != nil {
		_spec.Unique = true
	}
	if fields := mlq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, merchantlist.FieldID)
		for i := range fields {
			if fields[i] != merchantlist.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := mlq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := mlq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := mlq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := mlq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (mlq *MerchantListQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(mlq.driver.Dialect())
	t1 := builder.Table(merchantlist.Table)
	columns := mlq.ctx.Fields
	if len(columns) == 0 {
		columns = merchantlist.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if mlq.sql != nil {
		selector = mlq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if mlq.ctx.Unique != nil && *mlq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range mlq.predicates {
		p(selector)
	}
	for _, p := range mlq.order {
		p(selector)
	}
	if offset := mlq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := mlq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// MerchantListGroupBy is the group-by builder for MerchantList entities.
type MerchantListGroupBy struct {
	selector
	build *MerchantListQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (mlgb *MerchantListGroupBy) Aggregate(fns ...AggregateFunc) *MerchantListGroupBy {
	mlgb.fns = append(mlgb.fns, fns...)
	return mlgb
}

// Scan applies the selector query and scans the result into the given value.
func (mlgb *MerchantListGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, mlgb.build.ctx, "GroupBy")
	if err := mlgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*MerchantListQuery, *MerchantListGroupBy](ctx, mlgb.build, mlgb, mlgb.build.inters, v)
}

func (mlgb *MerchantListGroupBy) sqlScan(ctx context.Context, root *MerchantListQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(mlgb.fns))
	for _, fn := range mlgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*mlgb.flds)+len(mlgb.fns))
		for _, f := range *mlgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*mlgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := mlgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// MerchantListSelect is the builder for selecting fields of MerchantList entities.
type MerchantListSelect struct {
	*MerchantListQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (mls *MerchantListSelect) Aggregate(fns ...AggregateFunc) *MerchantListSelect {
	mls.fns = append(mls.fns, fns...)
	return mls
}

// Scan applies the selector query and scans the result into the given value.
func (mls *MerchantListSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, mls.ctx, "Select")
	if err := mls.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*MerchantListQuery, *MerchantListSelect](ctx, mls.MerchantListQuery, mls, mls.inters, v)
}

func (mls *MerchantListSelect) sqlScan(ctx context.Context, root *MerchantListQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(mls.fns))
	for _, fn := range mls.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*mls.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := mls.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
