// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"back-end/merchant/internal/data/ent/migrate"

	"back-end/merchant/internal/data/ent/merchantchannelbind"
	"back-end/merchant/internal/data/ent/merchantlist"
	"back-end/merchant/internal/data/ent/sysmenu"
	"back-end/merchant/internal/data/ent/syspermissions"
	"back-end/merchant/internal/data/ent/sysrolemenu"
	"back-end/merchant/internal/data/ent/sysrolepermissions"
	"back-end/merchant/internal/data/ent/sysroles"
	"back-end/merchant/internal/data/ent/sysroleusers"
	"back-end/merchant/internal/data/ent/user"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// MerchantChannelBind is the client for interacting with the MerchantChannelBind builders.
	MerchantChannelBind *MerchantChannelBindClient
	// MerchantList is the client for interacting with the MerchantList builders.
	MerchantList *MerchantListClient
	// SysMenu is the client for interacting with the SysMenu builders.
	SysMenu *SysMenuClient
	// SysPermissions is the client for interacting with the SysPermissions builders.
	SysPermissions *SysPermissionsClient
	// SysRoleMenu is the client for interacting with the SysRoleMenu builders.
	SysRoleMenu *SysRoleMenuClient
	// SysRolePermissions is the client for interacting with the SysRolePermissions builders.
	SysRolePermissions *SysRolePermissionsClient
	// SysRoleUsers is the client for interacting with the SysRoleUsers builders.
	SysRoleUsers *SysRoleUsersClient
	// SysRoles is the client for interacting with the SysRoles builders.
	SysRoles *SysRolesClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.MerchantChannelBind = NewMerchantChannelBindClient(c.config)
	c.MerchantList = NewMerchantListClient(c.config)
	c.SysMenu = NewSysMenuClient(c.config)
	c.SysPermissions = NewSysPermissionsClient(c.config)
	c.SysRoleMenu = NewSysRoleMenuClient(c.config)
	c.SysRolePermissions = NewSysRolePermissionsClient(c.config)
	c.SysRoleUsers = NewSysRoleUsersClient(c.config)
	c.SysRoles = NewSysRolesClient(c.config)
	c.User = NewUserClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                 ctx,
		config:              cfg,
		MerchantChannelBind: NewMerchantChannelBindClient(cfg),
		MerchantList:        NewMerchantListClient(cfg),
		SysMenu:             NewSysMenuClient(cfg),
		SysPermissions:      NewSysPermissionsClient(cfg),
		SysRoleMenu:         NewSysRoleMenuClient(cfg),
		SysRolePermissions:  NewSysRolePermissionsClient(cfg),
		SysRoleUsers:        NewSysRoleUsersClient(cfg),
		SysRoles:            NewSysRolesClient(cfg),
		User:                NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                 ctx,
		config:              cfg,
		MerchantChannelBind: NewMerchantChannelBindClient(cfg),
		MerchantList:        NewMerchantListClient(cfg),
		SysMenu:             NewSysMenuClient(cfg),
		SysPermissions:      NewSysPermissionsClient(cfg),
		SysRoleMenu:         NewSysRoleMenuClient(cfg),
		SysRolePermissions:  NewSysRolePermissionsClient(cfg),
		SysRoleUsers:        NewSysRoleUsersClient(cfg),
		SysRoles:            NewSysRolesClient(cfg),
		User:                NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		MerchantChannelBind.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.MerchantChannelBind, c.MerchantList, c.SysMenu, c.SysPermissions,
		c.SysRoleMenu, c.SysRolePermissions, c.SysRoleUsers, c.SysRoles, c.User,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.MerchantChannelBind, c.MerchantList, c.SysMenu, c.SysPermissions,
		c.SysRoleMenu, c.SysRolePermissions, c.SysRoleUsers, c.SysRoles, c.User,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *MerchantChannelBindMutation:
		return c.MerchantChannelBind.mutate(ctx, m)
	case *MerchantListMutation:
		return c.MerchantList.mutate(ctx, m)
	case *SysMenuMutation:
		return c.SysMenu.mutate(ctx, m)
	case *SysPermissionsMutation:
		return c.SysPermissions.mutate(ctx, m)
	case *SysRoleMenuMutation:
		return c.SysRoleMenu.mutate(ctx, m)
	case *SysRolePermissionsMutation:
		return c.SysRolePermissions.mutate(ctx, m)
	case *SysRoleUsersMutation:
		return c.SysRoleUsers.mutate(ctx, m)
	case *SysRolesMutation:
		return c.SysRoles.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// MerchantChannelBindClient is a client for the MerchantChannelBind schema.
type MerchantChannelBindClient struct {
	config
}

// NewMerchantChannelBindClient returns a client for the MerchantChannelBind from the given config.
func NewMerchantChannelBindClient(c config) *MerchantChannelBindClient {
	return &MerchantChannelBindClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `merchantchannelbind.Hooks(f(g(h())))`.
func (c *MerchantChannelBindClient) Use(hooks ...Hook) {
	c.hooks.MerchantChannelBind = append(c.hooks.MerchantChannelBind, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `merchantchannelbind.Intercept(f(g(h())))`.
func (c *MerchantChannelBindClient) Intercept(interceptors ...Interceptor) {
	c.inters.MerchantChannelBind = append(c.inters.MerchantChannelBind, interceptors...)
}

// Create returns a builder for creating a MerchantChannelBind entity.
func (c *MerchantChannelBindClient) Create() *MerchantChannelBindCreate {
	mutation := newMerchantChannelBindMutation(c.config, OpCreate)
	return &MerchantChannelBindCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of MerchantChannelBind entities.
func (c *MerchantChannelBindClient) CreateBulk(builders ...*MerchantChannelBindCreate) *MerchantChannelBindCreateBulk {
	return &MerchantChannelBindCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *MerchantChannelBindClient) MapCreateBulk(slice any, setFunc func(*MerchantChannelBindCreate, int)) *MerchantChannelBindCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &MerchantChannelBindCreateBulk{err: fmt.Errorf("calling to MerchantChannelBindClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*MerchantChannelBindCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &MerchantChannelBindCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for MerchantChannelBind.
func (c *MerchantChannelBindClient) Update() *MerchantChannelBindUpdate {
	mutation := newMerchantChannelBindMutation(c.config, OpUpdate)
	return &MerchantChannelBindUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MerchantChannelBindClient) UpdateOne(mcb *MerchantChannelBind) *MerchantChannelBindUpdateOne {
	mutation := newMerchantChannelBindMutation(c.config, OpUpdateOne, withMerchantChannelBind(mcb))
	return &MerchantChannelBindUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MerchantChannelBindClient) UpdateOneID(id int32) *MerchantChannelBindUpdateOne {
	mutation := newMerchantChannelBindMutation(c.config, OpUpdateOne, withMerchantChannelBindID(id))
	return &MerchantChannelBindUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for MerchantChannelBind.
func (c *MerchantChannelBindClient) Delete() *MerchantChannelBindDelete {
	mutation := newMerchantChannelBindMutation(c.config, OpDelete)
	return &MerchantChannelBindDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *MerchantChannelBindClient) DeleteOne(mcb *MerchantChannelBind) *MerchantChannelBindDeleteOne {
	return c.DeleteOneID(mcb.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *MerchantChannelBindClient) DeleteOneID(id int32) *MerchantChannelBindDeleteOne {
	builder := c.Delete().Where(merchantchannelbind.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MerchantChannelBindDeleteOne{builder}
}

// Query returns a query builder for MerchantChannelBind.
func (c *MerchantChannelBindClient) Query() *MerchantChannelBindQuery {
	return &MerchantChannelBindQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeMerchantChannelBind},
		inters: c.Interceptors(),
	}
}

// Get returns a MerchantChannelBind entity by its id.
func (c *MerchantChannelBindClient) Get(ctx context.Context, id int32) (*MerchantChannelBind, error) {
	return c.Query().Where(merchantchannelbind.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MerchantChannelBindClient) GetX(ctx context.Context, id int32) *MerchantChannelBind {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *MerchantChannelBindClient) Hooks() []Hook {
	return c.hooks.MerchantChannelBind
}

// Interceptors returns the client interceptors.
func (c *MerchantChannelBindClient) Interceptors() []Interceptor {
	return c.inters.MerchantChannelBind
}

func (c *MerchantChannelBindClient) mutate(ctx context.Context, m *MerchantChannelBindMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&MerchantChannelBindCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&MerchantChannelBindUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&MerchantChannelBindUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&MerchantChannelBindDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown MerchantChannelBind mutation op: %q", m.Op())
	}
}

// MerchantListClient is a client for the MerchantList schema.
type MerchantListClient struct {
	config
}

// NewMerchantListClient returns a client for the MerchantList from the given config.
func NewMerchantListClient(c config) *MerchantListClient {
	return &MerchantListClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `merchantlist.Hooks(f(g(h())))`.
func (c *MerchantListClient) Use(hooks ...Hook) {
	c.hooks.MerchantList = append(c.hooks.MerchantList, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `merchantlist.Intercept(f(g(h())))`.
func (c *MerchantListClient) Intercept(interceptors ...Interceptor) {
	c.inters.MerchantList = append(c.inters.MerchantList, interceptors...)
}

// Create returns a builder for creating a MerchantList entity.
func (c *MerchantListClient) Create() *MerchantListCreate {
	mutation := newMerchantListMutation(c.config, OpCreate)
	return &MerchantListCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of MerchantList entities.
func (c *MerchantListClient) CreateBulk(builders ...*MerchantListCreate) *MerchantListCreateBulk {
	return &MerchantListCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *MerchantListClient) MapCreateBulk(slice any, setFunc func(*MerchantListCreate, int)) *MerchantListCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &MerchantListCreateBulk{err: fmt.Errorf("calling to MerchantListClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*MerchantListCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &MerchantListCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for MerchantList.
func (c *MerchantListClient) Update() *MerchantListUpdate {
	mutation := newMerchantListMutation(c.config, OpUpdate)
	return &MerchantListUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MerchantListClient) UpdateOne(ml *MerchantList) *MerchantListUpdateOne {
	mutation := newMerchantListMutation(c.config, OpUpdateOne, withMerchantList(ml))
	return &MerchantListUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MerchantListClient) UpdateOneID(id int32) *MerchantListUpdateOne {
	mutation := newMerchantListMutation(c.config, OpUpdateOne, withMerchantListID(id))
	return &MerchantListUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for MerchantList.
func (c *MerchantListClient) Delete() *MerchantListDelete {
	mutation := newMerchantListMutation(c.config, OpDelete)
	return &MerchantListDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *MerchantListClient) DeleteOne(ml *MerchantList) *MerchantListDeleteOne {
	return c.DeleteOneID(ml.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *MerchantListClient) DeleteOneID(id int32) *MerchantListDeleteOne {
	builder := c.Delete().Where(merchantlist.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MerchantListDeleteOne{builder}
}

// Query returns a query builder for MerchantList.
func (c *MerchantListClient) Query() *MerchantListQuery {
	return &MerchantListQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeMerchantList},
		inters: c.Interceptors(),
	}
}

// Get returns a MerchantList entity by its id.
func (c *MerchantListClient) Get(ctx context.Context, id int32) (*MerchantList, error) {
	return c.Query().Where(merchantlist.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MerchantListClient) GetX(ctx context.Context, id int32) *MerchantList {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *MerchantListClient) Hooks() []Hook {
	return c.hooks.MerchantList
}

// Interceptors returns the client interceptors.
func (c *MerchantListClient) Interceptors() []Interceptor {
	return c.inters.MerchantList
}

func (c *MerchantListClient) mutate(ctx context.Context, m *MerchantListMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&MerchantListCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&MerchantListUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&MerchantListUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&MerchantListDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown MerchantList mutation op: %q", m.Op())
	}
}

// SysMenuClient is a client for the SysMenu schema.
type SysMenuClient struct {
	config
}

// NewSysMenuClient returns a client for the SysMenu from the given config.
func NewSysMenuClient(c config) *SysMenuClient {
	return &SysMenuClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `sysmenu.Hooks(f(g(h())))`.
func (c *SysMenuClient) Use(hooks ...Hook) {
	c.hooks.SysMenu = append(c.hooks.SysMenu, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `sysmenu.Intercept(f(g(h())))`.
func (c *SysMenuClient) Intercept(interceptors ...Interceptor) {
	c.inters.SysMenu = append(c.inters.SysMenu, interceptors...)
}

// Create returns a builder for creating a SysMenu entity.
func (c *SysMenuClient) Create() *SysMenuCreate {
	mutation := newSysMenuMutation(c.config, OpCreate)
	return &SysMenuCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SysMenu entities.
func (c *SysMenuClient) CreateBulk(builders ...*SysMenuCreate) *SysMenuCreateBulk {
	return &SysMenuCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SysMenuClient) MapCreateBulk(slice any, setFunc func(*SysMenuCreate, int)) *SysMenuCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SysMenuCreateBulk{err: fmt.Errorf("calling to SysMenuClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SysMenuCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SysMenuCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SysMenu.
func (c *SysMenuClient) Update() *SysMenuUpdate {
	mutation := newSysMenuMutation(c.config, OpUpdate)
	return &SysMenuUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SysMenuClient) UpdateOne(sm *SysMenu) *SysMenuUpdateOne {
	mutation := newSysMenuMutation(c.config, OpUpdateOne, withSysMenu(sm))
	return &SysMenuUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SysMenuClient) UpdateOneID(id int64) *SysMenuUpdateOne {
	mutation := newSysMenuMutation(c.config, OpUpdateOne, withSysMenuID(id))
	return &SysMenuUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SysMenu.
func (c *SysMenuClient) Delete() *SysMenuDelete {
	mutation := newSysMenuMutation(c.config, OpDelete)
	return &SysMenuDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SysMenuClient) DeleteOne(sm *SysMenu) *SysMenuDeleteOne {
	return c.DeleteOneID(sm.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SysMenuClient) DeleteOneID(id int64) *SysMenuDeleteOne {
	builder := c.Delete().Where(sysmenu.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SysMenuDeleteOne{builder}
}

// Query returns a query builder for SysMenu.
func (c *SysMenuClient) Query() *SysMenuQuery {
	return &SysMenuQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSysMenu},
		inters: c.Interceptors(),
	}
}

// Get returns a SysMenu entity by its id.
func (c *SysMenuClient) Get(ctx context.Context, id int64) (*SysMenu, error) {
	return c.Query().Where(sysmenu.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SysMenuClient) GetX(ctx context.Context, id int64) *SysMenu {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *SysMenuClient) Hooks() []Hook {
	return c.hooks.SysMenu
}

// Interceptors returns the client interceptors.
func (c *SysMenuClient) Interceptors() []Interceptor {
	return c.inters.SysMenu
}

func (c *SysMenuClient) mutate(ctx context.Context, m *SysMenuMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SysMenuCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SysMenuUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SysMenuUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SysMenuDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown SysMenu mutation op: %q", m.Op())
	}
}

// SysPermissionsClient is a client for the SysPermissions schema.
type SysPermissionsClient struct {
	config
}

// NewSysPermissionsClient returns a client for the SysPermissions from the given config.
func NewSysPermissionsClient(c config) *SysPermissionsClient {
	return &SysPermissionsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `syspermissions.Hooks(f(g(h())))`.
func (c *SysPermissionsClient) Use(hooks ...Hook) {
	c.hooks.SysPermissions = append(c.hooks.SysPermissions, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `syspermissions.Intercept(f(g(h())))`.
func (c *SysPermissionsClient) Intercept(interceptors ...Interceptor) {
	c.inters.SysPermissions = append(c.inters.SysPermissions, interceptors...)
}

// Create returns a builder for creating a SysPermissions entity.
func (c *SysPermissionsClient) Create() *SysPermissionsCreate {
	mutation := newSysPermissionsMutation(c.config, OpCreate)
	return &SysPermissionsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SysPermissions entities.
func (c *SysPermissionsClient) CreateBulk(builders ...*SysPermissionsCreate) *SysPermissionsCreateBulk {
	return &SysPermissionsCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SysPermissionsClient) MapCreateBulk(slice any, setFunc func(*SysPermissionsCreate, int)) *SysPermissionsCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SysPermissionsCreateBulk{err: fmt.Errorf("calling to SysPermissionsClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SysPermissionsCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SysPermissionsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SysPermissions.
func (c *SysPermissionsClient) Update() *SysPermissionsUpdate {
	mutation := newSysPermissionsMutation(c.config, OpUpdate)
	return &SysPermissionsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SysPermissionsClient) UpdateOne(sp *SysPermissions) *SysPermissionsUpdateOne {
	mutation := newSysPermissionsMutation(c.config, OpUpdateOne, withSysPermissions(sp))
	return &SysPermissionsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SysPermissionsClient) UpdateOneID(id int64) *SysPermissionsUpdateOne {
	mutation := newSysPermissionsMutation(c.config, OpUpdateOne, withSysPermissionsID(id))
	return &SysPermissionsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SysPermissions.
func (c *SysPermissionsClient) Delete() *SysPermissionsDelete {
	mutation := newSysPermissionsMutation(c.config, OpDelete)
	return &SysPermissionsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SysPermissionsClient) DeleteOne(sp *SysPermissions) *SysPermissionsDeleteOne {
	return c.DeleteOneID(sp.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SysPermissionsClient) DeleteOneID(id int64) *SysPermissionsDeleteOne {
	builder := c.Delete().Where(syspermissions.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SysPermissionsDeleteOne{builder}
}

// Query returns a query builder for SysPermissions.
func (c *SysPermissionsClient) Query() *SysPermissionsQuery {
	return &SysPermissionsQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSysPermissions},
		inters: c.Interceptors(),
	}
}

// Get returns a SysPermissions entity by its id.
func (c *SysPermissionsClient) Get(ctx context.Context, id int64) (*SysPermissions, error) {
	return c.Query().Where(syspermissions.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SysPermissionsClient) GetX(ctx context.Context, id int64) *SysPermissions {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *SysPermissionsClient) Hooks() []Hook {
	return c.hooks.SysPermissions
}

// Interceptors returns the client interceptors.
func (c *SysPermissionsClient) Interceptors() []Interceptor {
	return c.inters.SysPermissions
}

func (c *SysPermissionsClient) mutate(ctx context.Context, m *SysPermissionsMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SysPermissionsCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SysPermissionsUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SysPermissionsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SysPermissionsDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown SysPermissions mutation op: %q", m.Op())
	}
}

// SysRoleMenuClient is a client for the SysRoleMenu schema.
type SysRoleMenuClient struct {
	config
}

// NewSysRoleMenuClient returns a client for the SysRoleMenu from the given config.
func NewSysRoleMenuClient(c config) *SysRoleMenuClient {
	return &SysRoleMenuClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `sysrolemenu.Hooks(f(g(h())))`.
func (c *SysRoleMenuClient) Use(hooks ...Hook) {
	c.hooks.SysRoleMenu = append(c.hooks.SysRoleMenu, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `sysrolemenu.Intercept(f(g(h())))`.
func (c *SysRoleMenuClient) Intercept(interceptors ...Interceptor) {
	c.inters.SysRoleMenu = append(c.inters.SysRoleMenu, interceptors...)
}

// Create returns a builder for creating a SysRoleMenu entity.
func (c *SysRoleMenuClient) Create() *SysRoleMenuCreate {
	mutation := newSysRoleMenuMutation(c.config, OpCreate)
	return &SysRoleMenuCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SysRoleMenu entities.
func (c *SysRoleMenuClient) CreateBulk(builders ...*SysRoleMenuCreate) *SysRoleMenuCreateBulk {
	return &SysRoleMenuCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SysRoleMenuClient) MapCreateBulk(slice any, setFunc func(*SysRoleMenuCreate, int)) *SysRoleMenuCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SysRoleMenuCreateBulk{err: fmt.Errorf("calling to SysRoleMenuClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SysRoleMenuCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SysRoleMenuCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SysRoleMenu.
func (c *SysRoleMenuClient) Update() *SysRoleMenuUpdate {
	mutation := newSysRoleMenuMutation(c.config, OpUpdate)
	return &SysRoleMenuUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SysRoleMenuClient) UpdateOne(srm *SysRoleMenu) *SysRoleMenuUpdateOne {
	mutation := newSysRoleMenuMutation(c.config, OpUpdateOne, withSysRoleMenu(srm))
	return &SysRoleMenuUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SysRoleMenuClient) UpdateOneID(id int64) *SysRoleMenuUpdateOne {
	mutation := newSysRoleMenuMutation(c.config, OpUpdateOne, withSysRoleMenuID(id))
	return &SysRoleMenuUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SysRoleMenu.
func (c *SysRoleMenuClient) Delete() *SysRoleMenuDelete {
	mutation := newSysRoleMenuMutation(c.config, OpDelete)
	return &SysRoleMenuDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SysRoleMenuClient) DeleteOne(srm *SysRoleMenu) *SysRoleMenuDeleteOne {
	return c.DeleteOneID(srm.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SysRoleMenuClient) DeleteOneID(id int64) *SysRoleMenuDeleteOne {
	builder := c.Delete().Where(sysrolemenu.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SysRoleMenuDeleteOne{builder}
}

// Query returns a query builder for SysRoleMenu.
func (c *SysRoleMenuClient) Query() *SysRoleMenuQuery {
	return &SysRoleMenuQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSysRoleMenu},
		inters: c.Interceptors(),
	}
}

// Get returns a SysRoleMenu entity by its id.
func (c *SysRoleMenuClient) Get(ctx context.Context, id int64) (*SysRoleMenu, error) {
	return c.Query().Where(sysrolemenu.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SysRoleMenuClient) GetX(ctx context.Context, id int64) *SysRoleMenu {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *SysRoleMenuClient) Hooks() []Hook {
	return c.hooks.SysRoleMenu
}

// Interceptors returns the client interceptors.
func (c *SysRoleMenuClient) Interceptors() []Interceptor {
	return c.inters.SysRoleMenu
}

func (c *SysRoleMenuClient) mutate(ctx context.Context, m *SysRoleMenuMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SysRoleMenuCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SysRoleMenuUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SysRoleMenuUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SysRoleMenuDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown SysRoleMenu mutation op: %q", m.Op())
	}
}

// SysRolePermissionsClient is a client for the SysRolePermissions schema.
type SysRolePermissionsClient struct {
	config
}

// NewSysRolePermissionsClient returns a client for the SysRolePermissions from the given config.
func NewSysRolePermissionsClient(c config) *SysRolePermissionsClient {
	return &SysRolePermissionsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `sysrolepermissions.Hooks(f(g(h())))`.
func (c *SysRolePermissionsClient) Use(hooks ...Hook) {
	c.hooks.SysRolePermissions = append(c.hooks.SysRolePermissions, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `sysrolepermissions.Intercept(f(g(h())))`.
func (c *SysRolePermissionsClient) Intercept(interceptors ...Interceptor) {
	c.inters.SysRolePermissions = append(c.inters.SysRolePermissions, interceptors...)
}

// Create returns a builder for creating a SysRolePermissions entity.
func (c *SysRolePermissionsClient) Create() *SysRolePermissionsCreate {
	mutation := newSysRolePermissionsMutation(c.config, OpCreate)
	return &SysRolePermissionsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SysRolePermissions entities.
func (c *SysRolePermissionsClient) CreateBulk(builders ...*SysRolePermissionsCreate) *SysRolePermissionsCreateBulk {
	return &SysRolePermissionsCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SysRolePermissionsClient) MapCreateBulk(slice any, setFunc func(*SysRolePermissionsCreate, int)) *SysRolePermissionsCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SysRolePermissionsCreateBulk{err: fmt.Errorf("calling to SysRolePermissionsClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SysRolePermissionsCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SysRolePermissionsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SysRolePermissions.
func (c *SysRolePermissionsClient) Update() *SysRolePermissionsUpdate {
	mutation := newSysRolePermissionsMutation(c.config, OpUpdate)
	return &SysRolePermissionsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SysRolePermissionsClient) UpdateOne(srp *SysRolePermissions) *SysRolePermissionsUpdateOne {
	mutation := newSysRolePermissionsMutation(c.config, OpUpdateOne, withSysRolePermissions(srp))
	return &SysRolePermissionsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SysRolePermissionsClient) UpdateOneID(id int64) *SysRolePermissionsUpdateOne {
	mutation := newSysRolePermissionsMutation(c.config, OpUpdateOne, withSysRolePermissionsID(id))
	return &SysRolePermissionsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SysRolePermissions.
func (c *SysRolePermissionsClient) Delete() *SysRolePermissionsDelete {
	mutation := newSysRolePermissionsMutation(c.config, OpDelete)
	return &SysRolePermissionsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SysRolePermissionsClient) DeleteOne(srp *SysRolePermissions) *SysRolePermissionsDeleteOne {
	return c.DeleteOneID(srp.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SysRolePermissionsClient) DeleteOneID(id int64) *SysRolePermissionsDeleteOne {
	builder := c.Delete().Where(sysrolepermissions.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SysRolePermissionsDeleteOne{builder}
}

// Query returns a query builder for SysRolePermissions.
func (c *SysRolePermissionsClient) Query() *SysRolePermissionsQuery {
	return &SysRolePermissionsQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSysRolePermissions},
		inters: c.Interceptors(),
	}
}

// Get returns a SysRolePermissions entity by its id.
func (c *SysRolePermissionsClient) Get(ctx context.Context, id int64) (*SysRolePermissions, error) {
	return c.Query().Where(sysrolepermissions.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SysRolePermissionsClient) GetX(ctx context.Context, id int64) *SysRolePermissions {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *SysRolePermissionsClient) Hooks() []Hook {
	return c.hooks.SysRolePermissions
}

// Interceptors returns the client interceptors.
func (c *SysRolePermissionsClient) Interceptors() []Interceptor {
	return c.inters.SysRolePermissions
}

func (c *SysRolePermissionsClient) mutate(ctx context.Context, m *SysRolePermissionsMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SysRolePermissionsCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SysRolePermissionsUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SysRolePermissionsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SysRolePermissionsDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown SysRolePermissions mutation op: %q", m.Op())
	}
}

// SysRoleUsersClient is a client for the SysRoleUsers schema.
type SysRoleUsersClient struct {
	config
}

// NewSysRoleUsersClient returns a client for the SysRoleUsers from the given config.
func NewSysRoleUsersClient(c config) *SysRoleUsersClient {
	return &SysRoleUsersClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `sysroleusers.Hooks(f(g(h())))`.
func (c *SysRoleUsersClient) Use(hooks ...Hook) {
	c.hooks.SysRoleUsers = append(c.hooks.SysRoleUsers, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `sysroleusers.Intercept(f(g(h())))`.
func (c *SysRoleUsersClient) Intercept(interceptors ...Interceptor) {
	c.inters.SysRoleUsers = append(c.inters.SysRoleUsers, interceptors...)
}

// Create returns a builder for creating a SysRoleUsers entity.
func (c *SysRoleUsersClient) Create() *SysRoleUsersCreate {
	mutation := newSysRoleUsersMutation(c.config, OpCreate)
	return &SysRoleUsersCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SysRoleUsers entities.
func (c *SysRoleUsersClient) CreateBulk(builders ...*SysRoleUsersCreate) *SysRoleUsersCreateBulk {
	return &SysRoleUsersCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SysRoleUsersClient) MapCreateBulk(slice any, setFunc func(*SysRoleUsersCreate, int)) *SysRoleUsersCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SysRoleUsersCreateBulk{err: fmt.Errorf("calling to SysRoleUsersClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SysRoleUsersCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SysRoleUsersCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SysRoleUsers.
func (c *SysRoleUsersClient) Update() *SysRoleUsersUpdate {
	mutation := newSysRoleUsersMutation(c.config, OpUpdate)
	return &SysRoleUsersUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SysRoleUsersClient) UpdateOne(sru *SysRoleUsers) *SysRoleUsersUpdateOne {
	mutation := newSysRoleUsersMutation(c.config, OpUpdateOne, withSysRoleUsers(sru))
	return &SysRoleUsersUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SysRoleUsersClient) UpdateOneID(id int32) *SysRoleUsersUpdateOne {
	mutation := newSysRoleUsersMutation(c.config, OpUpdateOne, withSysRoleUsersID(id))
	return &SysRoleUsersUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SysRoleUsers.
func (c *SysRoleUsersClient) Delete() *SysRoleUsersDelete {
	mutation := newSysRoleUsersMutation(c.config, OpDelete)
	return &SysRoleUsersDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SysRoleUsersClient) DeleteOne(sru *SysRoleUsers) *SysRoleUsersDeleteOne {
	return c.DeleteOneID(sru.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SysRoleUsersClient) DeleteOneID(id int32) *SysRoleUsersDeleteOne {
	builder := c.Delete().Where(sysroleusers.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SysRoleUsersDeleteOne{builder}
}

// Query returns a query builder for SysRoleUsers.
func (c *SysRoleUsersClient) Query() *SysRoleUsersQuery {
	return &SysRoleUsersQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSysRoleUsers},
		inters: c.Interceptors(),
	}
}

// Get returns a SysRoleUsers entity by its id.
func (c *SysRoleUsersClient) Get(ctx context.Context, id int32) (*SysRoleUsers, error) {
	return c.Query().Where(sysroleusers.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SysRoleUsersClient) GetX(ctx context.Context, id int32) *SysRoleUsers {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *SysRoleUsersClient) Hooks() []Hook {
	return c.hooks.SysRoleUsers
}

// Interceptors returns the client interceptors.
func (c *SysRoleUsersClient) Interceptors() []Interceptor {
	return c.inters.SysRoleUsers
}

func (c *SysRoleUsersClient) mutate(ctx context.Context, m *SysRoleUsersMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SysRoleUsersCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SysRoleUsersUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SysRoleUsersUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SysRoleUsersDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown SysRoleUsers mutation op: %q", m.Op())
	}
}

// SysRolesClient is a client for the SysRoles schema.
type SysRolesClient struct {
	config
}

// NewSysRolesClient returns a client for the SysRoles from the given config.
func NewSysRolesClient(c config) *SysRolesClient {
	return &SysRolesClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `sysroles.Hooks(f(g(h())))`.
func (c *SysRolesClient) Use(hooks ...Hook) {
	c.hooks.SysRoles = append(c.hooks.SysRoles, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `sysroles.Intercept(f(g(h())))`.
func (c *SysRolesClient) Intercept(interceptors ...Interceptor) {
	c.inters.SysRoles = append(c.inters.SysRoles, interceptors...)
}

// Create returns a builder for creating a SysRoles entity.
func (c *SysRolesClient) Create() *SysRolesCreate {
	mutation := newSysRolesMutation(c.config, OpCreate)
	return &SysRolesCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SysRoles entities.
func (c *SysRolesClient) CreateBulk(builders ...*SysRolesCreate) *SysRolesCreateBulk {
	return &SysRolesCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SysRolesClient) MapCreateBulk(slice any, setFunc func(*SysRolesCreate, int)) *SysRolesCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SysRolesCreateBulk{err: fmt.Errorf("calling to SysRolesClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SysRolesCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SysRolesCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SysRoles.
func (c *SysRolesClient) Update() *SysRolesUpdate {
	mutation := newSysRolesMutation(c.config, OpUpdate)
	return &SysRolesUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SysRolesClient) UpdateOne(sr *SysRoles) *SysRolesUpdateOne {
	mutation := newSysRolesMutation(c.config, OpUpdateOne, withSysRoles(sr))
	return &SysRolesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SysRolesClient) UpdateOneID(id int64) *SysRolesUpdateOne {
	mutation := newSysRolesMutation(c.config, OpUpdateOne, withSysRolesID(id))
	return &SysRolesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SysRoles.
func (c *SysRolesClient) Delete() *SysRolesDelete {
	mutation := newSysRolesMutation(c.config, OpDelete)
	return &SysRolesDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SysRolesClient) DeleteOne(sr *SysRoles) *SysRolesDeleteOne {
	return c.DeleteOneID(sr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SysRolesClient) DeleteOneID(id int64) *SysRolesDeleteOne {
	builder := c.Delete().Where(sysroles.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SysRolesDeleteOne{builder}
}

// Query returns a query builder for SysRoles.
func (c *SysRolesClient) Query() *SysRolesQuery {
	return &SysRolesQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSysRoles},
		inters: c.Interceptors(),
	}
}

// Get returns a SysRoles entity by its id.
func (c *SysRolesClient) Get(ctx context.Context, id int64) (*SysRoles, error) {
	return c.Query().Where(sysroles.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SysRolesClient) GetX(ctx context.Context, id int64) *SysRoles {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *SysRolesClient) Hooks() []Hook {
	return c.hooks.SysRoles
}

// Interceptors returns the client interceptors.
func (c *SysRolesClient) Interceptors() []Interceptor {
	return c.inters.SysRoles
}

func (c *SysRolesClient) mutate(ctx context.Context, m *SysRolesMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SysRolesCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SysRolesUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SysRolesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SysRolesDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown SysRoles mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserClient) MapCreateBulk(slice any, setFunc func(*UserCreate, int)) *UserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserCreateBulk{err: fmt.Errorf("calling to UserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int64) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id int64) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int64) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int64) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		MerchantChannelBind, MerchantList, SysMenu, SysPermissions, SysRoleMenu,
		SysRolePermissions, SysRoleUsers, SysRoles, User []ent.Hook
	}
	inters struct {
		MerchantChannelBind, MerchantList, SysMenu, SysPermissions, SysRoleMenu,
		SysRolePermissions, SysRoleUsers, SysRoles, User []ent.Interceptor
	}
)
