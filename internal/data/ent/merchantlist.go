// Code generated by ent, DO NOT EDIT.

package ent

import (
	"back-end/merchant/internal/data/ent/merchantlist"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// MerchantList is the model entity for the MerchantList schema.
type MerchantList struct {
	config `json:"-"`
	// ID of the ent.
	ID int32 `json:"id,omitempty"`
	// GUID holds the value of the "guid" field.
	GUID string `json:"guid,omitempty"`
	//  商户名称
	Name string `json:"name,omitempty"`
	// 站点域名
	Host string `json:"host,omitempty"`
	// ManageHost holds the value of the "manage_host" field.
	ManageHost string `json:"manage_host,omitempty"`
	// Status holds the value of the "status" field.
	Status int16 `json:"status,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime int32 `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime   int32 `json:"update_time,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MerchantList) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case merchantlist.FieldID, merchantlist.FieldStatus, merchantlist.FieldCreateTime, merchantlist.FieldUpdateTime:
			values[i] = new(sql.NullInt64)
		case merchantlist.FieldGUID, merchantlist.FieldName, merchantlist.FieldHost, merchantlist.FieldManageHost:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MerchantList fields.
func (ml *MerchantList) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case merchantlist.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ml.ID = int32(value.Int64)
		case merchantlist.FieldGUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field guid", values[i])
			} else if value.Valid {
				ml.GUID = value.String
			}
		case merchantlist.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ml.Name = value.String
			}
		case merchantlist.FieldHost:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field host", values[i])
			} else if value.Valid {
				ml.Host = value.String
			}
		case merchantlist.FieldManageHost:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field manage_host", values[i])
			} else if value.Valid {
				ml.ManageHost = value.String
			}
		case merchantlist.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				ml.Status = int16(value.Int64)
			}
		case merchantlist.FieldCreateTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				ml.CreateTime = int32(value.Int64)
			}
		case merchantlist.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				ml.UpdateTime = int32(value.Int64)
			}
		default:
			ml.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the MerchantList.
// This includes values selected through modifiers, order, etc.
func (ml *MerchantList) Value(name string) (ent.Value, error) {
	return ml.selectValues.Get(name)
}

// Update returns a builder for updating this MerchantList.
// Note that you need to call MerchantList.Unwrap() before calling this method if this MerchantList
// was returned from a transaction, and the transaction was committed or rolled back.
func (ml *MerchantList) Update() *MerchantListUpdateOne {
	return NewMerchantListClient(ml.config).UpdateOne(ml)
}

// Unwrap unwraps the MerchantList entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ml *MerchantList) Unwrap() *MerchantList {
	_tx, ok := ml.config.driver.(*txDriver)
	if !ok {
		panic("ent: MerchantList is not a transactional entity")
	}
	ml.config.driver = _tx.drv
	return ml
}

// String implements the fmt.Stringer.
func (ml *MerchantList) String() string {
	var builder strings.Builder
	builder.WriteString("MerchantList(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ml.ID))
	builder.WriteString("guid=")
	builder.WriteString(ml.GUID)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(ml.Name)
	builder.WriteString(", ")
	builder.WriteString("host=")
	builder.WriteString(ml.Host)
	builder.WriteString(", ")
	builder.WriteString("manage_host=")
	builder.WriteString(ml.ManageHost)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", ml.Status))
	builder.WriteString(", ")
	builder.WriteString("create_time=")
	builder.WriteString(fmt.Sprintf("%v", ml.CreateTime))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(fmt.Sprintf("%v", ml.UpdateTime))
	builder.WriteByte(')')
	return builder.String()
}

// MerchantLists is a parsable slice of MerchantList.
type MerchantLists []*MerchantList
