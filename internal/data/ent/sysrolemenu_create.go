// Code generated by ent, DO NOT EDIT.

package ent

import (
	"back-end/merchant/internal/data/ent/sysrolemenu"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SysRoleMenuCreate is the builder for creating a SysRoleMenu entity.
type SysRoleMenuCreate struct {
	config
	mutation *SysRoleMenuMutation
	hooks    []Hook
}

// SetRoleID sets the "role_id" field.
func (srmc *SysRoleMenuCreate) SetRoleID(i int64) *SysRoleMenuCreate {
	srmc.mutation.SetRoleID(i)
	return srmc
}

// SetMenuID sets the "menu_id" field.
func (srmc *SysRoleMenuCreate) SetMenuID(i int64) *SysRoleMenuCreate {
	srmc.mutation.SetMenuID(i)
	return srmc
}

// SetCreateTime sets the "create_time" field.
func (srmc *SysRoleMenuCreate) SetCreateTime(i int32) *SysRoleMenuCreate {
	srmc.mutation.SetCreateTime(i)
	return srmc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (srmc *SysRoleMenuCreate) SetNillableCreateTime(i *int32) *SysRoleMenuCreate {
	if i != nil {
		srmc.SetCreateTime(*i)
	}
	return srmc
}

// SetUpdateTime sets the "update_time" field.
func (srmc *SysRoleMenuCreate) SetUpdateTime(i int32) *SysRoleMenuCreate {
	srmc.mutation.SetUpdateTime(i)
	return srmc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (srmc *SysRoleMenuCreate) SetNillableUpdateTime(i *int32) *SysRoleMenuCreate {
	if i != nil {
		srmc.SetUpdateTime(*i)
	}
	return srmc
}

// SetID sets the "id" field.
func (srmc *SysRoleMenuCreate) SetID(i int64) *SysRoleMenuCreate {
	srmc.mutation.SetID(i)
	return srmc
}

// Mutation returns the SysRoleMenuMutation object of the builder.
func (srmc *SysRoleMenuCreate) Mutation() *SysRoleMenuMutation {
	return srmc.mutation
}

// Save creates the SysRoleMenu in the database.
func (srmc *SysRoleMenuCreate) Save(ctx context.Context) (*SysRoleMenu, error) {
	srmc.defaults()
	return withHooks(ctx, srmc.sqlSave, srmc.mutation, srmc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (srmc *SysRoleMenuCreate) SaveX(ctx context.Context) *SysRoleMenu {
	v, err := srmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (srmc *SysRoleMenuCreate) Exec(ctx context.Context) error {
	_, err := srmc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (srmc *SysRoleMenuCreate) ExecX(ctx context.Context) {
	if err := srmc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (srmc *SysRoleMenuCreate) defaults() {
	if _, ok := srmc.mutation.CreateTime(); !ok {
		v := sysrolemenu.DefaultCreateTime
		srmc.mutation.SetCreateTime(v)
	}
	if _, ok := srmc.mutation.UpdateTime(); !ok {
		v := sysrolemenu.DefaultUpdateTime
		srmc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (srmc *SysRoleMenuCreate) check() error {
	if _, ok := srmc.mutation.RoleID(); !ok {
		return &ValidationError{Name: "role_id", err: errors.New(`ent: missing required field "SysRoleMenu.role_id"`)}
	}
	if _, ok := srmc.mutation.MenuID(); !ok {
		return &ValidationError{Name: "menu_id", err: errors.New(`ent: missing required field "SysRoleMenu.menu_id"`)}
	}
	if _, ok := srmc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "SysRoleMenu.create_time"`)}
	}
	if _, ok := srmc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "SysRoleMenu.update_time"`)}
	}
	return nil
}

func (srmc *SysRoleMenuCreate) sqlSave(ctx context.Context) (*SysRoleMenu, error) {
	if err := srmc.check(); err != nil {
		return nil, err
	}
	_node, _spec := srmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, srmc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	srmc.mutation.id = &_node.ID
	srmc.mutation.done = true
	return _node, nil
}

func (srmc *SysRoleMenuCreate) createSpec() (*SysRoleMenu, *sqlgraph.CreateSpec) {
	var (
		_node = &SysRoleMenu{config: srmc.config}
		_spec = sqlgraph.NewCreateSpec(sysrolemenu.Table, sqlgraph.NewFieldSpec(sysrolemenu.FieldID, field.TypeInt64))
	)
	if id, ok := srmc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := srmc.mutation.RoleID(); ok {
		_spec.SetField(sysrolemenu.FieldRoleID, field.TypeInt64, value)
		_node.RoleID = value
	}
	if value, ok := srmc.mutation.MenuID(); ok {
		_spec.SetField(sysrolemenu.FieldMenuID, field.TypeInt64, value)
		_node.MenuID = value
	}
	if value, ok := srmc.mutation.CreateTime(); ok {
		_spec.SetField(sysrolemenu.FieldCreateTime, field.TypeInt32, value)
		_node.CreateTime = value
	}
	if value, ok := srmc.mutation.UpdateTime(); ok {
		_spec.SetField(sysrolemenu.FieldUpdateTime, field.TypeInt32, value)
		_node.UpdateTime = value
	}
	return _node, _spec
}

// SysRoleMenuCreateBulk is the builder for creating many SysRoleMenu entities in bulk.
type SysRoleMenuCreateBulk struct {
	config
	err      error
	builders []*SysRoleMenuCreate
}

// Save creates the SysRoleMenu entities in the database.
func (srmcb *SysRoleMenuCreateBulk) Save(ctx context.Context) ([]*SysRoleMenu, error) {
	if srmcb.err != nil {
		return nil, srmcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(srmcb.builders))
	nodes := make([]*SysRoleMenu, len(srmcb.builders))
	mutators := make([]Mutator, len(srmcb.builders))
	for i := range srmcb.builders {
		func(i int, root context.Context) {
			builder := srmcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SysRoleMenuMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, srmcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, srmcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, srmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (srmcb *SysRoleMenuCreateBulk) SaveX(ctx context.Context) []*SysRoleMenu {
	v, err := srmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (srmcb *SysRoleMenuCreateBulk) Exec(ctx context.Context) error {
	_, err := srmcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (srmcb *SysRoleMenuCreateBulk) ExecX(ctx context.Context) {
	if err := srmcb.Exec(ctx); err != nil {
		panic(err)
	}
}
