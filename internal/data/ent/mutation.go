// Code generated by ent, DO NOT EDIT.

package ent

import (
	"back-end/merchant/internal/data/ent/merchantchannelbind"
	"back-end/merchant/internal/data/ent/merchantlist"
	"back-end/merchant/internal/data/ent/predicate"
	"back-end/merchant/internal/data/ent/sysmenu"
	"back-end/merchant/internal/data/ent/syspermissions"
	"back-end/merchant/internal/data/ent/sysrolemenu"
	"back-end/merchant/internal/data/ent/sysrolepermissions"
	"back-end/merchant/internal/data/ent/sysroles"
	"back-end/merchant/internal/data/ent/sysroleusers"
	"back-end/merchant/internal/data/ent/user"
	"context"
	"errors"
	"fmt"
	"sync"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeMerchantChannelBind = "MerchantChannelBind"
	TypeMerchantList        = "MerchantList"
	TypeSysMenu             = "SysMenu"
	TypeSysPermissions      = "SysPermissions"
	TypeSysRoleMenu         = "SysRoleMenu"
	TypeSysRolePermissions  = "SysRolePermissions"
	TypeSysRoleUsers        = "SysRoleUsers"
	TypeSysRoles            = "SysRoles"
	TypeUser                = "User"
)

// MerchantChannelBindMutation represents an operation that mutates the MerchantChannelBind nodes in the graph.
type MerchantChannelBindMutation struct {
	config
	op             Op
	typ            string
	id             *int32
	merchant_id    *int32
	addmerchant_id *int32
	channel_id     *int32
	addchannel_id  *int32
	status         *int16
	addstatus      *int16
	create_time    *int32
	addcreate_time *int32
	update_time    *int32
	addupdate_time *int32
	clearedFields  map[string]struct{}
	done           bool
	oldValue       func(context.Context) (*MerchantChannelBind, error)
	predicates     []predicate.MerchantChannelBind
}

var _ ent.Mutation = (*MerchantChannelBindMutation)(nil)

// merchantchannelbindOption allows management of the mutation configuration using functional options.
type merchantchannelbindOption func(*MerchantChannelBindMutation)

// newMerchantChannelBindMutation creates new mutation for the MerchantChannelBind entity.
func newMerchantChannelBindMutation(c config, op Op, opts ...merchantchannelbindOption) *MerchantChannelBindMutation {
	m := &MerchantChannelBindMutation{
		config:        c,
		op:            op,
		typ:           TypeMerchantChannelBind,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMerchantChannelBindID sets the ID field of the mutation.
func withMerchantChannelBindID(id int32) merchantchannelbindOption {
	return func(m *MerchantChannelBindMutation) {
		var (
			err   error
			once  sync.Once
			value *MerchantChannelBind
		)
		m.oldValue = func(ctx context.Context) (*MerchantChannelBind, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().MerchantChannelBind.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMerchantChannelBind sets the old MerchantChannelBind of the mutation.
func withMerchantChannelBind(node *MerchantChannelBind) merchantchannelbindOption {
	return func(m *MerchantChannelBindMutation) {
		m.oldValue = func(context.Context) (*MerchantChannelBind, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MerchantChannelBindMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MerchantChannelBindMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of MerchantChannelBind entities.
func (m *MerchantChannelBindMutation) SetID(id int32) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MerchantChannelBindMutation) ID() (id int32, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *MerchantChannelBindMutation) IDs(ctx context.Context) ([]int32, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int32{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().MerchantChannelBind.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetMerchantID sets the "merchant_id" field.
func (m *MerchantChannelBindMutation) SetMerchantID(i int32) {
	m.merchant_id = &i
	m.addmerchant_id = nil
}

// MerchantID returns the value of the "merchant_id" field in the mutation.
func (m *MerchantChannelBindMutation) MerchantID() (r int32, exists bool) {
	v := m.merchant_id
	if v == nil {
		return
	}
	return *v, true
}

// OldMerchantID returns the old "merchant_id" field's value of the MerchantChannelBind entity.
// If the MerchantChannelBind object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MerchantChannelBindMutation) OldMerchantID(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMerchantID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMerchantID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMerchantID: %w", err)
	}
	return oldValue.MerchantID, nil
}

// AddMerchantID adds i to the "merchant_id" field.
func (m *MerchantChannelBindMutation) AddMerchantID(i int32) {
	if m.addmerchant_id != nil {
		*m.addmerchant_id += i
	} else {
		m.addmerchant_id = &i
	}
}

// AddedMerchantID returns the value that was added to the "merchant_id" field in this mutation.
func (m *MerchantChannelBindMutation) AddedMerchantID() (r int32, exists bool) {
	v := m.addmerchant_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetMerchantID resets all changes to the "merchant_id" field.
func (m *MerchantChannelBindMutation) ResetMerchantID() {
	m.merchant_id = nil
	m.addmerchant_id = nil
}

// SetChannelID sets the "channel_id" field.
func (m *MerchantChannelBindMutation) SetChannelID(i int32) {
	m.channel_id = &i
	m.addchannel_id = nil
}

// ChannelID returns the value of the "channel_id" field in the mutation.
func (m *MerchantChannelBindMutation) ChannelID() (r int32, exists bool) {
	v := m.channel_id
	if v == nil {
		return
	}
	return *v, true
}

// OldChannelID returns the old "channel_id" field's value of the MerchantChannelBind entity.
// If the MerchantChannelBind object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MerchantChannelBindMutation) OldChannelID(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldChannelID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldChannelID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldChannelID: %w", err)
	}
	return oldValue.ChannelID, nil
}

// AddChannelID adds i to the "channel_id" field.
func (m *MerchantChannelBindMutation) AddChannelID(i int32) {
	if m.addchannel_id != nil {
		*m.addchannel_id += i
	} else {
		m.addchannel_id = &i
	}
}

// AddedChannelID returns the value that was added to the "channel_id" field in this mutation.
func (m *MerchantChannelBindMutation) AddedChannelID() (r int32, exists bool) {
	v := m.addchannel_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetChannelID resets all changes to the "channel_id" field.
func (m *MerchantChannelBindMutation) ResetChannelID() {
	m.channel_id = nil
	m.addchannel_id = nil
}

// SetStatus sets the "status" field.
func (m *MerchantChannelBindMutation) SetStatus(i int16) {
	m.status = &i
	m.addstatus = nil
}

// Status returns the value of the "status" field in the mutation.
func (m *MerchantChannelBindMutation) Status() (r int16, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the MerchantChannelBind entity.
// If the MerchantChannelBind object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MerchantChannelBindMutation) OldStatus(ctx context.Context) (v int16, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// AddStatus adds i to the "status" field.
func (m *MerchantChannelBindMutation) AddStatus(i int16) {
	if m.addstatus != nil {
		*m.addstatus += i
	} else {
		m.addstatus = &i
	}
}

// AddedStatus returns the value that was added to the "status" field in this mutation.
func (m *MerchantChannelBindMutation) AddedStatus() (r int16, exists bool) {
	v := m.addstatus
	if v == nil {
		return
	}
	return *v, true
}

// ResetStatus resets all changes to the "status" field.
func (m *MerchantChannelBindMutation) ResetStatus() {
	m.status = nil
	m.addstatus = nil
}

// SetCreateTime sets the "create_time" field.
func (m *MerchantChannelBindMutation) SetCreateTime(i int32) {
	m.create_time = &i
	m.addcreate_time = nil
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *MerchantChannelBindMutation) CreateTime() (r int32, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the MerchantChannelBind entity.
// If the MerchantChannelBind object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MerchantChannelBindMutation) OldCreateTime(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// AddCreateTime adds i to the "create_time" field.
func (m *MerchantChannelBindMutation) AddCreateTime(i int32) {
	if m.addcreate_time != nil {
		*m.addcreate_time += i
	} else {
		m.addcreate_time = &i
	}
}

// AddedCreateTime returns the value that was added to the "create_time" field in this mutation.
func (m *MerchantChannelBindMutation) AddedCreateTime() (r int32, exists bool) {
	v := m.addcreate_time
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *MerchantChannelBindMutation) ResetCreateTime() {
	m.create_time = nil
	m.addcreate_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *MerchantChannelBindMutation) SetUpdateTime(i int32) {
	m.update_time = &i
	m.addupdate_time = nil
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *MerchantChannelBindMutation) UpdateTime() (r int32, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the MerchantChannelBind entity.
// If the MerchantChannelBind object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MerchantChannelBindMutation) OldUpdateTime(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// AddUpdateTime adds i to the "update_time" field.
func (m *MerchantChannelBindMutation) AddUpdateTime(i int32) {
	if m.addupdate_time != nil {
		*m.addupdate_time += i
	} else {
		m.addupdate_time = &i
	}
}

// AddedUpdateTime returns the value that was added to the "update_time" field in this mutation.
func (m *MerchantChannelBindMutation) AddedUpdateTime() (r int32, exists bool) {
	v := m.addupdate_time
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *MerchantChannelBindMutation) ResetUpdateTime() {
	m.update_time = nil
	m.addupdate_time = nil
}

// Where appends a list predicates to the MerchantChannelBindMutation builder.
func (m *MerchantChannelBindMutation) Where(ps ...predicate.MerchantChannelBind) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the MerchantChannelBindMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *MerchantChannelBindMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.MerchantChannelBind, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *MerchantChannelBindMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *MerchantChannelBindMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (MerchantChannelBind).
func (m *MerchantChannelBindMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MerchantChannelBindMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.merchant_id != nil {
		fields = append(fields, merchantchannelbind.FieldMerchantID)
	}
	if m.channel_id != nil {
		fields = append(fields, merchantchannelbind.FieldChannelID)
	}
	if m.status != nil {
		fields = append(fields, merchantchannelbind.FieldStatus)
	}
	if m.create_time != nil {
		fields = append(fields, merchantchannelbind.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, merchantchannelbind.FieldUpdateTime)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MerchantChannelBindMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case merchantchannelbind.FieldMerchantID:
		return m.MerchantID()
	case merchantchannelbind.FieldChannelID:
		return m.ChannelID()
	case merchantchannelbind.FieldStatus:
		return m.Status()
	case merchantchannelbind.FieldCreateTime:
		return m.CreateTime()
	case merchantchannelbind.FieldUpdateTime:
		return m.UpdateTime()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MerchantChannelBindMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case merchantchannelbind.FieldMerchantID:
		return m.OldMerchantID(ctx)
	case merchantchannelbind.FieldChannelID:
		return m.OldChannelID(ctx)
	case merchantchannelbind.FieldStatus:
		return m.OldStatus(ctx)
	case merchantchannelbind.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case merchantchannelbind.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	}
	return nil, fmt.Errorf("unknown MerchantChannelBind field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MerchantChannelBindMutation) SetField(name string, value ent.Value) error {
	switch name {
	case merchantchannelbind.FieldMerchantID:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMerchantID(v)
		return nil
	case merchantchannelbind.FieldChannelID:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetChannelID(v)
		return nil
	case merchantchannelbind.FieldStatus:
		v, ok := value.(int16)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case merchantchannelbind.FieldCreateTime:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case merchantchannelbind.FieldUpdateTime:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	}
	return fmt.Errorf("unknown MerchantChannelBind field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MerchantChannelBindMutation) AddedFields() []string {
	var fields []string
	if m.addmerchant_id != nil {
		fields = append(fields, merchantchannelbind.FieldMerchantID)
	}
	if m.addchannel_id != nil {
		fields = append(fields, merchantchannelbind.FieldChannelID)
	}
	if m.addstatus != nil {
		fields = append(fields, merchantchannelbind.FieldStatus)
	}
	if m.addcreate_time != nil {
		fields = append(fields, merchantchannelbind.FieldCreateTime)
	}
	if m.addupdate_time != nil {
		fields = append(fields, merchantchannelbind.FieldUpdateTime)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MerchantChannelBindMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case merchantchannelbind.FieldMerchantID:
		return m.AddedMerchantID()
	case merchantchannelbind.FieldChannelID:
		return m.AddedChannelID()
	case merchantchannelbind.FieldStatus:
		return m.AddedStatus()
	case merchantchannelbind.FieldCreateTime:
		return m.AddedCreateTime()
	case merchantchannelbind.FieldUpdateTime:
		return m.AddedUpdateTime()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MerchantChannelBindMutation) AddField(name string, value ent.Value) error {
	switch name {
	case merchantchannelbind.FieldMerchantID:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMerchantID(v)
		return nil
	case merchantchannelbind.FieldChannelID:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddChannelID(v)
		return nil
	case merchantchannelbind.FieldStatus:
		v, ok := value.(int16)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStatus(v)
		return nil
	case merchantchannelbind.FieldCreateTime:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreateTime(v)
		return nil
	case merchantchannelbind.FieldUpdateTime:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdateTime(v)
		return nil
	}
	return fmt.Errorf("unknown MerchantChannelBind numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MerchantChannelBindMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MerchantChannelBindMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MerchantChannelBindMutation) ClearField(name string) error {
	return fmt.Errorf("unknown MerchantChannelBind nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MerchantChannelBindMutation) ResetField(name string) error {
	switch name {
	case merchantchannelbind.FieldMerchantID:
		m.ResetMerchantID()
		return nil
	case merchantchannelbind.FieldChannelID:
		m.ResetChannelID()
		return nil
	case merchantchannelbind.FieldStatus:
		m.ResetStatus()
		return nil
	case merchantchannelbind.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case merchantchannelbind.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	}
	return fmt.Errorf("unknown MerchantChannelBind field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MerchantChannelBindMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MerchantChannelBindMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MerchantChannelBindMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MerchantChannelBindMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MerchantChannelBindMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MerchantChannelBindMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MerchantChannelBindMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown MerchantChannelBind unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MerchantChannelBindMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown MerchantChannelBind edge %s", name)
}

// MerchantListMutation represents an operation that mutates the MerchantList nodes in the graph.
type MerchantListMutation struct {
	config
	op             Op
	typ            string
	id             *int32
	guid           *string
	name           *string
	host           *string
	manage_host    *string
	status         *int16
	addstatus      *int16
	create_time    *int32
	addcreate_time *int32
	update_time    *int32
	addupdate_time *int32
	clearedFields  map[string]struct{}
	done           bool
	oldValue       func(context.Context) (*MerchantList, error)
	predicates     []predicate.MerchantList
}

var _ ent.Mutation = (*MerchantListMutation)(nil)

// merchantlistOption allows management of the mutation configuration using functional options.
type merchantlistOption func(*MerchantListMutation)

// newMerchantListMutation creates new mutation for the MerchantList entity.
func newMerchantListMutation(c config, op Op, opts ...merchantlistOption) *MerchantListMutation {
	m := &MerchantListMutation{
		config:        c,
		op:            op,
		typ:           TypeMerchantList,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMerchantListID sets the ID field of the mutation.
func withMerchantListID(id int32) merchantlistOption {
	return func(m *MerchantListMutation) {
		var (
			err   error
			once  sync.Once
			value *MerchantList
		)
		m.oldValue = func(ctx context.Context) (*MerchantList, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().MerchantList.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMerchantList sets the old MerchantList of the mutation.
func withMerchantList(node *MerchantList) merchantlistOption {
	return func(m *MerchantListMutation) {
		m.oldValue = func(context.Context) (*MerchantList, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MerchantListMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MerchantListMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of MerchantList entities.
func (m *MerchantListMutation) SetID(id int32) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MerchantListMutation) ID() (id int32, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *MerchantListMutation) IDs(ctx context.Context) ([]int32, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int32{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().MerchantList.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetGUID sets the "guid" field.
func (m *MerchantListMutation) SetGUID(s string) {
	m.guid = &s
}

// GUID returns the value of the "guid" field in the mutation.
func (m *MerchantListMutation) GUID() (r string, exists bool) {
	v := m.guid
	if v == nil {
		return
	}
	return *v, true
}

// OldGUID returns the old "guid" field's value of the MerchantList entity.
// If the MerchantList object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MerchantListMutation) OldGUID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGUID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGUID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGUID: %w", err)
	}
	return oldValue.GUID, nil
}

// ResetGUID resets all changes to the "guid" field.
func (m *MerchantListMutation) ResetGUID() {
	m.guid = nil
}

// SetName sets the "name" field.
func (m *MerchantListMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *MerchantListMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the MerchantList entity.
// If the MerchantList object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MerchantListMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *MerchantListMutation) ResetName() {
	m.name = nil
}

// SetHost sets the "host" field.
func (m *MerchantListMutation) SetHost(s string) {
	m.host = &s
}

// Host returns the value of the "host" field in the mutation.
func (m *MerchantListMutation) Host() (r string, exists bool) {
	v := m.host
	if v == nil {
		return
	}
	return *v, true
}

// OldHost returns the old "host" field's value of the MerchantList entity.
// If the MerchantList object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MerchantListMutation) OldHost(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHost is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHost requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHost: %w", err)
	}
	return oldValue.Host, nil
}

// ResetHost resets all changes to the "host" field.
func (m *MerchantListMutation) ResetHost() {
	m.host = nil
}

// SetManageHost sets the "manage_host" field.
func (m *MerchantListMutation) SetManageHost(s string) {
	m.manage_host = &s
}

// ManageHost returns the value of the "manage_host" field in the mutation.
func (m *MerchantListMutation) ManageHost() (r string, exists bool) {
	v := m.manage_host
	if v == nil {
		return
	}
	return *v, true
}

// OldManageHost returns the old "manage_host" field's value of the MerchantList entity.
// If the MerchantList object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MerchantListMutation) OldManageHost(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldManageHost is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldManageHost requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldManageHost: %w", err)
	}
	return oldValue.ManageHost, nil
}

// ResetManageHost resets all changes to the "manage_host" field.
func (m *MerchantListMutation) ResetManageHost() {
	m.manage_host = nil
}

// SetStatus sets the "status" field.
func (m *MerchantListMutation) SetStatus(i int16) {
	m.status = &i
	m.addstatus = nil
}

// Status returns the value of the "status" field in the mutation.
func (m *MerchantListMutation) Status() (r int16, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the MerchantList entity.
// If the MerchantList object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MerchantListMutation) OldStatus(ctx context.Context) (v int16, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// AddStatus adds i to the "status" field.
func (m *MerchantListMutation) AddStatus(i int16) {
	if m.addstatus != nil {
		*m.addstatus += i
	} else {
		m.addstatus = &i
	}
}

// AddedStatus returns the value that was added to the "status" field in this mutation.
func (m *MerchantListMutation) AddedStatus() (r int16, exists bool) {
	v := m.addstatus
	if v == nil {
		return
	}
	return *v, true
}

// ResetStatus resets all changes to the "status" field.
func (m *MerchantListMutation) ResetStatus() {
	m.status = nil
	m.addstatus = nil
}

// SetCreateTime sets the "create_time" field.
func (m *MerchantListMutation) SetCreateTime(i int32) {
	m.create_time = &i
	m.addcreate_time = nil
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *MerchantListMutation) CreateTime() (r int32, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the MerchantList entity.
// If the MerchantList object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MerchantListMutation) OldCreateTime(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// AddCreateTime adds i to the "create_time" field.
func (m *MerchantListMutation) AddCreateTime(i int32) {
	if m.addcreate_time != nil {
		*m.addcreate_time += i
	} else {
		m.addcreate_time = &i
	}
}

// AddedCreateTime returns the value that was added to the "create_time" field in this mutation.
func (m *MerchantListMutation) AddedCreateTime() (r int32, exists bool) {
	v := m.addcreate_time
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *MerchantListMutation) ResetCreateTime() {
	m.create_time = nil
	m.addcreate_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *MerchantListMutation) SetUpdateTime(i int32) {
	m.update_time = &i
	m.addupdate_time = nil
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *MerchantListMutation) UpdateTime() (r int32, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the MerchantList entity.
// If the MerchantList object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MerchantListMutation) OldUpdateTime(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// AddUpdateTime adds i to the "update_time" field.
func (m *MerchantListMutation) AddUpdateTime(i int32) {
	if m.addupdate_time != nil {
		*m.addupdate_time += i
	} else {
		m.addupdate_time = &i
	}
}

// AddedUpdateTime returns the value that was added to the "update_time" field in this mutation.
func (m *MerchantListMutation) AddedUpdateTime() (r int32, exists bool) {
	v := m.addupdate_time
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *MerchantListMutation) ResetUpdateTime() {
	m.update_time = nil
	m.addupdate_time = nil
}

// Where appends a list predicates to the MerchantListMutation builder.
func (m *MerchantListMutation) Where(ps ...predicate.MerchantList) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the MerchantListMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *MerchantListMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.MerchantList, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *MerchantListMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *MerchantListMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (MerchantList).
func (m *MerchantListMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MerchantListMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.guid != nil {
		fields = append(fields, merchantlist.FieldGUID)
	}
	if m.name != nil {
		fields = append(fields, merchantlist.FieldName)
	}
	if m.host != nil {
		fields = append(fields, merchantlist.FieldHost)
	}
	if m.manage_host != nil {
		fields = append(fields, merchantlist.FieldManageHost)
	}
	if m.status != nil {
		fields = append(fields, merchantlist.FieldStatus)
	}
	if m.create_time != nil {
		fields = append(fields, merchantlist.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, merchantlist.FieldUpdateTime)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MerchantListMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case merchantlist.FieldGUID:
		return m.GUID()
	case merchantlist.FieldName:
		return m.Name()
	case merchantlist.FieldHost:
		return m.Host()
	case merchantlist.FieldManageHost:
		return m.ManageHost()
	case merchantlist.FieldStatus:
		return m.Status()
	case merchantlist.FieldCreateTime:
		return m.CreateTime()
	case merchantlist.FieldUpdateTime:
		return m.UpdateTime()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MerchantListMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case merchantlist.FieldGUID:
		return m.OldGUID(ctx)
	case merchantlist.FieldName:
		return m.OldName(ctx)
	case merchantlist.FieldHost:
		return m.OldHost(ctx)
	case merchantlist.FieldManageHost:
		return m.OldManageHost(ctx)
	case merchantlist.FieldStatus:
		return m.OldStatus(ctx)
	case merchantlist.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case merchantlist.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	}
	return nil, fmt.Errorf("unknown MerchantList field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MerchantListMutation) SetField(name string, value ent.Value) error {
	switch name {
	case merchantlist.FieldGUID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGUID(v)
		return nil
	case merchantlist.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case merchantlist.FieldHost:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHost(v)
		return nil
	case merchantlist.FieldManageHost:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetManageHost(v)
		return nil
	case merchantlist.FieldStatus:
		v, ok := value.(int16)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case merchantlist.FieldCreateTime:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case merchantlist.FieldUpdateTime:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	}
	return fmt.Errorf("unknown MerchantList field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MerchantListMutation) AddedFields() []string {
	var fields []string
	if m.addstatus != nil {
		fields = append(fields, merchantlist.FieldStatus)
	}
	if m.addcreate_time != nil {
		fields = append(fields, merchantlist.FieldCreateTime)
	}
	if m.addupdate_time != nil {
		fields = append(fields, merchantlist.FieldUpdateTime)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MerchantListMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case merchantlist.FieldStatus:
		return m.AddedStatus()
	case merchantlist.FieldCreateTime:
		return m.AddedCreateTime()
	case merchantlist.FieldUpdateTime:
		return m.AddedUpdateTime()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MerchantListMutation) AddField(name string, value ent.Value) error {
	switch name {
	case merchantlist.FieldStatus:
		v, ok := value.(int16)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStatus(v)
		return nil
	case merchantlist.FieldCreateTime:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreateTime(v)
		return nil
	case merchantlist.FieldUpdateTime:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdateTime(v)
		return nil
	}
	return fmt.Errorf("unknown MerchantList numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MerchantListMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MerchantListMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MerchantListMutation) ClearField(name string) error {
	return fmt.Errorf("unknown MerchantList nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MerchantListMutation) ResetField(name string) error {
	switch name {
	case merchantlist.FieldGUID:
		m.ResetGUID()
		return nil
	case merchantlist.FieldName:
		m.ResetName()
		return nil
	case merchantlist.FieldHost:
		m.ResetHost()
		return nil
	case merchantlist.FieldManageHost:
		m.ResetManageHost()
		return nil
	case merchantlist.FieldStatus:
		m.ResetStatus()
		return nil
	case merchantlist.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case merchantlist.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	}
	return fmt.Errorf("unknown MerchantList field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MerchantListMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MerchantListMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MerchantListMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MerchantListMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MerchantListMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MerchantListMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MerchantListMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown MerchantList unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MerchantListMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown MerchantList edge %s", name)
}

// SysMenuMutation represents an operation that mutates the SysMenu nodes in the graph.
type SysMenuMutation struct {
	config
	op             Op
	typ            string
	id             *int64
	parent_id      *int64
	addparent_id   *int64
	title          *string
	icon           *string
	uri            *string
	show           *int8
	addshow        *int8
	sort           *int32
	addsort        *int32
	create_time    *int32
	addcreate_time *int32
	update_time    *int32
	addupdate_time *int32
	clearedFields  map[string]struct{}
	done           bool
	oldValue       func(context.Context) (*SysMenu, error)
	predicates     []predicate.SysMenu
}

var _ ent.Mutation = (*SysMenuMutation)(nil)

// sysmenuOption allows management of the mutation configuration using functional options.
type sysmenuOption func(*SysMenuMutation)

// newSysMenuMutation creates new mutation for the SysMenu entity.
func newSysMenuMutation(c config, op Op, opts ...sysmenuOption) *SysMenuMutation {
	m := &SysMenuMutation{
		config:        c,
		op:            op,
		typ:           TypeSysMenu,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSysMenuID sets the ID field of the mutation.
func withSysMenuID(id int64) sysmenuOption {
	return func(m *SysMenuMutation) {
		var (
			err   error
			once  sync.Once
			value *SysMenu
		)
		m.oldValue = func(ctx context.Context) (*SysMenu, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().SysMenu.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSysMenu sets the old SysMenu of the mutation.
func withSysMenu(node *SysMenu) sysmenuOption {
	return func(m *SysMenuMutation) {
		m.oldValue = func(context.Context) (*SysMenu, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SysMenuMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SysMenuMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of SysMenu entities.
func (m *SysMenuMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SysMenuMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SysMenuMutation) IDs(ctx context.Context) ([]int64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().SysMenu.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetParentID sets the "parent_id" field.
func (m *SysMenuMutation) SetParentID(i int64) {
	m.parent_id = &i
	m.addparent_id = nil
}

// ParentID returns the value of the "parent_id" field in the mutation.
func (m *SysMenuMutation) ParentID() (r int64, exists bool) {
	v := m.parent_id
	if v == nil {
		return
	}
	return *v, true
}

// OldParentID returns the old "parent_id" field's value of the SysMenu entity.
// If the SysMenu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysMenuMutation) OldParentID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldParentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldParentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldParentID: %w", err)
	}
	return oldValue.ParentID, nil
}

// AddParentID adds i to the "parent_id" field.
func (m *SysMenuMutation) AddParentID(i int64) {
	if m.addparent_id != nil {
		*m.addparent_id += i
	} else {
		m.addparent_id = &i
	}
}

// AddedParentID returns the value that was added to the "parent_id" field in this mutation.
func (m *SysMenuMutation) AddedParentID() (r int64, exists bool) {
	v := m.addparent_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetParentID resets all changes to the "parent_id" field.
func (m *SysMenuMutation) ResetParentID() {
	m.parent_id = nil
	m.addparent_id = nil
}

// SetTitle sets the "title" field.
func (m *SysMenuMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *SysMenuMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the SysMenu entity.
// If the SysMenu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysMenuMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *SysMenuMutation) ResetTitle() {
	m.title = nil
}

// SetIcon sets the "icon" field.
func (m *SysMenuMutation) SetIcon(s string) {
	m.icon = &s
}

// Icon returns the value of the "icon" field in the mutation.
func (m *SysMenuMutation) Icon() (r string, exists bool) {
	v := m.icon
	if v == nil {
		return
	}
	return *v, true
}

// OldIcon returns the old "icon" field's value of the SysMenu entity.
// If the SysMenu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysMenuMutation) OldIcon(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIcon is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIcon requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIcon: %w", err)
	}
	return oldValue.Icon, nil
}

// ClearIcon clears the value of the "icon" field.
func (m *SysMenuMutation) ClearIcon() {
	m.icon = nil
	m.clearedFields[sysmenu.FieldIcon] = struct{}{}
}

// IconCleared returns if the "icon" field was cleared in this mutation.
func (m *SysMenuMutation) IconCleared() bool {
	_, ok := m.clearedFields[sysmenu.FieldIcon]
	return ok
}

// ResetIcon resets all changes to the "icon" field.
func (m *SysMenuMutation) ResetIcon() {
	m.icon = nil
	delete(m.clearedFields, sysmenu.FieldIcon)
}

// SetURI sets the "uri" field.
func (m *SysMenuMutation) SetURI(s string) {
	m.uri = &s
}

// URI returns the value of the "uri" field in the mutation.
func (m *SysMenuMutation) URI() (r string, exists bool) {
	v := m.uri
	if v == nil {
		return
	}
	return *v, true
}

// OldURI returns the old "uri" field's value of the SysMenu entity.
// If the SysMenu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysMenuMutation) OldURI(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldURI is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldURI requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldURI: %w", err)
	}
	return oldValue.URI, nil
}

// ClearURI clears the value of the "uri" field.
func (m *SysMenuMutation) ClearURI() {
	m.uri = nil
	m.clearedFields[sysmenu.FieldURI] = struct{}{}
}

// URICleared returns if the "uri" field was cleared in this mutation.
func (m *SysMenuMutation) URICleared() bool {
	_, ok := m.clearedFields[sysmenu.FieldURI]
	return ok
}

// ResetURI resets all changes to the "uri" field.
func (m *SysMenuMutation) ResetURI() {
	m.uri = nil
	delete(m.clearedFields, sysmenu.FieldURI)
}

// SetShow sets the "show" field.
func (m *SysMenuMutation) SetShow(i int8) {
	m.show = &i
	m.addshow = nil
}

// Show returns the value of the "show" field in the mutation.
func (m *SysMenuMutation) Show() (r int8, exists bool) {
	v := m.show
	if v == nil {
		return
	}
	return *v, true
}

// OldShow returns the old "show" field's value of the SysMenu entity.
// If the SysMenu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysMenuMutation) OldShow(ctx context.Context) (v int8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldShow is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldShow requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldShow: %w", err)
	}
	return oldValue.Show, nil
}

// AddShow adds i to the "show" field.
func (m *SysMenuMutation) AddShow(i int8) {
	if m.addshow != nil {
		*m.addshow += i
	} else {
		m.addshow = &i
	}
}

// AddedShow returns the value that was added to the "show" field in this mutation.
func (m *SysMenuMutation) AddedShow() (r int8, exists bool) {
	v := m.addshow
	if v == nil {
		return
	}
	return *v, true
}

// ResetShow resets all changes to the "show" field.
func (m *SysMenuMutation) ResetShow() {
	m.show = nil
	m.addshow = nil
}

// SetSort sets the "sort" field.
func (m *SysMenuMutation) SetSort(i int32) {
	m.sort = &i
	m.addsort = nil
}

// Sort returns the value of the "sort" field in the mutation.
func (m *SysMenuMutation) Sort() (r int32, exists bool) {
	v := m.sort
	if v == nil {
		return
	}
	return *v, true
}

// OldSort returns the old "sort" field's value of the SysMenu entity.
// If the SysMenu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysMenuMutation) OldSort(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSort is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSort requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSort: %w", err)
	}
	return oldValue.Sort, nil
}

// AddSort adds i to the "sort" field.
func (m *SysMenuMutation) AddSort(i int32) {
	if m.addsort != nil {
		*m.addsort += i
	} else {
		m.addsort = &i
	}
}

// AddedSort returns the value that was added to the "sort" field in this mutation.
func (m *SysMenuMutation) AddedSort() (r int32, exists bool) {
	v := m.addsort
	if v == nil {
		return
	}
	return *v, true
}

// ResetSort resets all changes to the "sort" field.
func (m *SysMenuMutation) ResetSort() {
	m.sort = nil
	m.addsort = nil
}

// SetCreateTime sets the "create_time" field.
func (m *SysMenuMutation) SetCreateTime(i int32) {
	m.create_time = &i
	m.addcreate_time = nil
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *SysMenuMutation) CreateTime() (r int32, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the SysMenu entity.
// If the SysMenu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysMenuMutation) OldCreateTime(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// AddCreateTime adds i to the "create_time" field.
func (m *SysMenuMutation) AddCreateTime(i int32) {
	if m.addcreate_time != nil {
		*m.addcreate_time += i
	} else {
		m.addcreate_time = &i
	}
}

// AddedCreateTime returns the value that was added to the "create_time" field in this mutation.
func (m *SysMenuMutation) AddedCreateTime() (r int32, exists bool) {
	v := m.addcreate_time
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *SysMenuMutation) ResetCreateTime() {
	m.create_time = nil
	m.addcreate_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *SysMenuMutation) SetUpdateTime(i int32) {
	m.update_time = &i
	m.addupdate_time = nil
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *SysMenuMutation) UpdateTime() (r int32, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the SysMenu entity.
// If the SysMenu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysMenuMutation) OldUpdateTime(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// AddUpdateTime adds i to the "update_time" field.
func (m *SysMenuMutation) AddUpdateTime(i int32) {
	if m.addupdate_time != nil {
		*m.addupdate_time += i
	} else {
		m.addupdate_time = &i
	}
}

// AddedUpdateTime returns the value that was added to the "update_time" field in this mutation.
func (m *SysMenuMutation) AddedUpdateTime() (r int32, exists bool) {
	v := m.addupdate_time
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *SysMenuMutation) ResetUpdateTime() {
	m.update_time = nil
	m.addupdate_time = nil
}

// Where appends a list predicates to the SysMenuMutation builder.
func (m *SysMenuMutation) Where(ps ...predicate.SysMenu) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SysMenuMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SysMenuMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.SysMenu, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SysMenuMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SysMenuMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (SysMenu).
func (m *SysMenuMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SysMenuMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.parent_id != nil {
		fields = append(fields, sysmenu.FieldParentID)
	}
	if m.title != nil {
		fields = append(fields, sysmenu.FieldTitle)
	}
	if m.icon != nil {
		fields = append(fields, sysmenu.FieldIcon)
	}
	if m.uri != nil {
		fields = append(fields, sysmenu.FieldURI)
	}
	if m.show != nil {
		fields = append(fields, sysmenu.FieldShow)
	}
	if m.sort != nil {
		fields = append(fields, sysmenu.FieldSort)
	}
	if m.create_time != nil {
		fields = append(fields, sysmenu.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, sysmenu.FieldUpdateTime)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SysMenuMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case sysmenu.FieldParentID:
		return m.ParentID()
	case sysmenu.FieldTitle:
		return m.Title()
	case sysmenu.FieldIcon:
		return m.Icon()
	case sysmenu.FieldURI:
		return m.URI()
	case sysmenu.FieldShow:
		return m.Show()
	case sysmenu.FieldSort:
		return m.Sort()
	case sysmenu.FieldCreateTime:
		return m.CreateTime()
	case sysmenu.FieldUpdateTime:
		return m.UpdateTime()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SysMenuMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case sysmenu.FieldParentID:
		return m.OldParentID(ctx)
	case sysmenu.FieldTitle:
		return m.OldTitle(ctx)
	case sysmenu.FieldIcon:
		return m.OldIcon(ctx)
	case sysmenu.FieldURI:
		return m.OldURI(ctx)
	case sysmenu.FieldShow:
		return m.OldShow(ctx)
	case sysmenu.FieldSort:
		return m.OldSort(ctx)
	case sysmenu.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case sysmenu.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	}
	return nil, fmt.Errorf("unknown SysMenu field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SysMenuMutation) SetField(name string, value ent.Value) error {
	switch name {
	case sysmenu.FieldParentID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetParentID(v)
		return nil
	case sysmenu.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case sysmenu.FieldIcon:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIcon(v)
		return nil
	case sysmenu.FieldURI:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetURI(v)
		return nil
	case sysmenu.FieldShow:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetShow(v)
		return nil
	case sysmenu.FieldSort:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSort(v)
		return nil
	case sysmenu.FieldCreateTime:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case sysmenu.FieldUpdateTime:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	}
	return fmt.Errorf("unknown SysMenu field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SysMenuMutation) AddedFields() []string {
	var fields []string
	if m.addparent_id != nil {
		fields = append(fields, sysmenu.FieldParentID)
	}
	if m.addshow != nil {
		fields = append(fields, sysmenu.FieldShow)
	}
	if m.addsort != nil {
		fields = append(fields, sysmenu.FieldSort)
	}
	if m.addcreate_time != nil {
		fields = append(fields, sysmenu.FieldCreateTime)
	}
	if m.addupdate_time != nil {
		fields = append(fields, sysmenu.FieldUpdateTime)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SysMenuMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case sysmenu.FieldParentID:
		return m.AddedParentID()
	case sysmenu.FieldShow:
		return m.AddedShow()
	case sysmenu.FieldSort:
		return m.AddedSort()
	case sysmenu.FieldCreateTime:
		return m.AddedCreateTime()
	case sysmenu.FieldUpdateTime:
		return m.AddedUpdateTime()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SysMenuMutation) AddField(name string, value ent.Value) error {
	switch name {
	case sysmenu.FieldParentID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddParentID(v)
		return nil
	case sysmenu.FieldShow:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddShow(v)
		return nil
	case sysmenu.FieldSort:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSort(v)
		return nil
	case sysmenu.FieldCreateTime:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreateTime(v)
		return nil
	case sysmenu.FieldUpdateTime:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdateTime(v)
		return nil
	}
	return fmt.Errorf("unknown SysMenu numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SysMenuMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(sysmenu.FieldIcon) {
		fields = append(fields, sysmenu.FieldIcon)
	}
	if m.FieldCleared(sysmenu.FieldURI) {
		fields = append(fields, sysmenu.FieldURI)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SysMenuMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SysMenuMutation) ClearField(name string) error {
	switch name {
	case sysmenu.FieldIcon:
		m.ClearIcon()
		return nil
	case sysmenu.FieldURI:
		m.ClearURI()
		return nil
	}
	return fmt.Errorf("unknown SysMenu nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SysMenuMutation) ResetField(name string) error {
	switch name {
	case sysmenu.FieldParentID:
		m.ResetParentID()
		return nil
	case sysmenu.FieldTitle:
		m.ResetTitle()
		return nil
	case sysmenu.FieldIcon:
		m.ResetIcon()
		return nil
	case sysmenu.FieldURI:
		m.ResetURI()
		return nil
	case sysmenu.FieldShow:
		m.ResetShow()
		return nil
	case sysmenu.FieldSort:
		m.ResetSort()
		return nil
	case sysmenu.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case sysmenu.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	}
	return fmt.Errorf("unknown SysMenu field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SysMenuMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SysMenuMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SysMenuMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SysMenuMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SysMenuMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SysMenuMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SysMenuMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown SysMenu unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SysMenuMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown SysMenu edge %s", name)
}

// SysPermissionsMutation represents an operation that mutates the SysPermissions nodes in the graph.
type SysPermissionsMutation struct {
	config
	op             Op
	typ            string
	id             *int64
	menu_id        *int64
	addmenu_id     *int64
	name           *string
	code           *string
	_path          *string
	command        *string
	create_time    *int32
	addcreate_time *int32
	update_time    *int32
	addupdate_time *int32
	clearedFields  map[string]struct{}
	done           bool
	oldValue       func(context.Context) (*SysPermissions, error)
	predicates     []predicate.SysPermissions
}

var _ ent.Mutation = (*SysPermissionsMutation)(nil)

// syspermissionsOption allows management of the mutation configuration using functional options.
type syspermissionsOption func(*SysPermissionsMutation)

// newSysPermissionsMutation creates new mutation for the SysPermissions entity.
func newSysPermissionsMutation(c config, op Op, opts ...syspermissionsOption) *SysPermissionsMutation {
	m := &SysPermissionsMutation{
		config:        c,
		op:            op,
		typ:           TypeSysPermissions,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSysPermissionsID sets the ID field of the mutation.
func withSysPermissionsID(id int64) syspermissionsOption {
	return func(m *SysPermissionsMutation) {
		var (
			err   error
			once  sync.Once
			value *SysPermissions
		)
		m.oldValue = func(ctx context.Context) (*SysPermissions, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().SysPermissions.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSysPermissions sets the old SysPermissions of the mutation.
func withSysPermissions(node *SysPermissions) syspermissionsOption {
	return func(m *SysPermissionsMutation) {
		m.oldValue = func(context.Context) (*SysPermissions, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SysPermissionsMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SysPermissionsMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of SysPermissions entities.
func (m *SysPermissionsMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SysPermissionsMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SysPermissionsMutation) IDs(ctx context.Context) ([]int64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().SysPermissions.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetMenuID sets the "menu_id" field.
func (m *SysPermissionsMutation) SetMenuID(i int64) {
	m.menu_id = &i
	m.addmenu_id = nil
}

// MenuID returns the value of the "menu_id" field in the mutation.
func (m *SysPermissionsMutation) MenuID() (r int64, exists bool) {
	v := m.menu_id
	if v == nil {
		return
	}
	return *v, true
}

// OldMenuID returns the old "menu_id" field's value of the SysPermissions entity.
// If the SysPermissions object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysPermissionsMutation) OldMenuID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMenuID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMenuID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMenuID: %w", err)
	}
	return oldValue.MenuID, nil
}

// AddMenuID adds i to the "menu_id" field.
func (m *SysPermissionsMutation) AddMenuID(i int64) {
	if m.addmenu_id != nil {
		*m.addmenu_id += i
	} else {
		m.addmenu_id = &i
	}
}

// AddedMenuID returns the value that was added to the "menu_id" field in this mutation.
func (m *SysPermissionsMutation) AddedMenuID() (r int64, exists bool) {
	v := m.addmenu_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetMenuID resets all changes to the "menu_id" field.
func (m *SysPermissionsMutation) ResetMenuID() {
	m.menu_id = nil
	m.addmenu_id = nil
}

// SetName sets the "name" field.
func (m *SysPermissionsMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *SysPermissionsMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the SysPermissions entity.
// If the SysPermissions object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysPermissionsMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *SysPermissionsMutation) ResetName() {
	m.name = nil
}

// SetCode sets the "code" field.
func (m *SysPermissionsMutation) SetCode(s string) {
	m.code = &s
}

// Code returns the value of the "code" field in the mutation.
func (m *SysPermissionsMutation) Code() (r string, exists bool) {
	v := m.code
	if v == nil {
		return
	}
	return *v, true
}

// OldCode returns the old "code" field's value of the SysPermissions entity.
// If the SysPermissions object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysPermissionsMutation) OldCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCode: %w", err)
	}
	return oldValue.Code, nil
}

// ResetCode resets all changes to the "code" field.
func (m *SysPermissionsMutation) ResetCode() {
	m.code = nil
}

// SetPath sets the "path" field.
func (m *SysPermissionsMutation) SetPath(s string) {
	m._path = &s
}

// Path returns the value of the "path" field in the mutation.
func (m *SysPermissionsMutation) Path() (r string, exists bool) {
	v := m._path
	if v == nil {
		return
	}
	return *v, true
}

// OldPath returns the old "path" field's value of the SysPermissions entity.
// If the SysPermissions object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysPermissionsMutation) OldPath(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPath is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPath requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPath: %w", err)
	}
	return oldValue.Path, nil
}

// ResetPath resets all changes to the "path" field.
func (m *SysPermissionsMutation) ResetPath() {
	m._path = nil
}

// SetCommand sets the "command" field.
func (m *SysPermissionsMutation) SetCommand(s string) {
	m.command = &s
}

// Command returns the value of the "command" field in the mutation.
func (m *SysPermissionsMutation) Command() (r string, exists bool) {
	v := m.command
	if v == nil {
		return
	}
	return *v, true
}

// OldCommand returns the old "command" field's value of the SysPermissions entity.
// If the SysPermissions object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysPermissionsMutation) OldCommand(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCommand is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCommand requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCommand: %w", err)
	}
	return oldValue.Command, nil
}

// ResetCommand resets all changes to the "command" field.
func (m *SysPermissionsMutation) ResetCommand() {
	m.command = nil
}

// SetCreateTime sets the "create_time" field.
func (m *SysPermissionsMutation) SetCreateTime(i int32) {
	m.create_time = &i
	m.addcreate_time = nil
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *SysPermissionsMutation) CreateTime() (r int32, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the SysPermissions entity.
// If the SysPermissions object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysPermissionsMutation) OldCreateTime(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// AddCreateTime adds i to the "create_time" field.
func (m *SysPermissionsMutation) AddCreateTime(i int32) {
	if m.addcreate_time != nil {
		*m.addcreate_time += i
	} else {
		m.addcreate_time = &i
	}
}

// AddedCreateTime returns the value that was added to the "create_time" field in this mutation.
func (m *SysPermissionsMutation) AddedCreateTime() (r int32, exists bool) {
	v := m.addcreate_time
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *SysPermissionsMutation) ResetCreateTime() {
	m.create_time = nil
	m.addcreate_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *SysPermissionsMutation) SetUpdateTime(i int32) {
	m.update_time = &i
	m.addupdate_time = nil
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *SysPermissionsMutation) UpdateTime() (r int32, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the SysPermissions entity.
// If the SysPermissions object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysPermissionsMutation) OldUpdateTime(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// AddUpdateTime adds i to the "update_time" field.
func (m *SysPermissionsMutation) AddUpdateTime(i int32) {
	if m.addupdate_time != nil {
		*m.addupdate_time += i
	} else {
		m.addupdate_time = &i
	}
}

// AddedUpdateTime returns the value that was added to the "update_time" field in this mutation.
func (m *SysPermissionsMutation) AddedUpdateTime() (r int32, exists bool) {
	v := m.addupdate_time
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *SysPermissionsMutation) ResetUpdateTime() {
	m.update_time = nil
	m.addupdate_time = nil
}

// Where appends a list predicates to the SysPermissionsMutation builder.
func (m *SysPermissionsMutation) Where(ps ...predicate.SysPermissions) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SysPermissionsMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SysPermissionsMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.SysPermissions, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SysPermissionsMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SysPermissionsMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (SysPermissions).
func (m *SysPermissionsMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SysPermissionsMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.menu_id != nil {
		fields = append(fields, syspermissions.FieldMenuID)
	}
	if m.name != nil {
		fields = append(fields, syspermissions.FieldName)
	}
	if m.code != nil {
		fields = append(fields, syspermissions.FieldCode)
	}
	if m._path != nil {
		fields = append(fields, syspermissions.FieldPath)
	}
	if m.command != nil {
		fields = append(fields, syspermissions.FieldCommand)
	}
	if m.create_time != nil {
		fields = append(fields, syspermissions.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, syspermissions.FieldUpdateTime)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SysPermissionsMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case syspermissions.FieldMenuID:
		return m.MenuID()
	case syspermissions.FieldName:
		return m.Name()
	case syspermissions.FieldCode:
		return m.Code()
	case syspermissions.FieldPath:
		return m.Path()
	case syspermissions.FieldCommand:
		return m.Command()
	case syspermissions.FieldCreateTime:
		return m.CreateTime()
	case syspermissions.FieldUpdateTime:
		return m.UpdateTime()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SysPermissionsMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case syspermissions.FieldMenuID:
		return m.OldMenuID(ctx)
	case syspermissions.FieldName:
		return m.OldName(ctx)
	case syspermissions.FieldCode:
		return m.OldCode(ctx)
	case syspermissions.FieldPath:
		return m.OldPath(ctx)
	case syspermissions.FieldCommand:
		return m.OldCommand(ctx)
	case syspermissions.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case syspermissions.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	}
	return nil, fmt.Errorf("unknown SysPermissions field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SysPermissionsMutation) SetField(name string, value ent.Value) error {
	switch name {
	case syspermissions.FieldMenuID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMenuID(v)
		return nil
	case syspermissions.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case syspermissions.FieldCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCode(v)
		return nil
	case syspermissions.FieldPath:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPath(v)
		return nil
	case syspermissions.FieldCommand:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCommand(v)
		return nil
	case syspermissions.FieldCreateTime:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case syspermissions.FieldUpdateTime:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	}
	return fmt.Errorf("unknown SysPermissions field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SysPermissionsMutation) AddedFields() []string {
	var fields []string
	if m.addmenu_id != nil {
		fields = append(fields, syspermissions.FieldMenuID)
	}
	if m.addcreate_time != nil {
		fields = append(fields, syspermissions.FieldCreateTime)
	}
	if m.addupdate_time != nil {
		fields = append(fields, syspermissions.FieldUpdateTime)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SysPermissionsMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case syspermissions.FieldMenuID:
		return m.AddedMenuID()
	case syspermissions.FieldCreateTime:
		return m.AddedCreateTime()
	case syspermissions.FieldUpdateTime:
		return m.AddedUpdateTime()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SysPermissionsMutation) AddField(name string, value ent.Value) error {
	switch name {
	case syspermissions.FieldMenuID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMenuID(v)
		return nil
	case syspermissions.FieldCreateTime:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreateTime(v)
		return nil
	case syspermissions.FieldUpdateTime:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdateTime(v)
		return nil
	}
	return fmt.Errorf("unknown SysPermissions numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SysPermissionsMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SysPermissionsMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SysPermissionsMutation) ClearField(name string) error {
	return fmt.Errorf("unknown SysPermissions nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SysPermissionsMutation) ResetField(name string) error {
	switch name {
	case syspermissions.FieldMenuID:
		m.ResetMenuID()
		return nil
	case syspermissions.FieldName:
		m.ResetName()
		return nil
	case syspermissions.FieldCode:
		m.ResetCode()
		return nil
	case syspermissions.FieldPath:
		m.ResetPath()
		return nil
	case syspermissions.FieldCommand:
		m.ResetCommand()
		return nil
	case syspermissions.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case syspermissions.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	}
	return fmt.Errorf("unknown SysPermissions field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SysPermissionsMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SysPermissionsMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SysPermissionsMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SysPermissionsMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SysPermissionsMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SysPermissionsMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SysPermissionsMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown SysPermissions unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SysPermissionsMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown SysPermissions edge %s", name)
}

// SysRoleMenuMutation represents an operation that mutates the SysRoleMenu nodes in the graph.
type SysRoleMenuMutation struct {
	config
	op             Op
	typ            string
	id             *int64
	role_id        *int64
	addrole_id     *int64
	menu_id        *int64
	addmenu_id     *int64
	create_time    *int32
	addcreate_time *int32
	update_time    *int32
	addupdate_time *int32
	clearedFields  map[string]struct{}
	done           bool
	oldValue       func(context.Context) (*SysRoleMenu, error)
	predicates     []predicate.SysRoleMenu
}

var _ ent.Mutation = (*SysRoleMenuMutation)(nil)

// sysrolemenuOption allows management of the mutation configuration using functional options.
type sysrolemenuOption func(*SysRoleMenuMutation)

// newSysRoleMenuMutation creates new mutation for the SysRoleMenu entity.
func newSysRoleMenuMutation(c config, op Op, opts ...sysrolemenuOption) *SysRoleMenuMutation {
	m := &SysRoleMenuMutation{
		config:        c,
		op:            op,
		typ:           TypeSysRoleMenu,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSysRoleMenuID sets the ID field of the mutation.
func withSysRoleMenuID(id int64) sysrolemenuOption {
	return func(m *SysRoleMenuMutation) {
		var (
			err   error
			once  sync.Once
			value *SysRoleMenu
		)
		m.oldValue = func(ctx context.Context) (*SysRoleMenu, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().SysRoleMenu.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSysRoleMenu sets the old SysRoleMenu of the mutation.
func withSysRoleMenu(node *SysRoleMenu) sysrolemenuOption {
	return func(m *SysRoleMenuMutation) {
		m.oldValue = func(context.Context) (*SysRoleMenu, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SysRoleMenuMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SysRoleMenuMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of SysRoleMenu entities.
func (m *SysRoleMenuMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SysRoleMenuMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SysRoleMenuMutation) IDs(ctx context.Context) ([]int64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().SysRoleMenu.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetRoleID sets the "role_id" field.
func (m *SysRoleMenuMutation) SetRoleID(i int64) {
	m.role_id = &i
	m.addrole_id = nil
}

// RoleID returns the value of the "role_id" field in the mutation.
func (m *SysRoleMenuMutation) RoleID() (r int64, exists bool) {
	v := m.role_id
	if v == nil {
		return
	}
	return *v, true
}

// OldRoleID returns the old "role_id" field's value of the SysRoleMenu entity.
// If the SysRoleMenu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysRoleMenuMutation) OldRoleID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRoleID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRoleID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRoleID: %w", err)
	}
	return oldValue.RoleID, nil
}

// AddRoleID adds i to the "role_id" field.
func (m *SysRoleMenuMutation) AddRoleID(i int64) {
	if m.addrole_id != nil {
		*m.addrole_id += i
	} else {
		m.addrole_id = &i
	}
}

// AddedRoleID returns the value that was added to the "role_id" field in this mutation.
func (m *SysRoleMenuMutation) AddedRoleID() (r int64, exists bool) {
	v := m.addrole_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetRoleID resets all changes to the "role_id" field.
func (m *SysRoleMenuMutation) ResetRoleID() {
	m.role_id = nil
	m.addrole_id = nil
}

// SetMenuID sets the "menu_id" field.
func (m *SysRoleMenuMutation) SetMenuID(i int64) {
	m.menu_id = &i
	m.addmenu_id = nil
}

// MenuID returns the value of the "menu_id" field in the mutation.
func (m *SysRoleMenuMutation) MenuID() (r int64, exists bool) {
	v := m.menu_id
	if v == nil {
		return
	}
	return *v, true
}

// OldMenuID returns the old "menu_id" field's value of the SysRoleMenu entity.
// If the SysRoleMenu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysRoleMenuMutation) OldMenuID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMenuID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMenuID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMenuID: %w", err)
	}
	return oldValue.MenuID, nil
}

// AddMenuID adds i to the "menu_id" field.
func (m *SysRoleMenuMutation) AddMenuID(i int64) {
	if m.addmenu_id != nil {
		*m.addmenu_id += i
	} else {
		m.addmenu_id = &i
	}
}

// AddedMenuID returns the value that was added to the "menu_id" field in this mutation.
func (m *SysRoleMenuMutation) AddedMenuID() (r int64, exists bool) {
	v := m.addmenu_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetMenuID resets all changes to the "menu_id" field.
func (m *SysRoleMenuMutation) ResetMenuID() {
	m.menu_id = nil
	m.addmenu_id = nil
}

// SetCreateTime sets the "create_time" field.
func (m *SysRoleMenuMutation) SetCreateTime(i int32) {
	m.create_time = &i
	m.addcreate_time = nil
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *SysRoleMenuMutation) CreateTime() (r int32, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the SysRoleMenu entity.
// If the SysRoleMenu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysRoleMenuMutation) OldCreateTime(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// AddCreateTime adds i to the "create_time" field.
func (m *SysRoleMenuMutation) AddCreateTime(i int32) {
	if m.addcreate_time != nil {
		*m.addcreate_time += i
	} else {
		m.addcreate_time = &i
	}
}

// AddedCreateTime returns the value that was added to the "create_time" field in this mutation.
func (m *SysRoleMenuMutation) AddedCreateTime() (r int32, exists bool) {
	v := m.addcreate_time
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *SysRoleMenuMutation) ResetCreateTime() {
	m.create_time = nil
	m.addcreate_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *SysRoleMenuMutation) SetUpdateTime(i int32) {
	m.update_time = &i
	m.addupdate_time = nil
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *SysRoleMenuMutation) UpdateTime() (r int32, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the SysRoleMenu entity.
// If the SysRoleMenu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysRoleMenuMutation) OldUpdateTime(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// AddUpdateTime adds i to the "update_time" field.
func (m *SysRoleMenuMutation) AddUpdateTime(i int32) {
	if m.addupdate_time != nil {
		*m.addupdate_time += i
	} else {
		m.addupdate_time = &i
	}
}

// AddedUpdateTime returns the value that was added to the "update_time" field in this mutation.
func (m *SysRoleMenuMutation) AddedUpdateTime() (r int32, exists bool) {
	v := m.addupdate_time
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *SysRoleMenuMutation) ResetUpdateTime() {
	m.update_time = nil
	m.addupdate_time = nil
}

// Where appends a list predicates to the SysRoleMenuMutation builder.
func (m *SysRoleMenuMutation) Where(ps ...predicate.SysRoleMenu) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SysRoleMenuMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SysRoleMenuMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.SysRoleMenu, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SysRoleMenuMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SysRoleMenuMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (SysRoleMenu).
func (m *SysRoleMenuMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SysRoleMenuMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.role_id != nil {
		fields = append(fields, sysrolemenu.FieldRoleID)
	}
	if m.menu_id != nil {
		fields = append(fields, sysrolemenu.FieldMenuID)
	}
	if m.create_time != nil {
		fields = append(fields, sysrolemenu.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, sysrolemenu.FieldUpdateTime)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SysRoleMenuMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case sysrolemenu.FieldRoleID:
		return m.RoleID()
	case sysrolemenu.FieldMenuID:
		return m.MenuID()
	case sysrolemenu.FieldCreateTime:
		return m.CreateTime()
	case sysrolemenu.FieldUpdateTime:
		return m.UpdateTime()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SysRoleMenuMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case sysrolemenu.FieldRoleID:
		return m.OldRoleID(ctx)
	case sysrolemenu.FieldMenuID:
		return m.OldMenuID(ctx)
	case sysrolemenu.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case sysrolemenu.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	}
	return nil, fmt.Errorf("unknown SysRoleMenu field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SysRoleMenuMutation) SetField(name string, value ent.Value) error {
	switch name {
	case sysrolemenu.FieldRoleID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRoleID(v)
		return nil
	case sysrolemenu.FieldMenuID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMenuID(v)
		return nil
	case sysrolemenu.FieldCreateTime:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case sysrolemenu.FieldUpdateTime:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	}
	return fmt.Errorf("unknown SysRoleMenu field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SysRoleMenuMutation) AddedFields() []string {
	var fields []string
	if m.addrole_id != nil {
		fields = append(fields, sysrolemenu.FieldRoleID)
	}
	if m.addmenu_id != nil {
		fields = append(fields, sysrolemenu.FieldMenuID)
	}
	if m.addcreate_time != nil {
		fields = append(fields, sysrolemenu.FieldCreateTime)
	}
	if m.addupdate_time != nil {
		fields = append(fields, sysrolemenu.FieldUpdateTime)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SysRoleMenuMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case sysrolemenu.FieldRoleID:
		return m.AddedRoleID()
	case sysrolemenu.FieldMenuID:
		return m.AddedMenuID()
	case sysrolemenu.FieldCreateTime:
		return m.AddedCreateTime()
	case sysrolemenu.FieldUpdateTime:
		return m.AddedUpdateTime()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SysRoleMenuMutation) AddField(name string, value ent.Value) error {
	switch name {
	case sysrolemenu.FieldRoleID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRoleID(v)
		return nil
	case sysrolemenu.FieldMenuID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMenuID(v)
		return nil
	case sysrolemenu.FieldCreateTime:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreateTime(v)
		return nil
	case sysrolemenu.FieldUpdateTime:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdateTime(v)
		return nil
	}
	return fmt.Errorf("unknown SysRoleMenu numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SysRoleMenuMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SysRoleMenuMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SysRoleMenuMutation) ClearField(name string) error {
	return fmt.Errorf("unknown SysRoleMenu nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SysRoleMenuMutation) ResetField(name string) error {
	switch name {
	case sysrolemenu.FieldRoleID:
		m.ResetRoleID()
		return nil
	case sysrolemenu.FieldMenuID:
		m.ResetMenuID()
		return nil
	case sysrolemenu.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case sysrolemenu.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	}
	return fmt.Errorf("unknown SysRoleMenu field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SysRoleMenuMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SysRoleMenuMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SysRoleMenuMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SysRoleMenuMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SysRoleMenuMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SysRoleMenuMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SysRoleMenuMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown SysRoleMenu unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SysRoleMenuMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown SysRoleMenu edge %s", name)
}

// SysRolePermissionsMutation represents an operation that mutates the SysRolePermissions nodes in the graph.
type SysRolePermissionsMutation struct {
	config
	op               Op
	typ              string
	id               *int64
	role_id          *int64
	addrole_id       *int64
	permission_id    *int64
	addpermission_id *int64
	create_time      *int32
	addcreate_time   *int32
	update_time      *int32
	addupdate_time   *int32
	clearedFields    map[string]struct{}
	done             bool
	oldValue         func(context.Context) (*SysRolePermissions, error)
	predicates       []predicate.SysRolePermissions
}

var _ ent.Mutation = (*SysRolePermissionsMutation)(nil)

// sysrolepermissionsOption allows management of the mutation configuration using functional options.
type sysrolepermissionsOption func(*SysRolePermissionsMutation)

// newSysRolePermissionsMutation creates new mutation for the SysRolePermissions entity.
func newSysRolePermissionsMutation(c config, op Op, opts ...sysrolepermissionsOption) *SysRolePermissionsMutation {
	m := &SysRolePermissionsMutation{
		config:        c,
		op:            op,
		typ:           TypeSysRolePermissions,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSysRolePermissionsID sets the ID field of the mutation.
func withSysRolePermissionsID(id int64) sysrolepermissionsOption {
	return func(m *SysRolePermissionsMutation) {
		var (
			err   error
			once  sync.Once
			value *SysRolePermissions
		)
		m.oldValue = func(ctx context.Context) (*SysRolePermissions, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().SysRolePermissions.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSysRolePermissions sets the old SysRolePermissions of the mutation.
func withSysRolePermissions(node *SysRolePermissions) sysrolepermissionsOption {
	return func(m *SysRolePermissionsMutation) {
		m.oldValue = func(context.Context) (*SysRolePermissions, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SysRolePermissionsMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SysRolePermissionsMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of SysRolePermissions entities.
func (m *SysRolePermissionsMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SysRolePermissionsMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SysRolePermissionsMutation) IDs(ctx context.Context) ([]int64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().SysRolePermissions.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetRoleID sets the "role_id" field.
func (m *SysRolePermissionsMutation) SetRoleID(i int64) {
	m.role_id = &i
	m.addrole_id = nil
}

// RoleID returns the value of the "role_id" field in the mutation.
func (m *SysRolePermissionsMutation) RoleID() (r int64, exists bool) {
	v := m.role_id
	if v == nil {
		return
	}
	return *v, true
}

// OldRoleID returns the old "role_id" field's value of the SysRolePermissions entity.
// If the SysRolePermissions object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysRolePermissionsMutation) OldRoleID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRoleID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRoleID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRoleID: %w", err)
	}
	return oldValue.RoleID, nil
}

// AddRoleID adds i to the "role_id" field.
func (m *SysRolePermissionsMutation) AddRoleID(i int64) {
	if m.addrole_id != nil {
		*m.addrole_id += i
	} else {
		m.addrole_id = &i
	}
}

// AddedRoleID returns the value that was added to the "role_id" field in this mutation.
func (m *SysRolePermissionsMutation) AddedRoleID() (r int64, exists bool) {
	v := m.addrole_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetRoleID resets all changes to the "role_id" field.
func (m *SysRolePermissionsMutation) ResetRoleID() {
	m.role_id = nil
	m.addrole_id = nil
}

// SetPermissionID sets the "permission_id" field.
func (m *SysRolePermissionsMutation) SetPermissionID(i int64) {
	m.permission_id = &i
	m.addpermission_id = nil
}

// PermissionID returns the value of the "permission_id" field in the mutation.
func (m *SysRolePermissionsMutation) PermissionID() (r int64, exists bool) {
	v := m.permission_id
	if v == nil {
		return
	}
	return *v, true
}

// OldPermissionID returns the old "permission_id" field's value of the SysRolePermissions entity.
// If the SysRolePermissions object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysRolePermissionsMutation) OldPermissionID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPermissionID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPermissionID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPermissionID: %w", err)
	}
	return oldValue.PermissionID, nil
}

// AddPermissionID adds i to the "permission_id" field.
func (m *SysRolePermissionsMutation) AddPermissionID(i int64) {
	if m.addpermission_id != nil {
		*m.addpermission_id += i
	} else {
		m.addpermission_id = &i
	}
}

// AddedPermissionID returns the value that was added to the "permission_id" field in this mutation.
func (m *SysRolePermissionsMutation) AddedPermissionID() (r int64, exists bool) {
	v := m.addpermission_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetPermissionID resets all changes to the "permission_id" field.
func (m *SysRolePermissionsMutation) ResetPermissionID() {
	m.permission_id = nil
	m.addpermission_id = nil
}

// SetCreateTime sets the "create_time" field.
func (m *SysRolePermissionsMutation) SetCreateTime(i int32) {
	m.create_time = &i
	m.addcreate_time = nil
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *SysRolePermissionsMutation) CreateTime() (r int32, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the SysRolePermissions entity.
// If the SysRolePermissions object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysRolePermissionsMutation) OldCreateTime(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// AddCreateTime adds i to the "create_time" field.
func (m *SysRolePermissionsMutation) AddCreateTime(i int32) {
	if m.addcreate_time != nil {
		*m.addcreate_time += i
	} else {
		m.addcreate_time = &i
	}
}

// AddedCreateTime returns the value that was added to the "create_time" field in this mutation.
func (m *SysRolePermissionsMutation) AddedCreateTime() (r int32, exists bool) {
	v := m.addcreate_time
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *SysRolePermissionsMutation) ResetCreateTime() {
	m.create_time = nil
	m.addcreate_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *SysRolePermissionsMutation) SetUpdateTime(i int32) {
	m.update_time = &i
	m.addupdate_time = nil
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *SysRolePermissionsMutation) UpdateTime() (r int32, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the SysRolePermissions entity.
// If the SysRolePermissions object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysRolePermissionsMutation) OldUpdateTime(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// AddUpdateTime adds i to the "update_time" field.
func (m *SysRolePermissionsMutation) AddUpdateTime(i int32) {
	if m.addupdate_time != nil {
		*m.addupdate_time += i
	} else {
		m.addupdate_time = &i
	}
}

// AddedUpdateTime returns the value that was added to the "update_time" field in this mutation.
func (m *SysRolePermissionsMutation) AddedUpdateTime() (r int32, exists bool) {
	v := m.addupdate_time
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *SysRolePermissionsMutation) ResetUpdateTime() {
	m.update_time = nil
	m.addupdate_time = nil
}

// Where appends a list predicates to the SysRolePermissionsMutation builder.
func (m *SysRolePermissionsMutation) Where(ps ...predicate.SysRolePermissions) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SysRolePermissionsMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SysRolePermissionsMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.SysRolePermissions, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SysRolePermissionsMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SysRolePermissionsMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (SysRolePermissions).
func (m *SysRolePermissionsMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SysRolePermissionsMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.role_id != nil {
		fields = append(fields, sysrolepermissions.FieldRoleID)
	}
	if m.permission_id != nil {
		fields = append(fields, sysrolepermissions.FieldPermissionID)
	}
	if m.create_time != nil {
		fields = append(fields, sysrolepermissions.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, sysrolepermissions.FieldUpdateTime)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SysRolePermissionsMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case sysrolepermissions.FieldRoleID:
		return m.RoleID()
	case sysrolepermissions.FieldPermissionID:
		return m.PermissionID()
	case sysrolepermissions.FieldCreateTime:
		return m.CreateTime()
	case sysrolepermissions.FieldUpdateTime:
		return m.UpdateTime()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SysRolePermissionsMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case sysrolepermissions.FieldRoleID:
		return m.OldRoleID(ctx)
	case sysrolepermissions.FieldPermissionID:
		return m.OldPermissionID(ctx)
	case sysrolepermissions.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case sysrolepermissions.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	}
	return nil, fmt.Errorf("unknown SysRolePermissions field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SysRolePermissionsMutation) SetField(name string, value ent.Value) error {
	switch name {
	case sysrolepermissions.FieldRoleID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRoleID(v)
		return nil
	case sysrolepermissions.FieldPermissionID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPermissionID(v)
		return nil
	case sysrolepermissions.FieldCreateTime:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case sysrolepermissions.FieldUpdateTime:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	}
	return fmt.Errorf("unknown SysRolePermissions field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SysRolePermissionsMutation) AddedFields() []string {
	var fields []string
	if m.addrole_id != nil {
		fields = append(fields, sysrolepermissions.FieldRoleID)
	}
	if m.addpermission_id != nil {
		fields = append(fields, sysrolepermissions.FieldPermissionID)
	}
	if m.addcreate_time != nil {
		fields = append(fields, sysrolepermissions.FieldCreateTime)
	}
	if m.addupdate_time != nil {
		fields = append(fields, sysrolepermissions.FieldUpdateTime)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SysRolePermissionsMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case sysrolepermissions.FieldRoleID:
		return m.AddedRoleID()
	case sysrolepermissions.FieldPermissionID:
		return m.AddedPermissionID()
	case sysrolepermissions.FieldCreateTime:
		return m.AddedCreateTime()
	case sysrolepermissions.FieldUpdateTime:
		return m.AddedUpdateTime()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SysRolePermissionsMutation) AddField(name string, value ent.Value) error {
	switch name {
	case sysrolepermissions.FieldRoleID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRoleID(v)
		return nil
	case sysrolepermissions.FieldPermissionID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPermissionID(v)
		return nil
	case sysrolepermissions.FieldCreateTime:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreateTime(v)
		return nil
	case sysrolepermissions.FieldUpdateTime:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdateTime(v)
		return nil
	}
	return fmt.Errorf("unknown SysRolePermissions numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SysRolePermissionsMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SysRolePermissionsMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SysRolePermissionsMutation) ClearField(name string) error {
	return fmt.Errorf("unknown SysRolePermissions nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SysRolePermissionsMutation) ResetField(name string) error {
	switch name {
	case sysrolepermissions.FieldRoleID:
		m.ResetRoleID()
		return nil
	case sysrolepermissions.FieldPermissionID:
		m.ResetPermissionID()
		return nil
	case sysrolepermissions.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case sysrolepermissions.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	}
	return fmt.Errorf("unknown SysRolePermissions field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SysRolePermissionsMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SysRolePermissionsMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SysRolePermissionsMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SysRolePermissionsMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SysRolePermissionsMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SysRolePermissionsMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SysRolePermissionsMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown SysRolePermissions unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SysRolePermissionsMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown SysRolePermissions edge %s", name)
}

// SysRoleUsersMutation represents an operation that mutates the SysRoleUsers nodes in the graph.
type SysRoleUsersMutation struct {
	config
	op             Op
	typ            string
	id             *int32
	role_id        *int64
	addrole_id     *int64
	user_id        *int64
	adduser_id     *int64
	create_time    *int32
	addcreate_time *int32
	update_time    *int32
	addupdate_time *int32
	clearedFields  map[string]struct{}
	done           bool
	oldValue       func(context.Context) (*SysRoleUsers, error)
	predicates     []predicate.SysRoleUsers
}

var _ ent.Mutation = (*SysRoleUsersMutation)(nil)

// sysroleusersOption allows management of the mutation configuration using functional options.
type sysroleusersOption func(*SysRoleUsersMutation)

// newSysRoleUsersMutation creates new mutation for the SysRoleUsers entity.
func newSysRoleUsersMutation(c config, op Op, opts ...sysroleusersOption) *SysRoleUsersMutation {
	m := &SysRoleUsersMutation{
		config:        c,
		op:            op,
		typ:           TypeSysRoleUsers,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSysRoleUsersID sets the ID field of the mutation.
func withSysRoleUsersID(id int32) sysroleusersOption {
	return func(m *SysRoleUsersMutation) {
		var (
			err   error
			once  sync.Once
			value *SysRoleUsers
		)
		m.oldValue = func(ctx context.Context) (*SysRoleUsers, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().SysRoleUsers.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSysRoleUsers sets the old SysRoleUsers of the mutation.
func withSysRoleUsers(node *SysRoleUsers) sysroleusersOption {
	return func(m *SysRoleUsersMutation) {
		m.oldValue = func(context.Context) (*SysRoleUsers, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SysRoleUsersMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SysRoleUsersMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of SysRoleUsers entities.
func (m *SysRoleUsersMutation) SetID(id int32) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SysRoleUsersMutation) ID() (id int32, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SysRoleUsersMutation) IDs(ctx context.Context) ([]int32, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int32{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().SysRoleUsers.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetRoleID sets the "role_id" field.
func (m *SysRoleUsersMutation) SetRoleID(i int64) {
	m.role_id = &i
	m.addrole_id = nil
}

// RoleID returns the value of the "role_id" field in the mutation.
func (m *SysRoleUsersMutation) RoleID() (r int64, exists bool) {
	v := m.role_id
	if v == nil {
		return
	}
	return *v, true
}

// OldRoleID returns the old "role_id" field's value of the SysRoleUsers entity.
// If the SysRoleUsers object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysRoleUsersMutation) OldRoleID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRoleID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRoleID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRoleID: %w", err)
	}
	return oldValue.RoleID, nil
}

// AddRoleID adds i to the "role_id" field.
func (m *SysRoleUsersMutation) AddRoleID(i int64) {
	if m.addrole_id != nil {
		*m.addrole_id += i
	} else {
		m.addrole_id = &i
	}
}

// AddedRoleID returns the value that was added to the "role_id" field in this mutation.
func (m *SysRoleUsersMutation) AddedRoleID() (r int64, exists bool) {
	v := m.addrole_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetRoleID resets all changes to the "role_id" field.
func (m *SysRoleUsersMutation) ResetRoleID() {
	m.role_id = nil
	m.addrole_id = nil
}

// SetUserID sets the "user_id" field.
func (m *SysRoleUsersMutation) SetUserID(i int64) {
	m.user_id = &i
	m.adduser_id = nil
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *SysRoleUsersMutation) UserID() (r int64, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the SysRoleUsers entity.
// If the SysRoleUsers object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysRoleUsersMutation) OldUserID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// AddUserID adds i to the "user_id" field.
func (m *SysRoleUsersMutation) AddUserID(i int64) {
	if m.adduser_id != nil {
		*m.adduser_id += i
	} else {
		m.adduser_id = &i
	}
}

// AddedUserID returns the value that was added to the "user_id" field in this mutation.
func (m *SysRoleUsersMutation) AddedUserID() (r int64, exists bool) {
	v := m.adduser_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetUserID resets all changes to the "user_id" field.
func (m *SysRoleUsersMutation) ResetUserID() {
	m.user_id = nil
	m.adduser_id = nil
}

// SetCreateTime sets the "create_time" field.
func (m *SysRoleUsersMutation) SetCreateTime(i int32) {
	m.create_time = &i
	m.addcreate_time = nil
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *SysRoleUsersMutation) CreateTime() (r int32, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the SysRoleUsers entity.
// If the SysRoleUsers object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysRoleUsersMutation) OldCreateTime(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// AddCreateTime adds i to the "create_time" field.
func (m *SysRoleUsersMutation) AddCreateTime(i int32) {
	if m.addcreate_time != nil {
		*m.addcreate_time += i
	} else {
		m.addcreate_time = &i
	}
}

// AddedCreateTime returns the value that was added to the "create_time" field in this mutation.
func (m *SysRoleUsersMutation) AddedCreateTime() (r int32, exists bool) {
	v := m.addcreate_time
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *SysRoleUsersMutation) ResetCreateTime() {
	m.create_time = nil
	m.addcreate_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *SysRoleUsersMutation) SetUpdateTime(i int32) {
	m.update_time = &i
	m.addupdate_time = nil
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *SysRoleUsersMutation) UpdateTime() (r int32, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the SysRoleUsers entity.
// If the SysRoleUsers object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysRoleUsersMutation) OldUpdateTime(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// AddUpdateTime adds i to the "update_time" field.
func (m *SysRoleUsersMutation) AddUpdateTime(i int32) {
	if m.addupdate_time != nil {
		*m.addupdate_time += i
	} else {
		m.addupdate_time = &i
	}
}

// AddedUpdateTime returns the value that was added to the "update_time" field in this mutation.
func (m *SysRoleUsersMutation) AddedUpdateTime() (r int32, exists bool) {
	v := m.addupdate_time
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *SysRoleUsersMutation) ResetUpdateTime() {
	m.update_time = nil
	m.addupdate_time = nil
}

// Where appends a list predicates to the SysRoleUsersMutation builder.
func (m *SysRoleUsersMutation) Where(ps ...predicate.SysRoleUsers) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SysRoleUsersMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SysRoleUsersMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.SysRoleUsers, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SysRoleUsersMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SysRoleUsersMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (SysRoleUsers).
func (m *SysRoleUsersMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SysRoleUsersMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.role_id != nil {
		fields = append(fields, sysroleusers.FieldRoleID)
	}
	if m.user_id != nil {
		fields = append(fields, sysroleusers.FieldUserID)
	}
	if m.create_time != nil {
		fields = append(fields, sysroleusers.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, sysroleusers.FieldUpdateTime)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SysRoleUsersMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case sysroleusers.FieldRoleID:
		return m.RoleID()
	case sysroleusers.FieldUserID:
		return m.UserID()
	case sysroleusers.FieldCreateTime:
		return m.CreateTime()
	case sysroleusers.FieldUpdateTime:
		return m.UpdateTime()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SysRoleUsersMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case sysroleusers.FieldRoleID:
		return m.OldRoleID(ctx)
	case sysroleusers.FieldUserID:
		return m.OldUserID(ctx)
	case sysroleusers.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case sysroleusers.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	}
	return nil, fmt.Errorf("unknown SysRoleUsers field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SysRoleUsersMutation) SetField(name string, value ent.Value) error {
	switch name {
	case sysroleusers.FieldRoleID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRoleID(v)
		return nil
	case sysroleusers.FieldUserID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case sysroleusers.FieldCreateTime:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case sysroleusers.FieldUpdateTime:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	}
	return fmt.Errorf("unknown SysRoleUsers field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SysRoleUsersMutation) AddedFields() []string {
	var fields []string
	if m.addrole_id != nil {
		fields = append(fields, sysroleusers.FieldRoleID)
	}
	if m.adduser_id != nil {
		fields = append(fields, sysroleusers.FieldUserID)
	}
	if m.addcreate_time != nil {
		fields = append(fields, sysroleusers.FieldCreateTime)
	}
	if m.addupdate_time != nil {
		fields = append(fields, sysroleusers.FieldUpdateTime)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SysRoleUsersMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case sysroleusers.FieldRoleID:
		return m.AddedRoleID()
	case sysroleusers.FieldUserID:
		return m.AddedUserID()
	case sysroleusers.FieldCreateTime:
		return m.AddedCreateTime()
	case sysroleusers.FieldUpdateTime:
		return m.AddedUpdateTime()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SysRoleUsersMutation) AddField(name string, value ent.Value) error {
	switch name {
	case sysroleusers.FieldRoleID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRoleID(v)
		return nil
	case sysroleusers.FieldUserID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUserID(v)
		return nil
	case sysroleusers.FieldCreateTime:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreateTime(v)
		return nil
	case sysroleusers.FieldUpdateTime:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdateTime(v)
		return nil
	}
	return fmt.Errorf("unknown SysRoleUsers numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SysRoleUsersMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SysRoleUsersMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SysRoleUsersMutation) ClearField(name string) error {
	return fmt.Errorf("unknown SysRoleUsers nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SysRoleUsersMutation) ResetField(name string) error {
	switch name {
	case sysroleusers.FieldRoleID:
		m.ResetRoleID()
		return nil
	case sysroleusers.FieldUserID:
		m.ResetUserID()
		return nil
	case sysroleusers.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case sysroleusers.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	}
	return fmt.Errorf("unknown SysRoleUsers field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SysRoleUsersMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SysRoleUsersMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SysRoleUsersMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SysRoleUsersMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SysRoleUsersMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SysRoleUsersMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SysRoleUsersMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown SysRoleUsers unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SysRoleUsersMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown SysRoleUsers edge %s", name)
}

// SysRolesMutation represents an operation that mutates the SysRoles nodes in the graph.
type SysRolesMutation struct {
	config
	op             Op
	typ            string
	id             *int64
	guid           *string
	merchant_id    *int64
	addmerchant_id *int64
	name           *string
	code           *string
	create_time    *int32
	addcreate_time *int32
	update_time    *int32
	addupdate_time *int32
	clearedFields  map[string]struct{}
	done           bool
	oldValue       func(context.Context) (*SysRoles, error)
	predicates     []predicate.SysRoles
}

var _ ent.Mutation = (*SysRolesMutation)(nil)

// sysrolesOption allows management of the mutation configuration using functional options.
type sysrolesOption func(*SysRolesMutation)

// newSysRolesMutation creates new mutation for the SysRoles entity.
func newSysRolesMutation(c config, op Op, opts ...sysrolesOption) *SysRolesMutation {
	m := &SysRolesMutation{
		config:        c,
		op:            op,
		typ:           TypeSysRoles,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSysRolesID sets the ID field of the mutation.
func withSysRolesID(id int64) sysrolesOption {
	return func(m *SysRolesMutation) {
		var (
			err   error
			once  sync.Once
			value *SysRoles
		)
		m.oldValue = func(ctx context.Context) (*SysRoles, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().SysRoles.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSysRoles sets the old SysRoles of the mutation.
func withSysRoles(node *SysRoles) sysrolesOption {
	return func(m *SysRolesMutation) {
		m.oldValue = func(context.Context) (*SysRoles, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SysRolesMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SysRolesMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of SysRoles entities.
func (m *SysRolesMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SysRolesMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SysRolesMutation) IDs(ctx context.Context) ([]int64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().SysRoles.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetGUID sets the "guid" field.
func (m *SysRolesMutation) SetGUID(s string) {
	m.guid = &s
}

// GUID returns the value of the "guid" field in the mutation.
func (m *SysRolesMutation) GUID() (r string, exists bool) {
	v := m.guid
	if v == nil {
		return
	}
	return *v, true
}

// OldGUID returns the old "guid" field's value of the SysRoles entity.
// If the SysRoles object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysRolesMutation) OldGUID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGUID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGUID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGUID: %w", err)
	}
	return oldValue.GUID, nil
}

// ResetGUID resets all changes to the "guid" field.
func (m *SysRolesMutation) ResetGUID() {
	m.guid = nil
}

// SetMerchantID sets the "merchant_id" field.
func (m *SysRolesMutation) SetMerchantID(i int64) {
	m.merchant_id = &i
	m.addmerchant_id = nil
}

// MerchantID returns the value of the "merchant_id" field in the mutation.
func (m *SysRolesMutation) MerchantID() (r int64, exists bool) {
	v := m.merchant_id
	if v == nil {
		return
	}
	return *v, true
}

// OldMerchantID returns the old "merchant_id" field's value of the SysRoles entity.
// If the SysRoles object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysRolesMutation) OldMerchantID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMerchantID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMerchantID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMerchantID: %w", err)
	}
	return oldValue.MerchantID, nil
}

// AddMerchantID adds i to the "merchant_id" field.
func (m *SysRolesMutation) AddMerchantID(i int64) {
	if m.addmerchant_id != nil {
		*m.addmerchant_id += i
	} else {
		m.addmerchant_id = &i
	}
}

// AddedMerchantID returns the value that was added to the "merchant_id" field in this mutation.
func (m *SysRolesMutation) AddedMerchantID() (r int64, exists bool) {
	v := m.addmerchant_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetMerchantID resets all changes to the "merchant_id" field.
func (m *SysRolesMutation) ResetMerchantID() {
	m.merchant_id = nil
	m.addmerchant_id = nil
}

// SetName sets the "name" field.
func (m *SysRolesMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *SysRolesMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the SysRoles entity.
// If the SysRoles object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysRolesMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *SysRolesMutation) ResetName() {
	m.name = nil
}

// SetCode sets the "code" field.
func (m *SysRolesMutation) SetCode(s string) {
	m.code = &s
}

// Code returns the value of the "code" field in the mutation.
func (m *SysRolesMutation) Code() (r string, exists bool) {
	v := m.code
	if v == nil {
		return
	}
	return *v, true
}

// OldCode returns the old "code" field's value of the SysRoles entity.
// If the SysRoles object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysRolesMutation) OldCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCode: %w", err)
	}
	return oldValue.Code, nil
}

// ResetCode resets all changes to the "code" field.
func (m *SysRolesMutation) ResetCode() {
	m.code = nil
}

// SetCreateTime sets the "create_time" field.
func (m *SysRolesMutation) SetCreateTime(i int32) {
	m.create_time = &i
	m.addcreate_time = nil
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *SysRolesMutation) CreateTime() (r int32, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the SysRoles entity.
// If the SysRoles object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysRolesMutation) OldCreateTime(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// AddCreateTime adds i to the "create_time" field.
func (m *SysRolesMutation) AddCreateTime(i int32) {
	if m.addcreate_time != nil {
		*m.addcreate_time += i
	} else {
		m.addcreate_time = &i
	}
}

// AddedCreateTime returns the value that was added to the "create_time" field in this mutation.
func (m *SysRolesMutation) AddedCreateTime() (r int32, exists bool) {
	v := m.addcreate_time
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *SysRolesMutation) ResetCreateTime() {
	m.create_time = nil
	m.addcreate_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *SysRolesMutation) SetUpdateTime(i int32) {
	m.update_time = &i
	m.addupdate_time = nil
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *SysRolesMutation) UpdateTime() (r int32, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the SysRoles entity.
// If the SysRoles object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysRolesMutation) OldUpdateTime(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// AddUpdateTime adds i to the "update_time" field.
func (m *SysRolesMutation) AddUpdateTime(i int32) {
	if m.addupdate_time != nil {
		*m.addupdate_time += i
	} else {
		m.addupdate_time = &i
	}
}

// AddedUpdateTime returns the value that was added to the "update_time" field in this mutation.
func (m *SysRolesMutation) AddedUpdateTime() (r int32, exists bool) {
	v := m.addupdate_time
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *SysRolesMutation) ResetUpdateTime() {
	m.update_time = nil
	m.addupdate_time = nil
}

// Where appends a list predicates to the SysRolesMutation builder.
func (m *SysRolesMutation) Where(ps ...predicate.SysRoles) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SysRolesMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SysRolesMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.SysRoles, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SysRolesMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SysRolesMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (SysRoles).
func (m *SysRolesMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SysRolesMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.guid != nil {
		fields = append(fields, sysroles.FieldGUID)
	}
	if m.merchant_id != nil {
		fields = append(fields, sysroles.FieldMerchantID)
	}
	if m.name != nil {
		fields = append(fields, sysroles.FieldName)
	}
	if m.code != nil {
		fields = append(fields, sysroles.FieldCode)
	}
	if m.create_time != nil {
		fields = append(fields, sysroles.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, sysroles.FieldUpdateTime)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SysRolesMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case sysroles.FieldGUID:
		return m.GUID()
	case sysroles.FieldMerchantID:
		return m.MerchantID()
	case sysroles.FieldName:
		return m.Name()
	case sysroles.FieldCode:
		return m.Code()
	case sysroles.FieldCreateTime:
		return m.CreateTime()
	case sysroles.FieldUpdateTime:
		return m.UpdateTime()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SysRolesMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case sysroles.FieldGUID:
		return m.OldGUID(ctx)
	case sysroles.FieldMerchantID:
		return m.OldMerchantID(ctx)
	case sysroles.FieldName:
		return m.OldName(ctx)
	case sysroles.FieldCode:
		return m.OldCode(ctx)
	case sysroles.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case sysroles.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	}
	return nil, fmt.Errorf("unknown SysRoles field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SysRolesMutation) SetField(name string, value ent.Value) error {
	switch name {
	case sysroles.FieldGUID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGUID(v)
		return nil
	case sysroles.FieldMerchantID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMerchantID(v)
		return nil
	case sysroles.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case sysroles.FieldCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCode(v)
		return nil
	case sysroles.FieldCreateTime:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case sysroles.FieldUpdateTime:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	}
	return fmt.Errorf("unknown SysRoles field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SysRolesMutation) AddedFields() []string {
	var fields []string
	if m.addmerchant_id != nil {
		fields = append(fields, sysroles.FieldMerchantID)
	}
	if m.addcreate_time != nil {
		fields = append(fields, sysroles.FieldCreateTime)
	}
	if m.addupdate_time != nil {
		fields = append(fields, sysroles.FieldUpdateTime)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SysRolesMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case sysroles.FieldMerchantID:
		return m.AddedMerchantID()
	case sysroles.FieldCreateTime:
		return m.AddedCreateTime()
	case sysroles.FieldUpdateTime:
		return m.AddedUpdateTime()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SysRolesMutation) AddField(name string, value ent.Value) error {
	switch name {
	case sysroles.FieldMerchantID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMerchantID(v)
		return nil
	case sysroles.FieldCreateTime:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreateTime(v)
		return nil
	case sysroles.FieldUpdateTime:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdateTime(v)
		return nil
	}
	return fmt.Errorf("unknown SysRoles numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SysRolesMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SysRolesMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SysRolesMutation) ClearField(name string) error {
	return fmt.Errorf("unknown SysRoles nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SysRolesMutation) ResetField(name string) error {
	switch name {
	case sysroles.FieldGUID:
		m.ResetGUID()
		return nil
	case sysroles.FieldMerchantID:
		m.ResetMerchantID()
		return nil
	case sysroles.FieldName:
		m.ResetName()
		return nil
	case sysroles.FieldCode:
		m.ResetCode()
		return nil
	case sysroles.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case sysroles.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	}
	return fmt.Errorf("unknown SysRoles field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SysRolesMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SysRolesMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SysRolesMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SysRolesMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SysRolesMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SysRolesMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SysRolesMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown SysRoles unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SysRolesMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown SysRoles edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                 Op
	typ                string
	id                 *int64
	guid               *string
	username           *string
	password           *string
	nick_name          *string
	merchant_id        *int64
	addmerchant_id     *int64
	role               *string
	avatar             *string
	email              *string
	phone              *string
	is_master          *int16
	addis_master       *int16
	create_time        *int32
	addcreate_time     *int32
	update_time        *int32
	addupdate_time     *int32
	last_login_time    *int32
	addlast_login_time *int32
	clearedFields      map[string]struct{}
	done               bool
	oldValue           func(context.Context) (*User, error)
	predicates         []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int64) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of User entities.
func (m *UserMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]int64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetGUID sets the "guid" field.
func (m *UserMutation) SetGUID(s string) {
	m.guid = &s
}

// GUID returns the value of the "guid" field in the mutation.
func (m *UserMutation) GUID() (r string, exists bool) {
	v := m.guid
	if v == nil {
		return
	}
	return *v, true
}

// OldGUID returns the old "guid" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldGUID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGUID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGUID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGUID: %w", err)
	}
	return oldValue.GUID, nil
}

// ResetGUID resets all changes to the "guid" field.
func (m *UserMutation) ResetGUID() {
	m.guid = nil
}

// SetUsername sets the "username" field.
func (m *UserMutation) SetUsername(s string) {
	m.username = &s
}

// Username returns the value of the "username" field in the mutation.
func (m *UserMutation) Username() (r string, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old "username" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ResetUsername resets all changes to the "username" field.
func (m *UserMutation) ResetUsername() {
	m.username = nil
}

// SetPassword sets the "password" field.
func (m *UserMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *UserMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword resets all changes to the "password" field.
func (m *UserMutation) ResetPassword() {
	m.password = nil
}

// SetNickName sets the "nick_name" field.
func (m *UserMutation) SetNickName(s string) {
	m.nick_name = &s
}

// NickName returns the value of the "nick_name" field in the mutation.
func (m *UserMutation) NickName() (r string, exists bool) {
	v := m.nick_name
	if v == nil {
		return
	}
	return *v, true
}

// OldNickName returns the old "nick_name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldNickName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNickName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNickName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNickName: %w", err)
	}
	return oldValue.NickName, nil
}

// ResetNickName resets all changes to the "nick_name" field.
func (m *UserMutation) ResetNickName() {
	m.nick_name = nil
}

// SetMerchantID sets the "merchant_id" field.
func (m *UserMutation) SetMerchantID(i int64) {
	m.merchant_id = &i
	m.addmerchant_id = nil
}

// MerchantID returns the value of the "merchant_id" field in the mutation.
func (m *UserMutation) MerchantID() (r int64, exists bool) {
	v := m.merchant_id
	if v == nil {
		return
	}
	return *v, true
}

// OldMerchantID returns the old "merchant_id" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldMerchantID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMerchantID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMerchantID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMerchantID: %w", err)
	}
	return oldValue.MerchantID, nil
}

// AddMerchantID adds i to the "merchant_id" field.
func (m *UserMutation) AddMerchantID(i int64) {
	if m.addmerchant_id != nil {
		*m.addmerchant_id += i
	} else {
		m.addmerchant_id = &i
	}
}

// AddedMerchantID returns the value that was added to the "merchant_id" field in this mutation.
func (m *UserMutation) AddedMerchantID() (r int64, exists bool) {
	v := m.addmerchant_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetMerchantID resets all changes to the "merchant_id" field.
func (m *UserMutation) ResetMerchantID() {
	m.merchant_id = nil
	m.addmerchant_id = nil
}

// SetRole sets the "role" field.
func (m *UserMutation) SetRole(s string) {
	m.role = &s
}

// Role returns the value of the "role" field in the mutation.
func (m *UserMutation) Role() (r string, exists bool) {
	v := m.role
	if v == nil {
		return
	}
	return *v, true
}

// OldRole returns the old "role" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldRole(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRole is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRole requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRole: %w", err)
	}
	return oldValue.Role, nil
}

// ResetRole resets all changes to the "role" field.
func (m *UserMutation) ResetRole() {
	m.role = nil
}

// SetAvatar sets the "avatar" field.
func (m *UserMutation) SetAvatar(s string) {
	m.avatar = &s
}

// Avatar returns the value of the "avatar" field in the mutation.
func (m *UserMutation) Avatar() (r string, exists bool) {
	v := m.avatar
	if v == nil {
		return
	}
	return *v, true
}

// OldAvatar returns the old "avatar" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldAvatar(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAvatar is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAvatar requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAvatar: %w", err)
	}
	return oldValue.Avatar, nil
}

// ClearAvatar clears the value of the "avatar" field.
func (m *UserMutation) ClearAvatar() {
	m.avatar = nil
	m.clearedFields[user.FieldAvatar] = struct{}{}
}

// AvatarCleared returns if the "avatar" field was cleared in this mutation.
func (m *UserMutation) AvatarCleared() bool {
	_, ok := m.clearedFields[user.FieldAvatar]
	return ok
}

// ResetAvatar resets all changes to the "avatar" field.
func (m *UserMutation) ResetAvatar() {
	m.avatar = nil
	delete(m.clearedFields, user.FieldAvatar)
}

// SetEmail sets the "email" field.
func (m *UserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *UserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *UserMutation) ResetEmail() {
	m.email = nil
}

// SetPhone sets the "phone" field.
func (m *UserMutation) SetPhone(s string) {
	m.phone = &s
}

// Phone returns the value of the "phone" field in the mutation.
func (m *UserMutation) Phone() (r string, exists bool) {
	v := m.phone
	if v == nil {
		return
	}
	return *v, true
}

// OldPhone returns the old "phone" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPhone(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPhone is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPhone requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhone: %w", err)
	}
	return oldValue.Phone, nil
}

// ResetPhone resets all changes to the "phone" field.
func (m *UserMutation) ResetPhone() {
	m.phone = nil
}

// SetIsMaster sets the "is_master" field.
func (m *UserMutation) SetIsMaster(i int16) {
	m.is_master = &i
	m.addis_master = nil
}

// IsMaster returns the value of the "is_master" field in the mutation.
func (m *UserMutation) IsMaster() (r int16, exists bool) {
	v := m.is_master
	if v == nil {
		return
	}
	return *v, true
}

// OldIsMaster returns the old "is_master" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldIsMaster(ctx context.Context) (v int16, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsMaster is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsMaster requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsMaster: %w", err)
	}
	return oldValue.IsMaster, nil
}

// AddIsMaster adds i to the "is_master" field.
func (m *UserMutation) AddIsMaster(i int16) {
	if m.addis_master != nil {
		*m.addis_master += i
	} else {
		m.addis_master = &i
	}
}

// AddedIsMaster returns the value that was added to the "is_master" field in this mutation.
func (m *UserMutation) AddedIsMaster() (r int16, exists bool) {
	v := m.addis_master
	if v == nil {
		return
	}
	return *v, true
}

// ResetIsMaster resets all changes to the "is_master" field.
func (m *UserMutation) ResetIsMaster() {
	m.is_master = nil
	m.addis_master = nil
}

// SetCreateTime sets the "create_time" field.
func (m *UserMutation) SetCreateTime(i int32) {
	m.create_time = &i
	m.addcreate_time = nil
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *UserMutation) CreateTime() (r int32, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreateTime(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// AddCreateTime adds i to the "create_time" field.
func (m *UserMutation) AddCreateTime(i int32) {
	if m.addcreate_time != nil {
		*m.addcreate_time += i
	} else {
		m.addcreate_time = &i
	}
}

// AddedCreateTime returns the value that was added to the "create_time" field in this mutation.
func (m *UserMutation) AddedCreateTime() (r int32, exists bool) {
	v := m.addcreate_time
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *UserMutation) ResetCreateTime() {
	m.create_time = nil
	m.addcreate_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *UserMutation) SetUpdateTime(i int32) {
	m.update_time = &i
	m.addupdate_time = nil
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *UserMutation) UpdateTime() (r int32, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUpdateTime(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// AddUpdateTime adds i to the "update_time" field.
func (m *UserMutation) AddUpdateTime(i int32) {
	if m.addupdate_time != nil {
		*m.addupdate_time += i
	} else {
		m.addupdate_time = &i
	}
}

// AddedUpdateTime returns the value that was added to the "update_time" field in this mutation.
func (m *UserMutation) AddedUpdateTime() (r int32, exists bool) {
	v := m.addupdate_time
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *UserMutation) ResetUpdateTime() {
	m.update_time = nil
	m.addupdate_time = nil
}

// SetLastLoginTime sets the "last_login_time" field.
func (m *UserMutation) SetLastLoginTime(i int32) {
	m.last_login_time = &i
	m.addlast_login_time = nil
}

// LastLoginTime returns the value of the "last_login_time" field in the mutation.
func (m *UserMutation) LastLoginTime() (r int32, exists bool) {
	v := m.last_login_time
	if v == nil {
		return
	}
	return *v, true
}

// OldLastLoginTime returns the old "last_login_time" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldLastLoginTime(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastLoginTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastLoginTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastLoginTime: %w", err)
	}
	return oldValue.LastLoginTime, nil
}

// AddLastLoginTime adds i to the "last_login_time" field.
func (m *UserMutation) AddLastLoginTime(i int32) {
	if m.addlast_login_time != nil {
		*m.addlast_login_time += i
	} else {
		m.addlast_login_time = &i
	}
}

// AddedLastLoginTime returns the value that was added to the "last_login_time" field in this mutation.
func (m *UserMutation) AddedLastLoginTime() (r int32, exists bool) {
	v := m.addlast_login_time
	if v == nil {
		return
	}
	return *v, true
}

// ResetLastLoginTime resets all changes to the "last_login_time" field.
func (m *UserMutation) ResetLastLoginTime() {
	m.last_login_time = nil
	m.addlast_login_time = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 13)
	if m.guid != nil {
		fields = append(fields, user.FieldGUID)
	}
	if m.username != nil {
		fields = append(fields, user.FieldUsername)
	}
	if m.password != nil {
		fields = append(fields, user.FieldPassword)
	}
	if m.nick_name != nil {
		fields = append(fields, user.FieldNickName)
	}
	if m.merchant_id != nil {
		fields = append(fields, user.FieldMerchantID)
	}
	if m.role != nil {
		fields = append(fields, user.FieldRole)
	}
	if m.avatar != nil {
		fields = append(fields, user.FieldAvatar)
	}
	if m.email != nil {
		fields = append(fields, user.FieldEmail)
	}
	if m.phone != nil {
		fields = append(fields, user.FieldPhone)
	}
	if m.is_master != nil {
		fields = append(fields, user.FieldIsMaster)
	}
	if m.create_time != nil {
		fields = append(fields, user.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, user.FieldUpdateTime)
	}
	if m.last_login_time != nil {
		fields = append(fields, user.FieldLastLoginTime)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldGUID:
		return m.GUID()
	case user.FieldUsername:
		return m.Username()
	case user.FieldPassword:
		return m.Password()
	case user.FieldNickName:
		return m.NickName()
	case user.FieldMerchantID:
		return m.MerchantID()
	case user.FieldRole:
		return m.Role()
	case user.FieldAvatar:
		return m.Avatar()
	case user.FieldEmail:
		return m.Email()
	case user.FieldPhone:
		return m.Phone()
	case user.FieldIsMaster:
		return m.IsMaster()
	case user.FieldCreateTime:
		return m.CreateTime()
	case user.FieldUpdateTime:
		return m.UpdateTime()
	case user.FieldLastLoginTime:
		return m.LastLoginTime()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldGUID:
		return m.OldGUID(ctx)
	case user.FieldUsername:
		return m.OldUsername(ctx)
	case user.FieldPassword:
		return m.OldPassword(ctx)
	case user.FieldNickName:
		return m.OldNickName(ctx)
	case user.FieldMerchantID:
		return m.OldMerchantID(ctx)
	case user.FieldRole:
		return m.OldRole(ctx)
	case user.FieldAvatar:
		return m.OldAvatar(ctx)
	case user.FieldEmail:
		return m.OldEmail(ctx)
	case user.FieldPhone:
		return m.OldPhone(ctx)
	case user.FieldIsMaster:
		return m.OldIsMaster(ctx)
	case user.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case user.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case user.FieldLastLoginTime:
		return m.OldLastLoginTime(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldGUID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGUID(v)
		return nil
	case user.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	case user.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	case user.FieldNickName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNickName(v)
		return nil
	case user.FieldMerchantID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMerchantID(v)
		return nil
	case user.FieldRole:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRole(v)
		return nil
	case user.FieldAvatar:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAvatar(v)
		return nil
	case user.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case user.FieldPhone:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhone(v)
		return nil
	case user.FieldIsMaster:
		v, ok := value.(int16)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsMaster(v)
		return nil
	case user.FieldCreateTime:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case user.FieldUpdateTime:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case user.FieldLastLoginTime:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastLoginTime(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	var fields []string
	if m.addmerchant_id != nil {
		fields = append(fields, user.FieldMerchantID)
	}
	if m.addis_master != nil {
		fields = append(fields, user.FieldIsMaster)
	}
	if m.addcreate_time != nil {
		fields = append(fields, user.FieldCreateTime)
	}
	if m.addupdate_time != nil {
		fields = append(fields, user.FieldUpdateTime)
	}
	if m.addlast_login_time != nil {
		fields = append(fields, user.FieldLastLoginTime)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case user.FieldMerchantID:
		return m.AddedMerchantID()
	case user.FieldIsMaster:
		return m.AddedIsMaster()
	case user.FieldCreateTime:
		return m.AddedCreateTime()
	case user.FieldUpdateTime:
		return m.AddedUpdateTime()
	case user.FieldLastLoginTime:
		return m.AddedLastLoginTime()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	case user.FieldMerchantID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMerchantID(v)
		return nil
	case user.FieldIsMaster:
		v, ok := value.(int16)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddIsMaster(v)
		return nil
	case user.FieldCreateTime:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreateTime(v)
		return nil
	case user.FieldUpdateTime:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdateTime(v)
		return nil
	case user.FieldLastLoginTime:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLastLoginTime(v)
		return nil
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(user.FieldAvatar) {
		fields = append(fields, user.FieldAvatar)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	switch name {
	case user.FieldAvatar:
		m.ClearAvatar()
		return nil
	}
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldGUID:
		m.ResetGUID()
		return nil
	case user.FieldUsername:
		m.ResetUsername()
		return nil
	case user.FieldPassword:
		m.ResetPassword()
		return nil
	case user.FieldNickName:
		m.ResetNickName()
		return nil
	case user.FieldMerchantID:
		m.ResetMerchantID()
		return nil
	case user.FieldRole:
		m.ResetRole()
		return nil
	case user.FieldAvatar:
		m.ResetAvatar()
		return nil
	case user.FieldEmail:
		m.ResetEmail()
		return nil
	case user.FieldPhone:
		m.ResetPhone()
		return nil
	case user.FieldIsMaster:
		m.ResetIsMaster()
		return nil
	case user.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case user.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case user.FieldLastLoginTime:
		m.ResetLastLoginTime()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown User edge %s", name)
}
