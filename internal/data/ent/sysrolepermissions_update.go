// Code generated by ent, DO NOT EDIT.

package ent

import (
	"back-end/merchant/internal/data/ent/predicate"
	"back-end/merchant/internal/data/ent/sysrolepermissions"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SysRolePermissionsUpdate is the builder for updating SysRolePermissions entities.
type SysRolePermissionsUpdate struct {
	config
	hooks    []Hook
	mutation *SysRolePermissionsMutation
}

// Where appends a list predicates to the SysRolePermissionsUpdate builder.
func (srpu *SysRolePermissionsUpdate) Where(ps ...predicate.SysRolePermissions) *SysRolePermissionsUpdate {
	srpu.mutation.Where(ps...)
	return srpu
}

// SetRoleID sets the "role_id" field.
func (srpu *SysRolePermissionsUpdate) SetRoleID(i int64) *SysRolePermissionsUpdate {
	srpu.mutation.ResetRoleID()
	srpu.mutation.SetRoleID(i)
	return srpu
}

// SetNillableRoleID sets the "role_id" field if the given value is not nil.
func (srpu *SysRolePermissionsUpdate) SetNillableRoleID(i *int64) *SysRolePermissionsUpdate {
	if i != nil {
		srpu.SetRoleID(*i)
	}
	return srpu
}

// AddRoleID adds i to the "role_id" field.
func (srpu *SysRolePermissionsUpdate) AddRoleID(i int64) *SysRolePermissionsUpdate {
	srpu.mutation.AddRoleID(i)
	return srpu
}

// SetPermissionID sets the "permission_id" field.
func (srpu *SysRolePermissionsUpdate) SetPermissionID(i int64) *SysRolePermissionsUpdate {
	srpu.mutation.ResetPermissionID()
	srpu.mutation.SetPermissionID(i)
	return srpu
}

// SetNillablePermissionID sets the "permission_id" field if the given value is not nil.
func (srpu *SysRolePermissionsUpdate) SetNillablePermissionID(i *int64) *SysRolePermissionsUpdate {
	if i != nil {
		srpu.SetPermissionID(*i)
	}
	return srpu
}

// AddPermissionID adds i to the "permission_id" field.
func (srpu *SysRolePermissionsUpdate) AddPermissionID(i int64) *SysRolePermissionsUpdate {
	srpu.mutation.AddPermissionID(i)
	return srpu
}

// SetCreateTime sets the "create_time" field.
func (srpu *SysRolePermissionsUpdate) SetCreateTime(i int32) *SysRolePermissionsUpdate {
	srpu.mutation.ResetCreateTime()
	srpu.mutation.SetCreateTime(i)
	return srpu
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (srpu *SysRolePermissionsUpdate) SetNillableCreateTime(i *int32) *SysRolePermissionsUpdate {
	if i != nil {
		srpu.SetCreateTime(*i)
	}
	return srpu
}

// AddCreateTime adds i to the "create_time" field.
func (srpu *SysRolePermissionsUpdate) AddCreateTime(i int32) *SysRolePermissionsUpdate {
	srpu.mutation.AddCreateTime(i)
	return srpu
}

// SetUpdateTime sets the "update_time" field.
func (srpu *SysRolePermissionsUpdate) SetUpdateTime(i int32) *SysRolePermissionsUpdate {
	srpu.mutation.ResetUpdateTime()
	srpu.mutation.SetUpdateTime(i)
	return srpu
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (srpu *SysRolePermissionsUpdate) SetNillableUpdateTime(i *int32) *SysRolePermissionsUpdate {
	if i != nil {
		srpu.SetUpdateTime(*i)
	}
	return srpu
}

// AddUpdateTime adds i to the "update_time" field.
func (srpu *SysRolePermissionsUpdate) AddUpdateTime(i int32) *SysRolePermissionsUpdate {
	srpu.mutation.AddUpdateTime(i)
	return srpu
}

// Mutation returns the SysRolePermissionsMutation object of the builder.
func (srpu *SysRolePermissionsUpdate) Mutation() *SysRolePermissionsMutation {
	return srpu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (srpu *SysRolePermissionsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, srpu.sqlSave, srpu.mutation, srpu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (srpu *SysRolePermissionsUpdate) SaveX(ctx context.Context) int {
	affected, err := srpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (srpu *SysRolePermissionsUpdate) Exec(ctx context.Context) error {
	_, err := srpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (srpu *SysRolePermissionsUpdate) ExecX(ctx context.Context) {
	if err := srpu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (srpu *SysRolePermissionsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(sysrolepermissions.Table, sysrolepermissions.Columns, sqlgraph.NewFieldSpec(sysrolepermissions.FieldID, field.TypeInt64))
	if ps := srpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := srpu.mutation.RoleID(); ok {
		_spec.SetField(sysrolepermissions.FieldRoleID, field.TypeInt64, value)
	}
	if value, ok := srpu.mutation.AddedRoleID(); ok {
		_spec.AddField(sysrolepermissions.FieldRoleID, field.TypeInt64, value)
	}
	if value, ok := srpu.mutation.PermissionID(); ok {
		_spec.SetField(sysrolepermissions.FieldPermissionID, field.TypeInt64, value)
	}
	if value, ok := srpu.mutation.AddedPermissionID(); ok {
		_spec.AddField(sysrolepermissions.FieldPermissionID, field.TypeInt64, value)
	}
	if value, ok := srpu.mutation.CreateTime(); ok {
		_spec.SetField(sysrolepermissions.FieldCreateTime, field.TypeInt32, value)
	}
	if value, ok := srpu.mutation.AddedCreateTime(); ok {
		_spec.AddField(sysrolepermissions.FieldCreateTime, field.TypeInt32, value)
	}
	if value, ok := srpu.mutation.UpdateTime(); ok {
		_spec.SetField(sysrolepermissions.FieldUpdateTime, field.TypeInt32, value)
	}
	if value, ok := srpu.mutation.AddedUpdateTime(); ok {
		_spec.AddField(sysrolepermissions.FieldUpdateTime, field.TypeInt32, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, srpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sysrolepermissions.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	srpu.mutation.done = true
	return n, nil
}

// SysRolePermissionsUpdateOne is the builder for updating a single SysRolePermissions entity.
type SysRolePermissionsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SysRolePermissionsMutation
}

// SetRoleID sets the "role_id" field.
func (srpuo *SysRolePermissionsUpdateOne) SetRoleID(i int64) *SysRolePermissionsUpdateOne {
	srpuo.mutation.ResetRoleID()
	srpuo.mutation.SetRoleID(i)
	return srpuo
}

// SetNillableRoleID sets the "role_id" field if the given value is not nil.
func (srpuo *SysRolePermissionsUpdateOne) SetNillableRoleID(i *int64) *SysRolePermissionsUpdateOne {
	if i != nil {
		srpuo.SetRoleID(*i)
	}
	return srpuo
}

// AddRoleID adds i to the "role_id" field.
func (srpuo *SysRolePermissionsUpdateOne) AddRoleID(i int64) *SysRolePermissionsUpdateOne {
	srpuo.mutation.AddRoleID(i)
	return srpuo
}

// SetPermissionID sets the "permission_id" field.
func (srpuo *SysRolePermissionsUpdateOne) SetPermissionID(i int64) *SysRolePermissionsUpdateOne {
	srpuo.mutation.ResetPermissionID()
	srpuo.mutation.SetPermissionID(i)
	return srpuo
}

// SetNillablePermissionID sets the "permission_id" field if the given value is not nil.
func (srpuo *SysRolePermissionsUpdateOne) SetNillablePermissionID(i *int64) *SysRolePermissionsUpdateOne {
	if i != nil {
		srpuo.SetPermissionID(*i)
	}
	return srpuo
}

// AddPermissionID adds i to the "permission_id" field.
func (srpuo *SysRolePermissionsUpdateOne) AddPermissionID(i int64) *SysRolePermissionsUpdateOne {
	srpuo.mutation.AddPermissionID(i)
	return srpuo
}

// SetCreateTime sets the "create_time" field.
func (srpuo *SysRolePermissionsUpdateOne) SetCreateTime(i int32) *SysRolePermissionsUpdateOne {
	srpuo.mutation.ResetCreateTime()
	srpuo.mutation.SetCreateTime(i)
	return srpuo
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (srpuo *SysRolePermissionsUpdateOne) SetNillableCreateTime(i *int32) *SysRolePermissionsUpdateOne {
	if i != nil {
		srpuo.SetCreateTime(*i)
	}
	return srpuo
}

// AddCreateTime adds i to the "create_time" field.
func (srpuo *SysRolePermissionsUpdateOne) AddCreateTime(i int32) *SysRolePermissionsUpdateOne {
	srpuo.mutation.AddCreateTime(i)
	return srpuo
}

// SetUpdateTime sets the "update_time" field.
func (srpuo *SysRolePermissionsUpdateOne) SetUpdateTime(i int32) *SysRolePermissionsUpdateOne {
	srpuo.mutation.ResetUpdateTime()
	srpuo.mutation.SetUpdateTime(i)
	return srpuo
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (srpuo *SysRolePermissionsUpdateOne) SetNillableUpdateTime(i *int32) *SysRolePermissionsUpdateOne {
	if i != nil {
		srpuo.SetUpdateTime(*i)
	}
	return srpuo
}

// AddUpdateTime adds i to the "update_time" field.
func (srpuo *SysRolePermissionsUpdateOne) AddUpdateTime(i int32) *SysRolePermissionsUpdateOne {
	srpuo.mutation.AddUpdateTime(i)
	return srpuo
}

// Mutation returns the SysRolePermissionsMutation object of the builder.
func (srpuo *SysRolePermissionsUpdateOne) Mutation() *SysRolePermissionsMutation {
	return srpuo.mutation
}

// Where appends a list predicates to the SysRolePermissionsUpdate builder.
func (srpuo *SysRolePermissionsUpdateOne) Where(ps ...predicate.SysRolePermissions) *SysRolePermissionsUpdateOne {
	srpuo.mutation.Where(ps...)
	return srpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (srpuo *SysRolePermissionsUpdateOne) Select(field string, fields ...string) *SysRolePermissionsUpdateOne {
	srpuo.fields = append([]string{field}, fields...)
	return srpuo
}

// Save executes the query and returns the updated SysRolePermissions entity.
func (srpuo *SysRolePermissionsUpdateOne) Save(ctx context.Context) (*SysRolePermissions, error) {
	return withHooks(ctx, srpuo.sqlSave, srpuo.mutation, srpuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (srpuo *SysRolePermissionsUpdateOne) SaveX(ctx context.Context) *SysRolePermissions {
	node, err := srpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (srpuo *SysRolePermissionsUpdateOne) Exec(ctx context.Context) error {
	_, err := srpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (srpuo *SysRolePermissionsUpdateOne) ExecX(ctx context.Context) {
	if err := srpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (srpuo *SysRolePermissionsUpdateOne) sqlSave(ctx context.Context) (_node *SysRolePermissions, err error) {
	_spec := sqlgraph.NewUpdateSpec(sysrolepermissions.Table, sysrolepermissions.Columns, sqlgraph.NewFieldSpec(sysrolepermissions.FieldID, field.TypeInt64))
	id, ok := srpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SysRolePermissions.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := srpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sysrolepermissions.FieldID)
		for _, f := range fields {
			if !sysrolepermissions.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != sysrolepermissions.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := srpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := srpuo.mutation.RoleID(); ok {
		_spec.SetField(sysrolepermissions.FieldRoleID, field.TypeInt64, value)
	}
	if value, ok := srpuo.mutation.AddedRoleID(); ok {
		_spec.AddField(sysrolepermissions.FieldRoleID, field.TypeInt64, value)
	}
	if value, ok := srpuo.mutation.PermissionID(); ok {
		_spec.SetField(sysrolepermissions.FieldPermissionID, field.TypeInt64, value)
	}
	if value, ok := srpuo.mutation.AddedPermissionID(); ok {
		_spec.AddField(sysrolepermissions.FieldPermissionID, field.TypeInt64, value)
	}
	if value, ok := srpuo.mutation.CreateTime(); ok {
		_spec.SetField(sysrolepermissions.FieldCreateTime, field.TypeInt32, value)
	}
	if value, ok := srpuo.mutation.AddedCreateTime(); ok {
		_spec.AddField(sysrolepermissions.FieldCreateTime, field.TypeInt32, value)
	}
	if value, ok := srpuo.mutation.UpdateTime(); ok {
		_spec.SetField(sysrolepermissions.FieldUpdateTime, field.TypeInt32, value)
	}
	if value, ok := srpuo.mutation.AddedUpdateTime(); ok {
		_spec.AddField(sysrolepermissions.FieldUpdateTime, field.TypeInt32, value)
	}
	_node = &SysRolePermissions{config: srpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, srpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sysrolepermissions.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	srpuo.mutation.done = true
	return _node, nil
}
