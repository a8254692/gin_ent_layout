// Code generated by ent, DO NOT EDIT.

package ent

import (
	"back-end/merchant/internal/data/ent/merchantchannelbind"
	"back-end/merchant/internal/data/ent/predicate"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MerchantChannelBindUpdate is the builder for updating MerchantChannelBind entities.
type MerchantChannelBindUpdate struct {
	config
	hooks    []Hook
	mutation *MerchantChannelBindMutation
}

// Where appends a list predicates to the MerchantChannelBindUpdate builder.
func (mcbu *MerchantChannelBindUpdate) Where(ps ...predicate.MerchantChannelBind) *MerchantChannelBindUpdate {
	mcbu.mutation.Where(ps...)
	return mcbu
}

// SetMerchantID sets the "merchant_id" field.
func (mcbu *MerchantChannelBindUpdate) SetMerchantID(i int32) *MerchantChannelBindUpdate {
	mcbu.mutation.ResetMerchantID()
	mcbu.mutation.SetMerchantID(i)
	return mcbu
}

// SetNillableMerchantID sets the "merchant_id" field if the given value is not nil.
func (mcbu *MerchantChannelBindUpdate) SetNillableMerchantID(i *int32) *MerchantChannelBindUpdate {
	if i != nil {
		mcbu.SetMerchantID(*i)
	}
	return mcbu
}

// AddMerchantID adds i to the "merchant_id" field.
func (mcbu *MerchantChannelBindUpdate) AddMerchantID(i int32) *MerchantChannelBindUpdate {
	mcbu.mutation.AddMerchantID(i)
	return mcbu
}

// SetChannelID sets the "channel_id" field.
func (mcbu *MerchantChannelBindUpdate) SetChannelID(i int32) *MerchantChannelBindUpdate {
	mcbu.mutation.ResetChannelID()
	mcbu.mutation.SetChannelID(i)
	return mcbu
}

// SetNillableChannelID sets the "channel_id" field if the given value is not nil.
func (mcbu *MerchantChannelBindUpdate) SetNillableChannelID(i *int32) *MerchantChannelBindUpdate {
	if i != nil {
		mcbu.SetChannelID(*i)
	}
	return mcbu
}

// AddChannelID adds i to the "channel_id" field.
func (mcbu *MerchantChannelBindUpdate) AddChannelID(i int32) *MerchantChannelBindUpdate {
	mcbu.mutation.AddChannelID(i)
	return mcbu
}

// SetStatus sets the "status" field.
func (mcbu *MerchantChannelBindUpdate) SetStatus(i int16) *MerchantChannelBindUpdate {
	mcbu.mutation.ResetStatus()
	mcbu.mutation.SetStatus(i)
	return mcbu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (mcbu *MerchantChannelBindUpdate) SetNillableStatus(i *int16) *MerchantChannelBindUpdate {
	if i != nil {
		mcbu.SetStatus(*i)
	}
	return mcbu
}

// AddStatus adds i to the "status" field.
func (mcbu *MerchantChannelBindUpdate) AddStatus(i int16) *MerchantChannelBindUpdate {
	mcbu.mutation.AddStatus(i)
	return mcbu
}

// SetCreateTime sets the "create_time" field.
func (mcbu *MerchantChannelBindUpdate) SetCreateTime(i int32) *MerchantChannelBindUpdate {
	mcbu.mutation.ResetCreateTime()
	mcbu.mutation.SetCreateTime(i)
	return mcbu
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (mcbu *MerchantChannelBindUpdate) SetNillableCreateTime(i *int32) *MerchantChannelBindUpdate {
	if i != nil {
		mcbu.SetCreateTime(*i)
	}
	return mcbu
}

// AddCreateTime adds i to the "create_time" field.
func (mcbu *MerchantChannelBindUpdate) AddCreateTime(i int32) *MerchantChannelBindUpdate {
	mcbu.mutation.AddCreateTime(i)
	return mcbu
}

// SetUpdateTime sets the "update_time" field.
func (mcbu *MerchantChannelBindUpdate) SetUpdateTime(i int32) *MerchantChannelBindUpdate {
	mcbu.mutation.ResetUpdateTime()
	mcbu.mutation.SetUpdateTime(i)
	return mcbu
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (mcbu *MerchantChannelBindUpdate) SetNillableUpdateTime(i *int32) *MerchantChannelBindUpdate {
	if i != nil {
		mcbu.SetUpdateTime(*i)
	}
	return mcbu
}

// AddUpdateTime adds i to the "update_time" field.
func (mcbu *MerchantChannelBindUpdate) AddUpdateTime(i int32) *MerchantChannelBindUpdate {
	mcbu.mutation.AddUpdateTime(i)
	return mcbu
}

// Mutation returns the MerchantChannelBindMutation object of the builder.
func (mcbu *MerchantChannelBindUpdate) Mutation() *MerchantChannelBindMutation {
	return mcbu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mcbu *MerchantChannelBindUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, mcbu.sqlSave, mcbu.mutation, mcbu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mcbu *MerchantChannelBindUpdate) SaveX(ctx context.Context) int {
	affected, err := mcbu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mcbu *MerchantChannelBindUpdate) Exec(ctx context.Context) error {
	_, err := mcbu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcbu *MerchantChannelBindUpdate) ExecX(ctx context.Context) {
	if err := mcbu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (mcbu *MerchantChannelBindUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(merchantchannelbind.Table, merchantchannelbind.Columns, sqlgraph.NewFieldSpec(merchantchannelbind.FieldID, field.TypeInt32))
	if ps := mcbu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mcbu.mutation.MerchantID(); ok {
		_spec.SetField(merchantchannelbind.FieldMerchantID, field.TypeInt32, value)
	}
	if value, ok := mcbu.mutation.AddedMerchantID(); ok {
		_spec.AddField(merchantchannelbind.FieldMerchantID, field.TypeInt32, value)
	}
	if value, ok := mcbu.mutation.ChannelID(); ok {
		_spec.SetField(merchantchannelbind.FieldChannelID, field.TypeInt32, value)
	}
	if value, ok := mcbu.mutation.AddedChannelID(); ok {
		_spec.AddField(merchantchannelbind.FieldChannelID, field.TypeInt32, value)
	}
	if value, ok := mcbu.mutation.Status(); ok {
		_spec.SetField(merchantchannelbind.FieldStatus, field.TypeInt16, value)
	}
	if value, ok := mcbu.mutation.AddedStatus(); ok {
		_spec.AddField(merchantchannelbind.FieldStatus, field.TypeInt16, value)
	}
	if value, ok := mcbu.mutation.CreateTime(); ok {
		_spec.SetField(merchantchannelbind.FieldCreateTime, field.TypeInt32, value)
	}
	if value, ok := mcbu.mutation.AddedCreateTime(); ok {
		_spec.AddField(merchantchannelbind.FieldCreateTime, field.TypeInt32, value)
	}
	if value, ok := mcbu.mutation.UpdateTime(); ok {
		_spec.SetField(merchantchannelbind.FieldUpdateTime, field.TypeInt32, value)
	}
	if value, ok := mcbu.mutation.AddedUpdateTime(); ok {
		_spec.AddField(merchantchannelbind.FieldUpdateTime, field.TypeInt32, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mcbu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{merchantchannelbind.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mcbu.mutation.done = true
	return n, nil
}

// MerchantChannelBindUpdateOne is the builder for updating a single MerchantChannelBind entity.
type MerchantChannelBindUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MerchantChannelBindMutation
}

// SetMerchantID sets the "merchant_id" field.
func (mcbuo *MerchantChannelBindUpdateOne) SetMerchantID(i int32) *MerchantChannelBindUpdateOne {
	mcbuo.mutation.ResetMerchantID()
	mcbuo.mutation.SetMerchantID(i)
	return mcbuo
}

// SetNillableMerchantID sets the "merchant_id" field if the given value is not nil.
func (mcbuo *MerchantChannelBindUpdateOne) SetNillableMerchantID(i *int32) *MerchantChannelBindUpdateOne {
	if i != nil {
		mcbuo.SetMerchantID(*i)
	}
	return mcbuo
}

// AddMerchantID adds i to the "merchant_id" field.
func (mcbuo *MerchantChannelBindUpdateOne) AddMerchantID(i int32) *MerchantChannelBindUpdateOne {
	mcbuo.mutation.AddMerchantID(i)
	return mcbuo
}

// SetChannelID sets the "channel_id" field.
func (mcbuo *MerchantChannelBindUpdateOne) SetChannelID(i int32) *MerchantChannelBindUpdateOne {
	mcbuo.mutation.ResetChannelID()
	mcbuo.mutation.SetChannelID(i)
	return mcbuo
}

// SetNillableChannelID sets the "channel_id" field if the given value is not nil.
func (mcbuo *MerchantChannelBindUpdateOne) SetNillableChannelID(i *int32) *MerchantChannelBindUpdateOne {
	if i != nil {
		mcbuo.SetChannelID(*i)
	}
	return mcbuo
}

// AddChannelID adds i to the "channel_id" field.
func (mcbuo *MerchantChannelBindUpdateOne) AddChannelID(i int32) *MerchantChannelBindUpdateOne {
	mcbuo.mutation.AddChannelID(i)
	return mcbuo
}

// SetStatus sets the "status" field.
func (mcbuo *MerchantChannelBindUpdateOne) SetStatus(i int16) *MerchantChannelBindUpdateOne {
	mcbuo.mutation.ResetStatus()
	mcbuo.mutation.SetStatus(i)
	return mcbuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (mcbuo *MerchantChannelBindUpdateOne) SetNillableStatus(i *int16) *MerchantChannelBindUpdateOne {
	if i != nil {
		mcbuo.SetStatus(*i)
	}
	return mcbuo
}

// AddStatus adds i to the "status" field.
func (mcbuo *MerchantChannelBindUpdateOne) AddStatus(i int16) *MerchantChannelBindUpdateOne {
	mcbuo.mutation.AddStatus(i)
	return mcbuo
}

// SetCreateTime sets the "create_time" field.
func (mcbuo *MerchantChannelBindUpdateOne) SetCreateTime(i int32) *MerchantChannelBindUpdateOne {
	mcbuo.mutation.ResetCreateTime()
	mcbuo.mutation.SetCreateTime(i)
	return mcbuo
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (mcbuo *MerchantChannelBindUpdateOne) SetNillableCreateTime(i *int32) *MerchantChannelBindUpdateOne {
	if i != nil {
		mcbuo.SetCreateTime(*i)
	}
	return mcbuo
}

// AddCreateTime adds i to the "create_time" field.
func (mcbuo *MerchantChannelBindUpdateOne) AddCreateTime(i int32) *MerchantChannelBindUpdateOne {
	mcbuo.mutation.AddCreateTime(i)
	return mcbuo
}

// SetUpdateTime sets the "update_time" field.
func (mcbuo *MerchantChannelBindUpdateOne) SetUpdateTime(i int32) *MerchantChannelBindUpdateOne {
	mcbuo.mutation.ResetUpdateTime()
	mcbuo.mutation.SetUpdateTime(i)
	return mcbuo
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (mcbuo *MerchantChannelBindUpdateOne) SetNillableUpdateTime(i *int32) *MerchantChannelBindUpdateOne {
	if i != nil {
		mcbuo.SetUpdateTime(*i)
	}
	return mcbuo
}

// AddUpdateTime adds i to the "update_time" field.
func (mcbuo *MerchantChannelBindUpdateOne) AddUpdateTime(i int32) *MerchantChannelBindUpdateOne {
	mcbuo.mutation.AddUpdateTime(i)
	return mcbuo
}

// Mutation returns the MerchantChannelBindMutation object of the builder.
func (mcbuo *MerchantChannelBindUpdateOne) Mutation() *MerchantChannelBindMutation {
	return mcbuo.mutation
}

// Where appends a list predicates to the MerchantChannelBindUpdate builder.
func (mcbuo *MerchantChannelBindUpdateOne) Where(ps ...predicate.MerchantChannelBind) *MerchantChannelBindUpdateOne {
	mcbuo.mutation.Where(ps...)
	return mcbuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (mcbuo *MerchantChannelBindUpdateOne) Select(field string, fields ...string) *MerchantChannelBindUpdateOne {
	mcbuo.fields = append([]string{field}, fields...)
	return mcbuo
}

// Save executes the query and returns the updated MerchantChannelBind entity.
func (mcbuo *MerchantChannelBindUpdateOne) Save(ctx context.Context) (*MerchantChannelBind, error) {
	return withHooks(ctx, mcbuo.sqlSave, mcbuo.mutation, mcbuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mcbuo *MerchantChannelBindUpdateOne) SaveX(ctx context.Context) *MerchantChannelBind {
	node, err := mcbuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mcbuo *MerchantChannelBindUpdateOne) Exec(ctx context.Context) error {
	_, err := mcbuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcbuo *MerchantChannelBindUpdateOne) ExecX(ctx context.Context) {
	if err := mcbuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (mcbuo *MerchantChannelBindUpdateOne) sqlSave(ctx context.Context) (_node *MerchantChannelBind, err error) {
	_spec := sqlgraph.NewUpdateSpec(merchantchannelbind.Table, merchantchannelbind.Columns, sqlgraph.NewFieldSpec(merchantchannelbind.FieldID, field.TypeInt32))
	id, ok := mcbuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "MerchantChannelBind.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := mcbuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, merchantchannelbind.FieldID)
		for _, f := range fields {
			if !merchantchannelbind.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != merchantchannelbind.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := mcbuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mcbuo.mutation.MerchantID(); ok {
		_spec.SetField(merchantchannelbind.FieldMerchantID, field.TypeInt32, value)
	}
	if value, ok := mcbuo.mutation.AddedMerchantID(); ok {
		_spec.AddField(merchantchannelbind.FieldMerchantID, field.TypeInt32, value)
	}
	if value, ok := mcbuo.mutation.ChannelID(); ok {
		_spec.SetField(merchantchannelbind.FieldChannelID, field.TypeInt32, value)
	}
	if value, ok := mcbuo.mutation.AddedChannelID(); ok {
		_spec.AddField(merchantchannelbind.FieldChannelID, field.TypeInt32, value)
	}
	if value, ok := mcbuo.mutation.Status(); ok {
		_spec.SetField(merchantchannelbind.FieldStatus, field.TypeInt16, value)
	}
	if value, ok := mcbuo.mutation.AddedStatus(); ok {
		_spec.AddField(merchantchannelbind.FieldStatus, field.TypeInt16, value)
	}
	if value, ok := mcbuo.mutation.CreateTime(); ok {
		_spec.SetField(merchantchannelbind.FieldCreateTime, field.TypeInt32, value)
	}
	if value, ok := mcbuo.mutation.AddedCreateTime(); ok {
		_spec.AddField(merchantchannelbind.FieldCreateTime, field.TypeInt32, value)
	}
	if value, ok := mcbuo.mutation.UpdateTime(); ok {
		_spec.SetField(merchantchannelbind.FieldUpdateTime, field.TypeInt32, value)
	}
	if value, ok := mcbuo.mutation.AddedUpdateTime(); ok {
		_spec.AddField(merchantchannelbind.FieldUpdateTime, field.TypeInt32, value)
	}
	_node = &MerchantChannelBind{config: mcbuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mcbuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{merchantchannelbind.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	mcbuo.mutation.done = true
	return _node, nil
}
