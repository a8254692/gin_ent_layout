// Code generated by ent, DO NOT EDIT.

package ent

import (
	"back-end/merchant/internal/data/ent/sysroleusers"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SysRoleUsersCreate is the builder for creating a SysRoleUsers entity.
type SysRoleUsersCreate struct {
	config
	mutation *SysRoleUsersMutation
	hooks    []Hook
}

// SetRoleID sets the "role_id" field.
func (sruc *SysRoleUsersCreate) SetRoleID(i int64) *SysRoleUsersCreate {
	sruc.mutation.SetRoleID(i)
	return sruc
}

// SetUserID sets the "user_id" field.
func (sruc *SysRoleUsersCreate) SetUserID(i int64) *SysRoleUsersCreate {
	sruc.mutation.SetUserID(i)
	return sruc
}

// SetCreateTime sets the "create_time" field.
func (sruc *SysRoleUsersCreate) SetCreateTime(i int32) *SysRoleUsersCreate {
	sruc.mutation.SetCreateTime(i)
	return sruc
}

// SetUpdateTime sets the "update_time" field.
func (sruc *SysRoleUsersCreate) SetUpdateTime(i int32) *SysRoleUsersCreate {
	sruc.mutation.SetUpdateTime(i)
	return sruc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (sruc *SysRoleUsersCreate) SetNillableUpdateTime(i *int32) *SysRoleUsersCreate {
	if i != nil {
		sruc.SetUpdateTime(*i)
	}
	return sruc
}

// SetID sets the "id" field.
func (sruc *SysRoleUsersCreate) SetID(i int32) *SysRoleUsersCreate {
	sruc.mutation.SetID(i)
	return sruc
}

// Mutation returns the SysRoleUsersMutation object of the builder.
func (sruc *SysRoleUsersCreate) Mutation() *SysRoleUsersMutation {
	return sruc.mutation
}

// Save creates the SysRoleUsers in the database.
func (sruc *SysRoleUsersCreate) Save(ctx context.Context) (*SysRoleUsers, error) {
	sruc.defaults()
	return withHooks(ctx, sruc.sqlSave, sruc.mutation, sruc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sruc *SysRoleUsersCreate) SaveX(ctx context.Context) *SysRoleUsers {
	v, err := sruc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sruc *SysRoleUsersCreate) Exec(ctx context.Context) error {
	_, err := sruc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sruc *SysRoleUsersCreate) ExecX(ctx context.Context) {
	if err := sruc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sruc *SysRoleUsersCreate) defaults() {
	if _, ok := sruc.mutation.UpdateTime(); !ok {
		v := sysroleusers.DefaultUpdateTime
		sruc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sruc *SysRoleUsersCreate) check() error {
	if _, ok := sruc.mutation.RoleID(); !ok {
		return &ValidationError{Name: "role_id", err: errors.New(`ent: missing required field "SysRoleUsers.role_id"`)}
	}
	if _, ok := sruc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "SysRoleUsers.user_id"`)}
	}
	if _, ok := sruc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "SysRoleUsers.create_time"`)}
	}
	if _, ok := sruc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "SysRoleUsers.update_time"`)}
	}
	return nil
}

func (sruc *SysRoleUsersCreate) sqlSave(ctx context.Context) (*SysRoleUsers, error) {
	if err := sruc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sruc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sruc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int32(id)
	}
	sruc.mutation.id = &_node.ID
	sruc.mutation.done = true
	return _node, nil
}

func (sruc *SysRoleUsersCreate) createSpec() (*SysRoleUsers, *sqlgraph.CreateSpec) {
	var (
		_node = &SysRoleUsers{config: sruc.config}
		_spec = sqlgraph.NewCreateSpec(sysroleusers.Table, sqlgraph.NewFieldSpec(sysroleusers.FieldID, field.TypeInt32))
	)
	if id, ok := sruc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sruc.mutation.RoleID(); ok {
		_spec.SetField(sysroleusers.FieldRoleID, field.TypeInt64, value)
		_node.RoleID = value
	}
	if value, ok := sruc.mutation.UserID(); ok {
		_spec.SetField(sysroleusers.FieldUserID, field.TypeInt64, value)
		_node.UserID = value
	}
	if value, ok := sruc.mutation.CreateTime(); ok {
		_spec.SetField(sysroleusers.FieldCreateTime, field.TypeInt32, value)
		_node.CreateTime = value
	}
	if value, ok := sruc.mutation.UpdateTime(); ok {
		_spec.SetField(sysroleusers.FieldUpdateTime, field.TypeInt32, value)
		_node.UpdateTime = value
	}
	return _node, _spec
}

// SysRoleUsersCreateBulk is the builder for creating many SysRoleUsers entities in bulk.
type SysRoleUsersCreateBulk struct {
	config
	err      error
	builders []*SysRoleUsersCreate
}

// Save creates the SysRoleUsers entities in the database.
func (srucb *SysRoleUsersCreateBulk) Save(ctx context.Context) ([]*SysRoleUsers, error) {
	if srucb.err != nil {
		return nil, srucb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(srucb.builders))
	nodes := make([]*SysRoleUsers, len(srucb.builders))
	mutators := make([]Mutator, len(srucb.builders))
	for i := range srucb.builders {
		func(i int, root context.Context) {
			builder := srucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SysRoleUsersMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, srucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, srucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, srucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (srucb *SysRoleUsersCreateBulk) SaveX(ctx context.Context) []*SysRoleUsers {
	v, err := srucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (srucb *SysRoleUsersCreateBulk) Exec(ctx context.Context) error {
	_, err := srucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (srucb *SysRoleUsersCreateBulk) ExecX(ctx context.Context) {
	if err := srucb.Exec(ctx); err != nil {
		panic(err)
	}
}
