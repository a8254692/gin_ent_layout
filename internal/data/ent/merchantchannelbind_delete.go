// Code generated by ent, DO NOT EDIT.

package ent

import (
	"back-end/merchant/internal/data/ent/merchantchannelbind"
	"back-end/merchant/internal/data/ent/predicate"
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MerchantChannelBindDelete is the builder for deleting a MerchantChannelBind entity.
type MerchantChannelBindDelete struct {
	config
	hooks    []Hook
	mutation *MerchantChannelBindMutation
}

// Where appends a list predicates to the MerchantChannelBindDelete builder.
func (mcbd *MerchantChannelBindDelete) Where(ps ...predicate.MerchantChannelBind) *MerchantChannelBindDelete {
	mcbd.mutation.Where(ps...)
	return mcbd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (mcbd *MerchantChannelBindDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, mcbd.sqlExec, mcbd.mutation, mcbd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (mcbd *MerchantChannelBindDelete) ExecX(ctx context.Context) int {
	n, err := mcbd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (mcbd *MerchantChannelBindDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(merchantchannelbind.Table, sqlgraph.NewFieldSpec(merchantchannelbind.FieldID, field.TypeInt32))
	if ps := mcbd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, mcbd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	mcbd.mutation.done = true
	return affected, err
}

// MerchantChannelBindDeleteOne is the builder for deleting a single MerchantChannelBind entity.
type MerchantChannelBindDeleteOne struct {
	mcbd *MerchantChannelBindDelete
}

// Where appends a list predicates to the MerchantChannelBindDelete builder.
func (mcbdo *MerchantChannelBindDeleteOne) Where(ps ...predicate.MerchantChannelBind) *MerchantChannelBindDeleteOne {
	mcbdo.mcbd.mutation.Where(ps...)
	return mcbdo
}

// Exec executes the deletion query.
func (mcbdo *MerchantChannelBindDeleteOne) Exec(ctx context.Context) error {
	n, err := mcbdo.mcbd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{merchantchannelbind.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (mcbdo *MerchantChannelBindDeleteOne) ExecX(ctx context.Context) {
	if err := mcbdo.Exec(ctx); err != nil {
		panic(err)
	}
}
