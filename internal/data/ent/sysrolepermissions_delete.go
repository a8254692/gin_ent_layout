// Code generated by ent, DO NOT EDIT.

package ent

import (
	"back-end/merchant/internal/data/ent/predicate"
	"back-end/merchant/internal/data/ent/sysrolepermissions"
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SysRolePermissionsDelete is the builder for deleting a SysRolePermissions entity.
type SysRolePermissionsDelete struct {
	config
	hooks    []Hook
	mutation *SysRolePermissionsMutation
}

// Where appends a list predicates to the SysRolePermissionsDelete builder.
func (srpd *SysRolePermissionsDelete) Where(ps ...predicate.SysRolePermissions) *SysRolePermissionsDelete {
	srpd.mutation.Where(ps...)
	return srpd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (srpd *SysRolePermissionsDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, srpd.sqlExec, srpd.mutation, srpd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (srpd *SysRolePermissionsDelete) ExecX(ctx context.Context) int {
	n, err := srpd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (srpd *SysRolePermissionsDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(sysrolepermissions.Table, sqlgraph.NewFieldSpec(sysrolepermissions.FieldID, field.TypeInt64))
	if ps := srpd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, srpd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	srpd.mutation.done = true
	return affected, err
}

// SysRolePermissionsDeleteOne is the builder for deleting a single SysRolePermissions entity.
type SysRolePermissionsDeleteOne struct {
	srpd *SysRolePermissionsDelete
}

// Where appends a list predicates to the SysRolePermissionsDelete builder.
func (srpdo *SysRolePermissionsDeleteOne) Where(ps ...predicate.SysRolePermissions) *SysRolePermissionsDeleteOne {
	srpdo.srpd.mutation.Where(ps...)
	return srpdo
}

// Exec executes the deletion query.
func (srpdo *SysRolePermissionsDeleteOne) Exec(ctx context.Context) error {
	n, err := srpdo.srpd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{sysrolepermissions.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (srpdo *SysRolePermissionsDeleteOne) ExecX(ctx context.Context) {
	if err := srpdo.Exec(ctx); err != nil {
		panic(err)
	}
}
