// Code generated by ent, DO NOT EDIT.

package ent

import (
	"back-end/merchant/internal/data/ent/syspermissions"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// SysPermissions is the model entity for the SysPermissions schema.
type SysPermissions struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// 权限归属菜单
	MenuID int64 `json:"menu_id,omitempty"`
	// 权限名称
	Name string `json:"name,omitempty"`
	// 标识
	Code string `json:"code,omitempty"`
	// Path holds the value of the "path" field.
	Path string `json:"path,omitempty"`
	// Command holds the value of the "command" field.
	Command string `json:"command,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime int32 `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime   int32 `json:"update_time,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SysPermissions) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case syspermissions.FieldID, syspermissions.FieldMenuID, syspermissions.FieldCreateTime, syspermissions.FieldUpdateTime:
			values[i] = new(sql.NullInt64)
		case syspermissions.FieldName, syspermissions.FieldCode, syspermissions.FieldPath, syspermissions.FieldCommand:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SysPermissions fields.
func (sp *SysPermissions) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case syspermissions.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sp.ID = int64(value.Int64)
		case syspermissions.FieldMenuID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field menu_id", values[i])
			} else if value.Valid {
				sp.MenuID = value.Int64
			}
		case syspermissions.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				sp.Name = value.String
			}
		case syspermissions.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				sp.Code = value.String
			}
		case syspermissions.FieldPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field path", values[i])
			} else if value.Valid {
				sp.Path = value.String
			}
		case syspermissions.FieldCommand:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field command", values[i])
			} else if value.Valid {
				sp.Command = value.String
			}
		case syspermissions.FieldCreateTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				sp.CreateTime = int32(value.Int64)
			}
		case syspermissions.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				sp.UpdateTime = int32(value.Int64)
			}
		default:
			sp.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SysPermissions.
// This includes values selected through modifiers, order, etc.
func (sp *SysPermissions) Value(name string) (ent.Value, error) {
	return sp.selectValues.Get(name)
}

// Update returns a builder for updating this SysPermissions.
// Note that you need to call SysPermissions.Unwrap() before calling this method if this SysPermissions
// was returned from a transaction, and the transaction was committed or rolled back.
func (sp *SysPermissions) Update() *SysPermissionsUpdateOne {
	return NewSysPermissionsClient(sp.config).UpdateOne(sp)
}

// Unwrap unwraps the SysPermissions entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sp *SysPermissions) Unwrap() *SysPermissions {
	_tx, ok := sp.config.driver.(*txDriver)
	if !ok {
		panic("ent: SysPermissions is not a transactional entity")
	}
	sp.config.driver = _tx.drv
	return sp
}

// String implements the fmt.Stringer.
func (sp *SysPermissions) String() string {
	var builder strings.Builder
	builder.WriteString("SysPermissions(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sp.ID))
	builder.WriteString("menu_id=")
	builder.WriteString(fmt.Sprintf("%v", sp.MenuID))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(sp.Name)
	builder.WriteString(", ")
	builder.WriteString("code=")
	builder.WriteString(sp.Code)
	builder.WriteString(", ")
	builder.WriteString("path=")
	builder.WriteString(sp.Path)
	builder.WriteString(", ")
	builder.WriteString("command=")
	builder.WriteString(sp.Command)
	builder.WriteString(", ")
	builder.WriteString("create_time=")
	builder.WriteString(fmt.Sprintf("%v", sp.CreateTime))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(fmt.Sprintf("%v", sp.UpdateTime))
	builder.WriteByte(')')
	return builder.String()
}

// SysPermissionsSlice is a parsable slice of SysPermissions.
type SysPermissionsSlice []*SysPermissions
