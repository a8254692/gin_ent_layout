// Code generated by ent, DO NOT EDIT.

package ent

import (
	"back-end/merchant/internal/data/ent/syspermissions"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SysPermissionsCreate is the builder for creating a SysPermissions entity.
type SysPermissionsCreate struct {
	config
	mutation *SysPermissionsMutation
	hooks    []Hook
}

// SetMenuID sets the "menu_id" field.
func (spc *SysPermissionsCreate) SetMenuID(i int64) *SysPermissionsCreate {
	spc.mutation.SetMenuID(i)
	return spc
}

// SetNillableMenuID sets the "menu_id" field if the given value is not nil.
func (spc *SysPermissionsCreate) SetNillableMenuID(i *int64) *SysPermissionsCreate {
	if i != nil {
		spc.SetMenuID(*i)
	}
	return spc
}

// SetName sets the "name" field.
func (spc *SysPermissionsCreate) SetName(s string) *SysPermissionsCreate {
	spc.mutation.SetName(s)
	return spc
}

// SetCode sets the "code" field.
func (spc *SysPermissionsCreate) SetCode(s string) *SysPermissionsCreate {
	spc.mutation.SetCode(s)
	return spc
}

// SetPath sets the "path" field.
func (spc *SysPermissionsCreate) SetPath(s string) *SysPermissionsCreate {
	spc.mutation.SetPath(s)
	return spc
}

// SetCommand sets the "command" field.
func (spc *SysPermissionsCreate) SetCommand(s string) *SysPermissionsCreate {
	spc.mutation.SetCommand(s)
	return spc
}

// SetCreateTime sets the "create_time" field.
func (spc *SysPermissionsCreate) SetCreateTime(i int32) *SysPermissionsCreate {
	spc.mutation.SetCreateTime(i)
	return spc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (spc *SysPermissionsCreate) SetNillableCreateTime(i *int32) *SysPermissionsCreate {
	if i != nil {
		spc.SetCreateTime(*i)
	}
	return spc
}

// SetUpdateTime sets the "update_time" field.
func (spc *SysPermissionsCreate) SetUpdateTime(i int32) *SysPermissionsCreate {
	spc.mutation.SetUpdateTime(i)
	return spc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (spc *SysPermissionsCreate) SetNillableUpdateTime(i *int32) *SysPermissionsCreate {
	if i != nil {
		spc.SetUpdateTime(*i)
	}
	return spc
}

// SetID sets the "id" field.
func (spc *SysPermissionsCreate) SetID(i int64) *SysPermissionsCreate {
	spc.mutation.SetID(i)
	return spc
}

// Mutation returns the SysPermissionsMutation object of the builder.
func (spc *SysPermissionsCreate) Mutation() *SysPermissionsMutation {
	return spc.mutation
}

// Save creates the SysPermissions in the database.
func (spc *SysPermissionsCreate) Save(ctx context.Context) (*SysPermissions, error) {
	spc.defaults()
	return withHooks(ctx, spc.sqlSave, spc.mutation, spc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (spc *SysPermissionsCreate) SaveX(ctx context.Context) *SysPermissions {
	v, err := spc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (spc *SysPermissionsCreate) Exec(ctx context.Context) error {
	_, err := spc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spc *SysPermissionsCreate) ExecX(ctx context.Context) {
	if err := spc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (spc *SysPermissionsCreate) defaults() {
	if _, ok := spc.mutation.MenuID(); !ok {
		v := syspermissions.DefaultMenuID
		spc.mutation.SetMenuID(v)
	}
	if _, ok := spc.mutation.CreateTime(); !ok {
		v := syspermissions.DefaultCreateTime
		spc.mutation.SetCreateTime(v)
	}
	if _, ok := spc.mutation.UpdateTime(); !ok {
		v := syspermissions.DefaultUpdateTime
		spc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (spc *SysPermissionsCreate) check() error {
	if _, ok := spc.mutation.MenuID(); !ok {
		return &ValidationError{Name: "menu_id", err: errors.New(`ent: missing required field "SysPermissions.menu_id"`)}
	}
	if _, ok := spc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "SysPermissions.name"`)}
	}
	if _, ok := spc.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New(`ent: missing required field "SysPermissions.code"`)}
	}
	if _, ok := spc.mutation.Path(); !ok {
		return &ValidationError{Name: "path", err: errors.New(`ent: missing required field "SysPermissions.path"`)}
	}
	if _, ok := spc.mutation.Command(); !ok {
		return &ValidationError{Name: "command", err: errors.New(`ent: missing required field "SysPermissions.command"`)}
	}
	if _, ok := spc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "SysPermissions.create_time"`)}
	}
	if _, ok := spc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "SysPermissions.update_time"`)}
	}
	return nil
}

func (spc *SysPermissionsCreate) sqlSave(ctx context.Context) (*SysPermissions, error) {
	if err := spc.check(); err != nil {
		return nil, err
	}
	_node, _spec := spc.createSpec()
	if err := sqlgraph.CreateNode(ctx, spc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	spc.mutation.id = &_node.ID
	spc.mutation.done = true
	return _node, nil
}

func (spc *SysPermissionsCreate) createSpec() (*SysPermissions, *sqlgraph.CreateSpec) {
	var (
		_node = &SysPermissions{config: spc.config}
		_spec = sqlgraph.NewCreateSpec(syspermissions.Table, sqlgraph.NewFieldSpec(syspermissions.FieldID, field.TypeInt64))
	)
	if id, ok := spc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := spc.mutation.MenuID(); ok {
		_spec.SetField(syspermissions.FieldMenuID, field.TypeInt64, value)
		_node.MenuID = value
	}
	if value, ok := spc.mutation.Name(); ok {
		_spec.SetField(syspermissions.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := spc.mutation.Code(); ok {
		_spec.SetField(syspermissions.FieldCode, field.TypeString, value)
		_node.Code = value
	}
	if value, ok := spc.mutation.Path(); ok {
		_spec.SetField(syspermissions.FieldPath, field.TypeString, value)
		_node.Path = value
	}
	if value, ok := spc.mutation.Command(); ok {
		_spec.SetField(syspermissions.FieldCommand, field.TypeString, value)
		_node.Command = value
	}
	if value, ok := spc.mutation.CreateTime(); ok {
		_spec.SetField(syspermissions.FieldCreateTime, field.TypeInt32, value)
		_node.CreateTime = value
	}
	if value, ok := spc.mutation.UpdateTime(); ok {
		_spec.SetField(syspermissions.FieldUpdateTime, field.TypeInt32, value)
		_node.UpdateTime = value
	}
	return _node, _spec
}

// SysPermissionsCreateBulk is the builder for creating many SysPermissions entities in bulk.
type SysPermissionsCreateBulk struct {
	config
	err      error
	builders []*SysPermissionsCreate
}

// Save creates the SysPermissions entities in the database.
func (spcb *SysPermissionsCreateBulk) Save(ctx context.Context) ([]*SysPermissions, error) {
	if spcb.err != nil {
		return nil, spcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(spcb.builders))
	nodes := make([]*SysPermissions, len(spcb.builders))
	mutators := make([]Mutator, len(spcb.builders))
	for i := range spcb.builders {
		func(i int, root context.Context) {
			builder := spcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SysPermissionsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, spcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, spcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, spcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (spcb *SysPermissionsCreateBulk) SaveX(ctx context.Context) []*SysPermissions {
	v, err := spcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (spcb *SysPermissionsCreateBulk) Exec(ctx context.Context) error {
	_, err := spcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spcb *SysPermissionsCreateBulk) ExecX(ctx context.Context) {
	if err := spcb.Exec(ctx); err != nil {
		panic(err)
	}
}
