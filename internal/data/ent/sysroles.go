// Code generated by ent, DO NOT EDIT.

package ent

import (
	"back-end/merchant/internal/data/ent/sysroles"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// SysRoles is the model entity for the SysRoles schema.
type SysRoles struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// GUID holds the value of the "guid" field.
	GUID string `json:"guid,omitempty"`
	// 商户ID
	MerchantID int64 `json:"merchant_id,omitempty"`
	// 角色名称
	Name string `json:"name,omitempty"`
	// 角色标识
	Code string `json:"code,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime int32 `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime   int32 `json:"update_time,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SysRoles) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case sysroles.FieldID, sysroles.FieldMerchantID, sysroles.FieldCreateTime, sysroles.FieldUpdateTime:
			values[i] = new(sql.NullInt64)
		case sysroles.FieldGUID, sysroles.FieldName, sysroles.FieldCode:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SysRoles fields.
func (sr *SysRoles) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case sysroles.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sr.ID = int64(value.Int64)
		case sysroles.FieldGUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field guid", values[i])
			} else if value.Valid {
				sr.GUID = value.String
			}
		case sysroles.FieldMerchantID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field merchant_id", values[i])
			} else if value.Valid {
				sr.MerchantID = value.Int64
			}
		case sysroles.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				sr.Name = value.String
			}
		case sysroles.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				sr.Code = value.String
			}
		case sysroles.FieldCreateTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				sr.CreateTime = int32(value.Int64)
			}
		case sysroles.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				sr.UpdateTime = int32(value.Int64)
			}
		default:
			sr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SysRoles.
// This includes values selected through modifiers, order, etc.
func (sr *SysRoles) Value(name string) (ent.Value, error) {
	return sr.selectValues.Get(name)
}

// Update returns a builder for updating this SysRoles.
// Note that you need to call SysRoles.Unwrap() before calling this method if this SysRoles
// was returned from a transaction, and the transaction was committed or rolled back.
func (sr *SysRoles) Update() *SysRolesUpdateOne {
	return NewSysRolesClient(sr.config).UpdateOne(sr)
}

// Unwrap unwraps the SysRoles entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sr *SysRoles) Unwrap() *SysRoles {
	_tx, ok := sr.config.driver.(*txDriver)
	if !ok {
		panic("ent: SysRoles is not a transactional entity")
	}
	sr.config.driver = _tx.drv
	return sr
}

// String implements the fmt.Stringer.
func (sr *SysRoles) String() string {
	var builder strings.Builder
	builder.WriteString("SysRoles(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sr.ID))
	builder.WriteString("guid=")
	builder.WriteString(sr.GUID)
	builder.WriteString(", ")
	builder.WriteString("merchant_id=")
	builder.WriteString(fmt.Sprintf("%v", sr.MerchantID))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(sr.Name)
	builder.WriteString(", ")
	builder.WriteString("code=")
	builder.WriteString(sr.Code)
	builder.WriteString(", ")
	builder.WriteString("create_time=")
	builder.WriteString(fmt.Sprintf("%v", sr.CreateTime))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(fmt.Sprintf("%v", sr.UpdateTime))
	builder.WriteByte(')')
	return builder.String()
}

// SysRolesSlice is a parsable slice of SysRoles.
type SysRolesSlice []*SysRoles
