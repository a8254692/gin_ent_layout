// Code generated by ent, DO NOT EDIT.

package ent

import (
	"back-end/merchant/internal/data/ent/sysroles"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SysRolesCreate is the builder for creating a SysRoles entity.
type SysRolesCreate struct {
	config
	mutation *SysRolesMutation
	hooks    []Hook
}

// SetGUID sets the "guid" field.
func (src *SysRolesCreate) SetGUID(s string) *SysRolesCreate {
	src.mutation.SetGUID(s)
	return src
}

// SetMerchantID sets the "merchant_id" field.
func (src *SysRolesCreate) SetMerchantID(i int64) *SysRolesCreate {
	src.mutation.SetMerchantID(i)
	return src
}

// SetName sets the "name" field.
func (src *SysRolesCreate) SetName(s string) *SysRolesCreate {
	src.mutation.SetName(s)
	return src
}

// SetCode sets the "code" field.
func (src *SysRolesCreate) SetCode(s string) *SysRolesCreate {
	src.mutation.SetCode(s)
	return src
}

// SetCreateTime sets the "create_time" field.
func (src *SysRolesCreate) SetCreateTime(i int32) *SysRolesCreate {
	src.mutation.SetCreateTime(i)
	return src
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (src *SysRolesCreate) SetNillableCreateTime(i *int32) *SysRolesCreate {
	if i != nil {
		src.SetCreateTime(*i)
	}
	return src
}

// SetUpdateTime sets the "update_time" field.
func (src *SysRolesCreate) SetUpdateTime(i int32) *SysRolesCreate {
	src.mutation.SetUpdateTime(i)
	return src
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (src *SysRolesCreate) SetNillableUpdateTime(i *int32) *SysRolesCreate {
	if i != nil {
		src.SetUpdateTime(*i)
	}
	return src
}

// SetID sets the "id" field.
func (src *SysRolesCreate) SetID(i int64) *SysRolesCreate {
	src.mutation.SetID(i)
	return src
}

// Mutation returns the SysRolesMutation object of the builder.
func (src *SysRolesCreate) Mutation() *SysRolesMutation {
	return src.mutation
}

// Save creates the SysRoles in the database.
func (src *SysRolesCreate) Save(ctx context.Context) (*SysRoles, error) {
	src.defaults()
	return withHooks(ctx, src.sqlSave, src.mutation, src.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (src *SysRolesCreate) SaveX(ctx context.Context) *SysRoles {
	v, err := src.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (src *SysRolesCreate) Exec(ctx context.Context) error {
	_, err := src.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (src *SysRolesCreate) ExecX(ctx context.Context) {
	if err := src.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (src *SysRolesCreate) defaults() {
	if _, ok := src.mutation.CreateTime(); !ok {
		v := sysroles.DefaultCreateTime
		src.mutation.SetCreateTime(v)
	}
	if _, ok := src.mutation.UpdateTime(); !ok {
		v := sysroles.DefaultUpdateTime
		src.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (src *SysRolesCreate) check() error {
	if _, ok := src.mutation.GUID(); !ok {
		return &ValidationError{Name: "guid", err: errors.New(`ent: missing required field "SysRoles.guid"`)}
	}
	if _, ok := src.mutation.MerchantID(); !ok {
		return &ValidationError{Name: "merchant_id", err: errors.New(`ent: missing required field "SysRoles.merchant_id"`)}
	}
	if _, ok := src.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "SysRoles.name"`)}
	}
	if _, ok := src.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New(`ent: missing required field "SysRoles.code"`)}
	}
	if _, ok := src.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "SysRoles.create_time"`)}
	}
	if _, ok := src.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "SysRoles.update_time"`)}
	}
	return nil
}

func (src *SysRolesCreate) sqlSave(ctx context.Context) (*SysRoles, error) {
	if err := src.check(); err != nil {
		return nil, err
	}
	_node, _spec := src.createSpec()
	if err := sqlgraph.CreateNode(ctx, src.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	src.mutation.id = &_node.ID
	src.mutation.done = true
	return _node, nil
}

func (src *SysRolesCreate) createSpec() (*SysRoles, *sqlgraph.CreateSpec) {
	var (
		_node = &SysRoles{config: src.config}
		_spec = sqlgraph.NewCreateSpec(sysroles.Table, sqlgraph.NewFieldSpec(sysroles.FieldID, field.TypeInt64))
	)
	if id, ok := src.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := src.mutation.GUID(); ok {
		_spec.SetField(sysroles.FieldGUID, field.TypeString, value)
		_node.GUID = value
	}
	if value, ok := src.mutation.MerchantID(); ok {
		_spec.SetField(sysroles.FieldMerchantID, field.TypeInt64, value)
		_node.MerchantID = value
	}
	if value, ok := src.mutation.Name(); ok {
		_spec.SetField(sysroles.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := src.mutation.Code(); ok {
		_spec.SetField(sysroles.FieldCode, field.TypeString, value)
		_node.Code = value
	}
	if value, ok := src.mutation.CreateTime(); ok {
		_spec.SetField(sysroles.FieldCreateTime, field.TypeInt32, value)
		_node.CreateTime = value
	}
	if value, ok := src.mutation.UpdateTime(); ok {
		_spec.SetField(sysroles.FieldUpdateTime, field.TypeInt32, value)
		_node.UpdateTime = value
	}
	return _node, _spec
}

// SysRolesCreateBulk is the builder for creating many SysRoles entities in bulk.
type SysRolesCreateBulk struct {
	config
	err      error
	builders []*SysRolesCreate
}

// Save creates the SysRoles entities in the database.
func (srcb *SysRolesCreateBulk) Save(ctx context.Context) ([]*SysRoles, error) {
	if srcb.err != nil {
		return nil, srcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(srcb.builders))
	nodes := make([]*SysRoles, len(srcb.builders))
	mutators := make([]Mutator, len(srcb.builders))
	for i := range srcb.builders {
		func(i int, root context.Context) {
			builder := srcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SysRolesMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, srcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, srcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, srcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (srcb *SysRolesCreateBulk) SaveX(ctx context.Context) []*SysRoles {
	v, err := srcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (srcb *SysRolesCreateBulk) Exec(ctx context.Context) error {
	_, err := srcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (srcb *SysRolesCreateBulk) ExecX(ctx context.Context) {
	if err := srcb.Exec(ctx); err != nil {
		panic(err)
	}
}
