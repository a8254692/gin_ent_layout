// Code generated by ent, DO NOT EDIT.

package ent

import (
	"back-end/merchant/internal/data/ent/merchantlist"
	"back-end/merchant/internal/data/ent/predicate"
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MerchantListDelete is the builder for deleting a MerchantList entity.
type MerchantListDelete struct {
	config
	hooks    []Hook
	mutation *MerchantListMutation
}

// Where appends a list predicates to the MerchantListDelete builder.
func (mld *MerchantListDelete) Where(ps ...predicate.MerchantList) *MerchantListDelete {
	mld.mutation.Where(ps...)
	return mld
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (mld *MerchantListDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, mld.sqlExec, mld.mutation, mld.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (mld *MerchantListDelete) ExecX(ctx context.Context) int {
	n, err := mld.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (mld *MerchantListDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(merchantlist.Table, sqlgraph.NewFieldSpec(merchantlist.FieldID, field.TypeInt32))
	if ps := mld.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, mld.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	mld.mutation.done = true
	return affected, err
}

// MerchantListDeleteOne is the builder for deleting a single MerchantList entity.
type MerchantListDeleteOne struct {
	mld *MerchantListDelete
}

// Where appends a list predicates to the MerchantListDelete builder.
func (mldo *MerchantListDeleteOne) Where(ps ...predicate.MerchantList) *MerchantListDeleteOne {
	mldo.mld.mutation.Where(ps...)
	return mldo
}

// Exec executes the deletion query.
func (mldo *MerchantListDeleteOne) Exec(ctx context.Context) error {
	n, err := mldo.mld.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{merchantlist.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (mldo *MerchantListDeleteOne) ExecX(ctx context.Context) {
	if err := mldo.Exec(ctx); err != nil {
		panic(err)
	}
}
