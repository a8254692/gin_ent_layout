// Code generated by ent, DO NOT EDIT.

package ent

import (
	"back-end/merchant/internal/data/ent/merchantchannelbind"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MerchantChannelBindCreate is the builder for creating a MerchantChannelBind entity.
type MerchantChannelBindCreate struct {
	config
	mutation *MerchantChannelBindMutation
	hooks    []Hook
}

// SetMerchantID sets the "merchant_id" field.
func (mcbc *MerchantChannelBindCreate) SetMerchantID(i int32) *MerchantChannelBindCreate {
	mcbc.mutation.SetMerchantID(i)
	return mcbc
}

// SetChannelID sets the "channel_id" field.
func (mcbc *MerchantChannelBindCreate) SetChannelID(i int32) *MerchantChannelBindCreate {
	mcbc.mutation.SetChannelID(i)
	return mcbc
}

// SetStatus sets the "status" field.
func (mcbc *MerchantChannelBindCreate) SetStatus(i int16) *MerchantChannelBindCreate {
	mcbc.mutation.SetStatus(i)
	return mcbc
}

// SetCreateTime sets the "create_time" field.
func (mcbc *MerchantChannelBindCreate) SetCreateTime(i int32) *MerchantChannelBindCreate {
	mcbc.mutation.SetCreateTime(i)
	return mcbc
}

// SetUpdateTime sets the "update_time" field.
func (mcbc *MerchantChannelBindCreate) SetUpdateTime(i int32) *MerchantChannelBindCreate {
	mcbc.mutation.SetUpdateTime(i)
	return mcbc
}

// SetID sets the "id" field.
func (mcbc *MerchantChannelBindCreate) SetID(i int32) *MerchantChannelBindCreate {
	mcbc.mutation.SetID(i)
	return mcbc
}

// Mutation returns the MerchantChannelBindMutation object of the builder.
func (mcbc *MerchantChannelBindCreate) Mutation() *MerchantChannelBindMutation {
	return mcbc.mutation
}

// Save creates the MerchantChannelBind in the database.
func (mcbc *MerchantChannelBindCreate) Save(ctx context.Context) (*MerchantChannelBind, error) {
	return withHooks(ctx, mcbc.sqlSave, mcbc.mutation, mcbc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mcbc *MerchantChannelBindCreate) SaveX(ctx context.Context) *MerchantChannelBind {
	v, err := mcbc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mcbc *MerchantChannelBindCreate) Exec(ctx context.Context) error {
	_, err := mcbc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcbc *MerchantChannelBindCreate) ExecX(ctx context.Context) {
	if err := mcbc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mcbc *MerchantChannelBindCreate) check() error {
	if _, ok := mcbc.mutation.MerchantID(); !ok {
		return &ValidationError{Name: "merchant_id", err: errors.New(`ent: missing required field "MerchantChannelBind.merchant_id"`)}
	}
	if _, ok := mcbc.mutation.ChannelID(); !ok {
		return &ValidationError{Name: "channel_id", err: errors.New(`ent: missing required field "MerchantChannelBind.channel_id"`)}
	}
	if _, ok := mcbc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "MerchantChannelBind.status"`)}
	}
	if _, ok := mcbc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "MerchantChannelBind.create_time"`)}
	}
	if _, ok := mcbc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "MerchantChannelBind.update_time"`)}
	}
	return nil
}

func (mcbc *MerchantChannelBindCreate) sqlSave(ctx context.Context) (*MerchantChannelBind, error) {
	if err := mcbc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mcbc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mcbc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int32(id)
	}
	mcbc.mutation.id = &_node.ID
	mcbc.mutation.done = true
	return _node, nil
}

func (mcbc *MerchantChannelBindCreate) createSpec() (*MerchantChannelBind, *sqlgraph.CreateSpec) {
	var (
		_node = &MerchantChannelBind{config: mcbc.config}
		_spec = sqlgraph.NewCreateSpec(merchantchannelbind.Table, sqlgraph.NewFieldSpec(merchantchannelbind.FieldID, field.TypeInt32))
	)
	if id, ok := mcbc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := mcbc.mutation.MerchantID(); ok {
		_spec.SetField(merchantchannelbind.FieldMerchantID, field.TypeInt32, value)
		_node.MerchantID = value
	}
	if value, ok := mcbc.mutation.ChannelID(); ok {
		_spec.SetField(merchantchannelbind.FieldChannelID, field.TypeInt32, value)
		_node.ChannelID = value
	}
	if value, ok := mcbc.mutation.Status(); ok {
		_spec.SetField(merchantchannelbind.FieldStatus, field.TypeInt16, value)
		_node.Status = value
	}
	if value, ok := mcbc.mutation.CreateTime(); ok {
		_spec.SetField(merchantchannelbind.FieldCreateTime, field.TypeInt32, value)
		_node.CreateTime = value
	}
	if value, ok := mcbc.mutation.UpdateTime(); ok {
		_spec.SetField(merchantchannelbind.FieldUpdateTime, field.TypeInt32, value)
		_node.UpdateTime = value
	}
	return _node, _spec
}

// MerchantChannelBindCreateBulk is the builder for creating many MerchantChannelBind entities in bulk.
type MerchantChannelBindCreateBulk struct {
	config
	err      error
	builders []*MerchantChannelBindCreate
}

// Save creates the MerchantChannelBind entities in the database.
func (mcbcb *MerchantChannelBindCreateBulk) Save(ctx context.Context) ([]*MerchantChannelBind, error) {
	if mcbcb.err != nil {
		return nil, mcbcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mcbcb.builders))
	nodes := make([]*MerchantChannelBind, len(mcbcb.builders))
	mutators := make([]Mutator, len(mcbcb.builders))
	for i := range mcbcb.builders {
		func(i int, root context.Context) {
			builder := mcbcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MerchantChannelBindMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mcbcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mcbcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mcbcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mcbcb *MerchantChannelBindCreateBulk) SaveX(ctx context.Context) []*MerchantChannelBind {
	v, err := mcbcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mcbcb *MerchantChannelBindCreateBulk) Exec(ctx context.Context) error {
	_, err := mcbcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcbcb *MerchantChannelBindCreateBulk) ExecX(ctx context.Context) {
	if err := mcbcb.Exec(ctx); err != nil {
		panic(err)
	}
}
