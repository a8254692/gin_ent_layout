// Code generated by ent, DO NOT EDIT.

package ent

import (
	"back-end/merchant/internal/data/ent/predicate"
	"back-end/merchant/internal/data/ent/sysmenu"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SysMenuUpdate is the builder for updating SysMenu entities.
type SysMenuUpdate struct {
	config
	hooks    []Hook
	mutation *SysMenuMutation
}

// Where appends a list predicates to the SysMenuUpdate builder.
func (smu *SysMenuUpdate) Where(ps ...predicate.SysMenu) *SysMenuUpdate {
	smu.mutation.Where(ps...)
	return smu
}

// SetParentID sets the "parent_id" field.
func (smu *SysMenuUpdate) SetParentID(i int64) *SysMenuUpdate {
	smu.mutation.ResetParentID()
	smu.mutation.SetParentID(i)
	return smu
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (smu *SysMenuUpdate) SetNillableParentID(i *int64) *SysMenuUpdate {
	if i != nil {
		smu.SetParentID(*i)
	}
	return smu
}

// AddParentID adds i to the "parent_id" field.
func (smu *SysMenuUpdate) AddParentID(i int64) *SysMenuUpdate {
	smu.mutation.AddParentID(i)
	return smu
}

// SetTitle sets the "title" field.
func (smu *SysMenuUpdate) SetTitle(s string) *SysMenuUpdate {
	smu.mutation.SetTitle(s)
	return smu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (smu *SysMenuUpdate) SetNillableTitle(s *string) *SysMenuUpdate {
	if s != nil {
		smu.SetTitle(*s)
	}
	return smu
}

// SetIcon sets the "icon" field.
func (smu *SysMenuUpdate) SetIcon(s string) *SysMenuUpdate {
	smu.mutation.SetIcon(s)
	return smu
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (smu *SysMenuUpdate) SetNillableIcon(s *string) *SysMenuUpdate {
	if s != nil {
		smu.SetIcon(*s)
	}
	return smu
}

// ClearIcon clears the value of the "icon" field.
func (smu *SysMenuUpdate) ClearIcon() *SysMenuUpdate {
	smu.mutation.ClearIcon()
	return smu
}

// SetURI sets the "uri" field.
func (smu *SysMenuUpdate) SetURI(s string) *SysMenuUpdate {
	smu.mutation.SetURI(s)
	return smu
}

// SetNillableURI sets the "uri" field if the given value is not nil.
func (smu *SysMenuUpdate) SetNillableURI(s *string) *SysMenuUpdate {
	if s != nil {
		smu.SetURI(*s)
	}
	return smu
}

// ClearURI clears the value of the "uri" field.
func (smu *SysMenuUpdate) ClearURI() *SysMenuUpdate {
	smu.mutation.ClearURI()
	return smu
}

// SetShow sets the "show" field.
func (smu *SysMenuUpdate) SetShow(i int8) *SysMenuUpdate {
	smu.mutation.ResetShow()
	smu.mutation.SetShow(i)
	return smu
}

// SetNillableShow sets the "show" field if the given value is not nil.
func (smu *SysMenuUpdate) SetNillableShow(i *int8) *SysMenuUpdate {
	if i != nil {
		smu.SetShow(*i)
	}
	return smu
}

// AddShow adds i to the "show" field.
func (smu *SysMenuUpdate) AddShow(i int8) *SysMenuUpdate {
	smu.mutation.AddShow(i)
	return smu
}

// SetSort sets the "sort" field.
func (smu *SysMenuUpdate) SetSort(i int32) *SysMenuUpdate {
	smu.mutation.ResetSort()
	smu.mutation.SetSort(i)
	return smu
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (smu *SysMenuUpdate) SetNillableSort(i *int32) *SysMenuUpdate {
	if i != nil {
		smu.SetSort(*i)
	}
	return smu
}

// AddSort adds i to the "sort" field.
func (smu *SysMenuUpdate) AddSort(i int32) *SysMenuUpdate {
	smu.mutation.AddSort(i)
	return smu
}

// SetCreateTime sets the "create_time" field.
func (smu *SysMenuUpdate) SetCreateTime(i int32) *SysMenuUpdate {
	smu.mutation.ResetCreateTime()
	smu.mutation.SetCreateTime(i)
	return smu
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (smu *SysMenuUpdate) SetNillableCreateTime(i *int32) *SysMenuUpdate {
	if i != nil {
		smu.SetCreateTime(*i)
	}
	return smu
}

// AddCreateTime adds i to the "create_time" field.
func (smu *SysMenuUpdate) AddCreateTime(i int32) *SysMenuUpdate {
	smu.mutation.AddCreateTime(i)
	return smu
}

// SetUpdateTime sets the "update_time" field.
func (smu *SysMenuUpdate) SetUpdateTime(i int32) *SysMenuUpdate {
	smu.mutation.ResetUpdateTime()
	smu.mutation.SetUpdateTime(i)
	return smu
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (smu *SysMenuUpdate) SetNillableUpdateTime(i *int32) *SysMenuUpdate {
	if i != nil {
		smu.SetUpdateTime(*i)
	}
	return smu
}

// AddUpdateTime adds i to the "update_time" field.
func (smu *SysMenuUpdate) AddUpdateTime(i int32) *SysMenuUpdate {
	smu.mutation.AddUpdateTime(i)
	return smu
}

// Mutation returns the SysMenuMutation object of the builder.
func (smu *SysMenuUpdate) Mutation() *SysMenuMutation {
	return smu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (smu *SysMenuUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, smu.sqlSave, smu.mutation, smu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (smu *SysMenuUpdate) SaveX(ctx context.Context) int {
	affected, err := smu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (smu *SysMenuUpdate) Exec(ctx context.Context) error {
	_, err := smu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (smu *SysMenuUpdate) ExecX(ctx context.Context) {
	if err := smu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (smu *SysMenuUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(sysmenu.Table, sysmenu.Columns, sqlgraph.NewFieldSpec(sysmenu.FieldID, field.TypeInt64))
	if ps := smu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := smu.mutation.ParentID(); ok {
		_spec.SetField(sysmenu.FieldParentID, field.TypeInt64, value)
	}
	if value, ok := smu.mutation.AddedParentID(); ok {
		_spec.AddField(sysmenu.FieldParentID, field.TypeInt64, value)
	}
	if value, ok := smu.mutation.Title(); ok {
		_spec.SetField(sysmenu.FieldTitle, field.TypeString, value)
	}
	if value, ok := smu.mutation.Icon(); ok {
		_spec.SetField(sysmenu.FieldIcon, field.TypeString, value)
	}
	if smu.mutation.IconCleared() {
		_spec.ClearField(sysmenu.FieldIcon, field.TypeString)
	}
	if value, ok := smu.mutation.URI(); ok {
		_spec.SetField(sysmenu.FieldURI, field.TypeString, value)
	}
	if smu.mutation.URICleared() {
		_spec.ClearField(sysmenu.FieldURI, field.TypeString)
	}
	if value, ok := smu.mutation.Show(); ok {
		_spec.SetField(sysmenu.FieldShow, field.TypeInt8, value)
	}
	if value, ok := smu.mutation.AddedShow(); ok {
		_spec.AddField(sysmenu.FieldShow, field.TypeInt8, value)
	}
	if value, ok := smu.mutation.Sort(); ok {
		_spec.SetField(sysmenu.FieldSort, field.TypeInt32, value)
	}
	if value, ok := smu.mutation.AddedSort(); ok {
		_spec.AddField(sysmenu.FieldSort, field.TypeInt32, value)
	}
	if value, ok := smu.mutation.CreateTime(); ok {
		_spec.SetField(sysmenu.FieldCreateTime, field.TypeInt32, value)
	}
	if value, ok := smu.mutation.AddedCreateTime(); ok {
		_spec.AddField(sysmenu.FieldCreateTime, field.TypeInt32, value)
	}
	if value, ok := smu.mutation.UpdateTime(); ok {
		_spec.SetField(sysmenu.FieldUpdateTime, field.TypeInt32, value)
	}
	if value, ok := smu.mutation.AddedUpdateTime(); ok {
		_spec.AddField(sysmenu.FieldUpdateTime, field.TypeInt32, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, smu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sysmenu.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	smu.mutation.done = true
	return n, nil
}

// SysMenuUpdateOne is the builder for updating a single SysMenu entity.
type SysMenuUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SysMenuMutation
}

// SetParentID sets the "parent_id" field.
func (smuo *SysMenuUpdateOne) SetParentID(i int64) *SysMenuUpdateOne {
	smuo.mutation.ResetParentID()
	smuo.mutation.SetParentID(i)
	return smuo
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (smuo *SysMenuUpdateOne) SetNillableParentID(i *int64) *SysMenuUpdateOne {
	if i != nil {
		smuo.SetParentID(*i)
	}
	return smuo
}

// AddParentID adds i to the "parent_id" field.
func (smuo *SysMenuUpdateOne) AddParentID(i int64) *SysMenuUpdateOne {
	smuo.mutation.AddParentID(i)
	return smuo
}

// SetTitle sets the "title" field.
func (smuo *SysMenuUpdateOne) SetTitle(s string) *SysMenuUpdateOne {
	smuo.mutation.SetTitle(s)
	return smuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (smuo *SysMenuUpdateOne) SetNillableTitle(s *string) *SysMenuUpdateOne {
	if s != nil {
		smuo.SetTitle(*s)
	}
	return smuo
}

// SetIcon sets the "icon" field.
func (smuo *SysMenuUpdateOne) SetIcon(s string) *SysMenuUpdateOne {
	smuo.mutation.SetIcon(s)
	return smuo
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (smuo *SysMenuUpdateOne) SetNillableIcon(s *string) *SysMenuUpdateOne {
	if s != nil {
		smuo.SetIcon(*s)
	}
	return smuo
}

// ClearIcon clears the value of the "icon" field.
func (smuo *SysMenuUpdateOne) ClearIcon() *SysMenuUpdateOne {
	smuo.mutation.ClearIcon()
	return smuo
}

// SetURI sets the "uri" field.
func (smuo *SysMenuUpdateOne) SetURI(s string) *SysMenuUpdateOne {
	smuo.mutation.SetURI(s)
	return smuo
}

// SetNillableURI sets the "uri" field if the given value is not nil.
func (smuo *SysMenuUpdateOne) SetNillableURI(s *string) *SysMenuUpdateOne {
	if s != nil {
		smuo.SetURI(*s)
	}
	return smuo
}

// ClearURI clears the value of the "uri" field.
func (smuo *SysMenuUpdateOne) ClearURI() *SysMenuUpdateOne {
	smuo.mutation.ClearURI()
	return smuo
}

// SetShow sets the "show" field.
func (smuo *SysMenuUpdateOne) SetShow(i int8) *SysMenuUpdateOne {
	smuo.mutation.ResetShow()
	smuo.mutation.SetShow(i)
	return smuo
}

// SetNillableShow sets the "show" field if the given value is not nil.
func (smuo *SysMenuUpdateOne) SetNillableShow(i *int8) *SysMenuUpdateOne {
	if i != nil {
		smuo.SetShow(*i)
	}
	return smuo
}

// AddShow adds i to the "show" field.
func (smuo *SysMenuUpdateOne) AddShow(i int8) *SysMenuUpdateOne {
	smuo.mutation.AddShow(i)
	return smuo
}

// SetSort sets the "sort" field.
func (smuo *SysMenuUpdateOne) SetSort(i int32) *SysMenuUpdateOne {
	smuo.mutation.ResetSort()
	smuo.mutation.SetSort(i)
	return smuo
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (smuo *SysMenuUpdateOne) SetNillableSort(i *int32) *SysMenuUpdateOne {
	if i != nil {
		smuo.SetSort(*i)
	}
	return smuo
}

// AddSort adds i to the "sort" field.
func (smuo *SysMenuUpdateOne) AddSort(i int32) *SysMenuUpdateOne {
	smuo.mutation.AddSort(i)
	return smuo
}

// SetCreateTime sets the "create_time" field.
func (smuo *SysMenuUpdateOne) SetCreateTime(i int32) *SysMenuUpdateOne {
	smuo.mutation.ResetCreateTime()
	smuo.mutation.SetCreateTime(i)
	return smuo
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (smuo *SysMenuUpdateOne) SetNillableCreateTime(i *int32) *SysMenuUpdateOne {
	if i != nil {
		smuo.SetCreateTime(*i)
	}
	return smuo
}

// AddCreateTime adds i to the "create_time" field.
func (smuo *SysMenuUpdateOne) AddCreateTime(i int32) *SysMenuUpdateOne {
	smuo.mutation.AddCreateTime(i)
	return smuo
}

// SetUpdateTime sets the "update_time" field.
func (smuo *SysMenuUpdateOne) SetUpdateTime(i int32) *SysMenuUpdateOne {
	smuo.mutation.ResetUpdateTime()
	smuo.mutation.SetUpdateTime(i)
	return smuo
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (smuo *SysMenuUpdateOne) SetNillableUpdateTime(i *int32) *SysMenuUpdateOne {
	if i != nil {
		smuo.SetUpdateTime(*i)
	}
	return smuo
}

// AddUpdateTime adds i to the "update_time" field.
func (smuo *SysMenuUpdateOne) AddUpdateTime(i int32) *SysMenuUpdateOne {
	smuo.mutation.AddUpdateTime(i)
	return smuo
}

// Mutation returns the SysMenuMutation object of the builder.
func (smuo *SysMenuUpdateOne) Mutation() *SysMenuMutation {
	return smuo.mutation
}

// Where appends a list predicates to the SysMenuUpdate builder.
func (smuo *SysMenuUpdateOne) Where(ps ...predicate.SysMenu) *SysMenuUpdateOne {
	smuo.mutation.Where(ps...)
	return smuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (smuo *SysMenuUpdateOne) Select(field string, fields ...string) *SysMenuUpdateOne {
	smuo.fields = append([]string{field}, fields...)
	return smuo
}

// Save executes the query and returns the updated SysMenu entity.
func (smuo *SysMenuUpdateOne) Save(ctx context.Context) (*SysMenu, error) {
	return withHooks(ctx, smuo.sqlSave, smuo.mutation, smuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (smuo *SysMenuUpdateOne) SaveX(ctx context.Context) *SysMenu {
	node, err := smuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (smuo *SysMenuUpdateOne) Exec(ctx context.Context) error {
	_, err := smuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (smuo *SysMenuUpdateOne) ExecX(ctx context.Context) {
	if err := smuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (smuo *SysMenuUpdateOne) sqlSave(ctx context.Context) (_node *SysMenu, err error) {
	_spec := sqlgraph.NewUpdateSpec(sysmenu.Table, sysmenu.Columns, sqlgraph.NewFieldSpec(sysmenu.FieldID, field.TypeInt64))
	id, ok := smuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SysMenu.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := smuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sysmenu.FieldID)
		for _, f := range fields {
			if !sysmenu.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != sysmenu.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := smuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := smuo.mutation.ParentID(); ok {
		_spec.SetField(sysmenu.FieldParentID, field.TypeInt64, value)
	}
	if value, ok := smuo.mutation.AddedParentID(); ok {
		_spec.AddField(sysmenu.FieldParentID, field.TypeInt64, value)
	}
	if value, ok := smuo.mutation.Title(); ok {
		_spec.SetField(sysmenu.FieldTitle, field.TypeString, value)
	}
	if value, ok := smuo.mutation.Icon(); ok {
		_spec.SetField(sysmenu.FieldIcon, field.TypeString, value)
	}
	if smuo.mutation.IconCleared() {
		_spec.ClearField(sysmenu.FieldIcon, field.TypeString)
	}
	if value, ok := smuo.mutation.URI(); ok {
		_spec.SetField(sysmenu.FieldURI, field.TypeString, value)
	}
	if smuo.mutation.URICleared() {
		_spec.ClearField(sysmenu.FieldURI, field.TypeString)
	}
	if value, ok := smuo.mutation.Show(); ok {
		_spec.SetField(sysmenu.FieldShow, field.TypeInt8, value)
	}
	if value, ok := smuo.mutation.AddedShow(); ok {
		_spec.AddField(sysmenu.FieldShow, field.TypeInt8, value)
	}
	if value, ok := smuo.mutation.Sort(); ok {
		_spec.SetField(sysmenu.FieldSort, field.TypeInt32, value)
	}
	if value, ok := smuo.mutation.AddedSort(); ok {
		_spec.AddField(sysmenu.FieldSort, field.TypeInt32, value)
	}
	if value, ok := smuo.mutation.CreateTime(); ok {
		_spec.SetField(sysmenu.FieldCreateTime, field.TypeInt32, value)
	}
	if value, ok := smuo.mutation.AddedCreateTime(); ok {
		_spec.AddField(sysmenu.FieldCreateTime, field.TypeInt32, value)
	}
	if value, ok := smuo.mutation.UpdateTime(); ok {
		_spec.SetField(sysmenu.FieldUpdateTime, field.TypeInt32, value)
	}
	if value, ok := smuo.mutation.AddedUpdateTime(); ok {
		_spec.AddField(sysmenu.FieldUpdateTime, field.TypeInt32, value)
	}
	_node = &SysMenu{config: smuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, smuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sysmenu.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	smuo.mutation.done = true
	return _node, nil
}
